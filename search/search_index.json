{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":true,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-labor \u00b6 Mobil- \u00e9s webes szoftverek - Webes laborfeladatok TODO","title":"Web-labor"},{"location":"#web-labor","text":"Mobil- \u00e9s webes szoftverek - Webes laborfeladatok TODO","title":"Web-labor"},{"location":"laborok/08-http/","text":"Labor 08 - HTTP, HTML \u00b6 Bevezet\u00e9s \u00b6 A laborok sor\u00e1n a hallgat\u00f3k laborvezet\u0151i seg\u00edts\u00e9ggel, majd \u00f6n\u00e1ll\u00f3an v\u00e9geznek feladatokat a webes technol\u00f3gi\u00e1k gyakorlati megismer\u00e9se \u00e9rdek\u00e9ben. A f\u00e9l\u00e9v sor\u00e1n felhaszn\u00e1lt eszk\u00f6z\u00f6k: Telerik Fiddler , haszn\u00e1lhat\u00f3 az OS X / Linux verzi\u00f3n is futtathat\u00f3 Fiddler Everywhere verzi\u00f3 is, ekkor viszont a k\u00fcl\u00f6nbs\u00e9gekb\u0151l fakad\u00f3 esetleges kellemetlens\u00e9gek\u00e9rt nem v\u00e1llalunk felel\u0151ss\u00e9get, k\u00f6zvetlen link: FiddlerSetup.exe , webb\u00f6ng\u00e9sz\u0151k be\u00e9p\u00edtett hibakeres\u0151 eszk\u00f6zei, Visual Studio Code k\u00f3dszerkeszt\u0151 alkalmaz\u00e1s, otthoni vagy egy\u00e9ni munkav\u00e9gz\u00e9shez haszn\u00e1lhat\u00f3 b\u00e1rmilyen m\u00e1s k\u00f3dszerkeszt\u0151 vagy fejleszt\u0151k\u00f6rnyezet, npm, a NodeJS csomagkezel\u0151je, a http-server npm csomag, ami egy nagyon egyszer\u0171, fejleszt\u00e9si c\u00e9lra sz\u00e1nt HTTP kiszolg\u00e1l\u00f3 ha a g\u00e9pen nincsen telep\u00edtve a http-server, azt az npm install -g http-server paranccsal lehet telep\u00edteni a NodeJS telep\u00edt\u00e9s\u00e9t k\u00f6vet\u0151en, majd parancssorban a http-server parancs kiad\u00e1s\u00e1val egy \u00faj HTTP szerver indul, ami az aktu\u00e1lis munkamappa tartalm\u00e1t szolg\u00e1lja ki. Az npm parancs futtat\u00e1s\u00e1hoz telep\u00edtett NodeJS-re is sz\u00fcks\u00e9g van. Amelyik laboron ezeken fel\u00fcl tov\u00e1bbi eszk\u00f6z\u00f6kre lesz sz\u00fcks\u00e9g, ott a labor bevezet\u0151j\u00e9ben ezt jelezz\u00fck. El\u0151k\u00e9sz\u00fclet \u00b6 A feladatok megold\u00e1sa sor\u00e1n ne felejtsd el k\u00f6vetni a feladat bead\u00e1s folyamat\u00e1t TODO LINK. Git repository l\u00e9trehoz\u00e1sa \u00e9s let\u00f6lt\u00e9se \u00b6 Moodle-ben keresd meg a laborhoz tartoz\u00f3 megh\u00edv\u00f3 URL-j\u00e9t \u00e9s annak seg\u00edts\u00e9g\u00e9vel hozd l\u00e9tre a saj\u00e1t repository-dat. V\u00e1rd meg, m\u00edg elk\u00e9sz\u00fcl a repository, majd checkout-old ki. Egyetemi laborokban, ha a checkout sor\u00e1n nem k\u00e9r a rendszer felhaszn\u00e1l\u00f3nevet \u00e9s jelsz\u00f3t, \u00e9s nem siker\u00fcl a checkout, akkor val\u00f3sz\u00edn\u0171leg a g\u00e9pen kor\u00e1bban megjegyzett felhaszn\u00e1l\u00f3n\u00e9vvel pr\u00f3b\u00e1lkozott a rendszer. El\u0151sz\u00f6r t\u00f6r\u00f6ld ki a mentett bel\u00e9p\u00e9si adatokat (l\u00e1sd itt), \u00e9s pr\u00f3b\u00e1ld \u00fajra. Hozz l\u00e9tre egy \u00faj \u00e1gat megoldas n\u00e9ven, \u00e9s ezen az \u00e1gon dolgozz. A neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dodat. A f\u00e1jlban semmi m\u00e1s ne szerepeljen, csak egyetlen sorban a Neptun k\u00f3d 6 karaktere. Feladat 1 - HTTP hibakeres\u00e9s \u00b6 A Fiddler a Telerik c\u00e9g ingyenes term\u00e9ke, az egyik leggyakrabban haszn\u00e1lt webes hibakeres\u0151 (debugger) eszk\u00f6z. A Fiddler egy k\u00f6zbe\u00e9kel\u0151d\u00e9ses \u201et\u00e1mad\u00e1st\u201d (man in the middle attack) j\u00e1tszik el a gazda sz\u00e1m\u00edt\u00f3g\u00e9pen az\u00e1ltal, hogy proxy-k\u00e9nt viselkedik. A sz\u00e1m\u00edt\u00f3g\u00e9pr\u0151l kifel\u00e9 indul\u00f3 HTTP k\u00e9r\u00e9seinket elkapja, napl\u00f3zza azokat feldolgoz\u00e1s \u00e9s a fel\u00fcleten t\u00f6rt\u00e9n\u0151 megjelen\u00edt\u00e9s c\u00e9lj\u00e1b\u00f3l, majd elk\u00fcldi az eredeti c\u00edmzett fel\u00e9. Ugyanezt a sorozatot j\u00e1tssza el a visszair\u00e1nyban is, amikor a g\u00e9p\u00fcnk a h\u00e1l\u00f3zatr\u00f3l kap adatot. Ind\u00edtsuk el a Fiddler alkalmaz\u00e1st! Ne z\u00e1rjuk be a Fiddler alkalmaz\u00e1st! Ind\u00edtsuk el a Windows be\u00e9p\u00edtett proxy be\u00e1ll\u00edt\u00f3 fel\u00fclet\u00e9t! Ind\u00edtsuk el a Windows be\u00e9p\u00edtett proxy be\u00e1ll\u00edt\u00f3 fel\u00fclet\u00e9t! A Windows billenty\u0171t nyomjuk le, a Start men\u00fc megny\u00edl\u00e1sa ut\u00e1n g\u00e9pelj\u00fck be: \"proxy\", \u00e9s nyissuk meg a proxybe\u00e1ll\u00edt\u00e1sokat! BEADAND\u00d3 (0.5 pont) M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet arr\u00f3l f1a.png n\u00e9ven, hogyan m\u00f3dos\u00edtja a Fiddler a proxy be\u00e1ll\u00edt\u00e1sokat a Windows proxy be\u00e1ll\u00edt\u00e1sai k\u00f6z\u00f6tt \u00e9s a Telerik Fiddler Options > Connections f\u00fcl\u00f6n! Ha bez\u00e1rjuk a Fiddlert, l\u00e1thatjuk, hogy vissza\u00e1ll\u00edtja a proxybe\u00e1ll\u00edt\u00e1sokat a kiindul\u00f3 \u00e1llapotra. Ind\u00edtsuk el ism\u00e9t, hogy meg tudjuk vizsg\u00e1lni a h\u00e1l\u00f3zati forgalmat! Miel\u0151tt haszn\u00e1ljuk az eszk\u00f6zt, sz\u00fcks\u00e9ges lehet a HTTPS forgalom felold\u00e1sa, amihez egy egyedi tan\u00fas\u00edtv\u00e1nyt kell telep\u00edten\u00fcnk a g\u00e9p\u00fcnkre. Ezt a Tools -> Options -> HTTPS lehet\u0151s\u00e9gn\u00e9l kezdem\u00e9nyezhetj\u00fck. A Fiddler fut\u00e1sa k\u00f6zben ind\u00edtsunk el egy b\u00f6ng\u00e9sz\u0151t, \u00e9s navig\u00e1ljunk a https://www.aut.bme.hu c\u00edmre ( figyelem, pontosan \u00edrjuk/m\u00e1soljuk be! )! Tekints\u00fck \u00e1t a program fel\u00fclet\u00e9t az \u00edgy keletkez\u0151 HTTP k\u00e9r\u00e9sek alapj\u00e1n! A Fiddler alapvet\u0151 fel\u00e9p\u00edt\u00e9se az al\u00e1bbi: HTTP k\u00e9r\u00e9sek id\u0151rendi list\u00e1ja: itt l\u00e1tjuk, hogy milyen k\u00e9r\u00e9seink mentek ki a h\u00e1l\u00f3zatra. A protokoll HTTP vagy HTTPS lehet, a Result a v\u00e1lasz\u00fczenetben \u00e9rkez\u0151 HTTP st\u00e1tuszk\u00f3dot jelzi. A Body mez\u0151ben l\u00e1thatjuk, hogy a v\u00e1lasz h\u00e1ny b\u00e1jt m\u00e9ret\u0171 volt. A bal oldali list\u00e1ban b\u00e1rmely k\u00e9r\u00e9st kiv\u00e1lasztva annak r\u00e9szleteit jobb oldalon l\u00e1thatjuk . Jobb eg\u00e9rgombbal a lista elemein lehet\u0151s\u00e9g\u00fcnk van azok \u00fajraj\u00e1tsz\u00e1s\u00e1ra . Lehet\u0151s\u00e9g\u00fcnk van a list\u00e1ban akt\u00edv sz\u0171r\u0151 be\u00e1ll\u00edt\u00e1s\u00e1ra pl. alkalmaz\u00e1s (process ID) vagy host alapj\u00e1n. A jobb oldali f\u00fcl\u00f6n alap\u00e9rtelmez\u00e9s szerint az Inspectors f\u00fcl van kiv\u00e1lasztva, ami az aktu\u00e1lisan kiv\u00e1lasztott HTTP k\u00e9r\u00e9s-v\u00e1lasz p\u00e1rost r\u00e9szletezi. A fels\u0151 panel a kimen\u0151 k\u00e9r\u00e9s panelje. A tabok sor\u00e1n v\u00e1ltogatva az \u00fczenetet k\u00fcl\u00f6nb\u00f6z\u0151 form\u00e1z\u00e1sokkal is megvizsg\u00e1lhatjuk, a fontosabbak: Headers : itt l\u00e1thatjuk a HTTP fejl\u00e9c legfontosabb elemeit, \u00fagy mint a HTTP ig\u00e9t \u00e9s protokollt, csoportokba szervezve a HTTP \u00fczenet tartalm\u00e1t. TextView : sz\u00f6veges n\u00e9zet. WebForms : \u0171rlapok k\u00fcld\u00e9se eset\u00e9n a param\u00e9terek nev\u00e9t \u00e9s \u00e9rt\u00e9k\u00e9t tartalmazza. Cookies : a felk\u00fcld\u00f6tt/fogadott s\u00fctik megjelen\u00edt\u00e9se. Raw : a nyers HTTP \u00fczenet megjelen\u00edt\u00e9se. JSON/XML : az \u00fczenet megjelen\u00edt\u00e9se JSON/XML objektumokk\u00e9nt (csak megfelel\u0151 form\u00e1tum eset\u00e9n). A jobb oldali panelen az **Inspector**t v\u00e1lasztva az als\u00f3 r\u00e9szen a v\u00e1laszb\u00f3l kinyerhet\u0151 adatok tal\u00e1lhat\u00f3k meg, ezek jelent\u0151s r\u00e9sze anal\u00f3g a k\u00e9r\u00e9s form\u00e1tum\u00e1val \u00e9s a Request panelen tal\u00e1lhat\u00f3 adatokkal. Egy fontos eszk\u00f6z lehet m\u00e9g sz\u00e1munkra a Composer , amellyel teljes HTTP k\u00e9r\u00e9st tudunk \u00f6ssze\u00e1ll\u00edtani \u00e9s elk\u00fcldeni. K\u00e9r\u00e9sek vizsg\u00e1lata \u00b6 Elemezz\u00fck a b\u00f6ng\u00e9sz\u0151 \u00e1ltal gener\u00e1lt k\u00e9r\u00e9seket! A b\u00f6ng\u00e9sz\u0151be a weboldal c\u00edm\u00e9nek be\u00edr\u00e1sa ut\u00e1n egy HTTP k\u00e9r\u00e9s indult meg a www.aut.bme.hu szerver ir\u00e1ny\u00e1ba (esetleg HTTP \u00e1tir\u00e1ny\u00edt\u00e1st k\u00f6vet\u0151en, ami a www n\u00e9lk\u00fcli vari\u00e1ns vagy a nem HTTPS vari\u00e1ns eset\u00e9n a megfelel\u0151 oldalra ir\u00e1ny\u00edt \u00e1t). A Fiddlerben megvizsg\u00e1lva k\u00f6vetkeztet\u00e9seket vonhatunk le a k\u00e9r\u00e9s-v\u00e1lasz adatai alapj\u00e1n. Laborg\u00e9peken elk\u00e9pzelhet\u0151, hogy a tan\u00fas\u00edtv\u00e1ny nincsen telep\u00edtve \u00e9s nincsen jogunk a telep\u00edt\u00e9shez. Ebben az esetben haladjunk a laborral a le\u00edrtaknak megfelel\u0151en, de minden esetben a HTTPS URL-ek helyett HTTP-t haszn\u00e1ljunk! A v\u00e1lasz ezekben az esetekben egy \u00e1tir\u00e1ny\u00edt\u00e1s lesz a szok\u00e1sos 200 OK v\u00e1lasz helyett. Az els\u0151 k\u00e9r\u00e9s az \u00e1ltalunk be\u00edrt webc\u00edmre ker\u00fclt kik\u00fcld\u00e9sre az al\u00e1bbi form\u00e1ban: GET https://www.aut.bme.hu/ HTTP / 1.1 Accept : text/html, application/xhtml+xml, image/jxr, */* Accept-Language : en-US,en;q=0.7,hu;q=0.3 User-Agent : Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 Edge/15.15063 Accept-Encoding : gzip, deflate Host : www.aut.bme.hu Connection : Keep-Alive A k\u00e9r\u00e9s GET ig\u00e9t haszn\u00e1lt, ez\u00e9rt nem tartozik hozz\u00e1 t\u00f6rzs (body) a k\u00fcld\u00f6tt HTTP \u00fczenetben. A HTTP \u00fczenet egyszer\u0171 sz\u00f6veges form\u00e1tum\u00fa , ember \u00e1ltal is olvashat\u00f3. A b\u00f6ng\u00e9sz\u0151 kulcs-\u00e9rt\u00e9k p\u00e1rok form\u00e1j\u00e1ban tov\u00e1bbi adatokat k\u00fcld\u00f6tt a szerver fel\u00e9, mint pl. a b\u00f6ng\u00e9sz\u0151t azonos\u00edt\u00f3 karakterl\u00e1ncot ( User-Agent ), a v\u00e1rt adat form\u00e1tum\u00e1t ( Accept , Accept-Encoding ), elt\u00e1rolt s\u00fctiket ( Cookie ) stb. \u00c9rdekess\u00e9g, hogy bizonyos kulcsok t\u00f6bbsz\u00f6r el\u0151fordulhatnak egy HTTP \u00fczenetben, ekkor az \u00f6sszes ugyanolyan kulcshoz tartoz\u00f3 \u00e9rt\u00e9kek egy kollekci\u00f3k\u00e9nt/t\u00f6mbk\u00e9nt \u00e9rtelmezhet\u0151k. Az els\u0151 elk\u00fcld\u00f6tt \u00fczenet ut\u00e1n tov\u00e1bbi HTTP k\u00e9r\u00e9sek indultak el a st\u00edluslapok (CSS), k\u00e9pek \u00e9s szkriptek (JavaScript) let\u00f6lt\u00e9s\u00e9\u00e9rt. Ennek az az oka, hogy a b\u00f6ng\u00e9sz\u0151 fel\u00e9p\u00edti a HTML oldalt, amiben a tov\u00e1bbi linkek tov\u00e1bbi HTTP k\u00e9r\u00e9seket induk\u00e1lnak. A k\u00e9r\u00e9s\u00fcnkre az al\u00e1bbi v\u00e1lasz \u00e9rkezett: HTTP / 1.1 200 OK Cache-Control : no-cache Pragma : no-cache Content-Type : text/html; charset=utf-8 Expires : -1 Vary : Accept-Encoding Server : Microsoft-IIS/8.0 X-AspNet-Version : 4.0.30319 Set-Cookie : AaitC=3495d86d-2b52-4b73-b020-80eb90069465; path=/; HttpOnly X-Powered-By : ASP.NET X-Frame-Options : deny Date : Wed, 18 Oct 2017 10:40:05 GMT Content-Length : 26940 <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> < html > < head > ... </ head > < body > ... </ body > </ html > A k\u00e9r\u00e9s sikeres volt, ezt a fejl\u00e9c elej\u00e9n tal\u00e1lhat\u00f3 st\u00e1tuszk\u00f3db\u00f3l \u00e9s st\u00e1tusz \u00fczenet\u00e9b\u0151l l\u00e1tjuk. A v\u00e1lasz form\u00e1tuma megegyezik a k\u00e9r\u00e9s form\u00e1tum\u00e1val: \u00fczenet c\u00edme, fejl\u00e9cek kulcs-\u00e9rt\u00e9k p\u00e1rokk\u00e9nt, \u00fcres sor, \u00e9s egy opcion\u00e1lis t\u00f6rzs. A fejl\u00e9cekben tal\u00e1lhat\u00f3 fontosabb elemek a szerver t\u00edpusa (Server), szerverid\u0151 (Date), a k\u00fcld\u00f6tt adat t\u00edpusa (Content-Type) \u00e9s m\u00e9rete b\u00e1jtban (Content-Length). Ezen k\u00edv\u00fcl a szerver a Set-Cookie headerrel k\u00e9t s\u00fctit \u00e1ll\u00edt be a kliensen, ill. k\u00fcl\u00f6nb\u00f6z\u0151 fejl\u00e9cekben defini\u00e1lja a gyors\u00edt\u00f3t\u00e1raz\u00e1shoz (cache) sz\u00fcks\u00e9ges szab\u00e1lyokat. A fejl\u00e9ceket egy \u00fcres sor k\u00f6veti, majd a HTTP \u00fczenet t\u00f6rzse k\u00f6vetkezik, ami egy HTML5 dokumentum. BEADAND\u00d3 (1 pont) M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet f1b.png n\u00e9ven a k\u00e9r\u00e9sr\u0151l, amelyet a b\u00f6ng\u00e9sz\u0151 a www.aut.bme.hu c\u00edmre k\u00fcld\u00f6tt \u00e9s az ehhez tartoz\u00f3 v\u00e1laszr\u00f3l! A v\u00e1lasz \u00e9s a k\u00e9r\u00e9s is nyers (Raw) form\u00e1tumban legyen l\u00e1that\u00f3! Vegy\u00fck \u00e9szre, hogy a HTTP k\u00e9r\u00e9s\u00fcnkh\u00f6z tartoz\u00f3 v\u00e1lasz kiz\u00e1r\u00f3lag a kor\u00e1bban elk\u00fcld\u00f6tt k\u00e9r\u00e9s\u00fcnkben megtal\u00e1lhat\u00f3 inform\u00e1ci\u00f3k alapj\u00e1n k\u00e9sz\u00fclt el! Ez jelenti azt, hogy a HTTP \u00e1llapotmentes : az \u00e1ltalunk elk\u00fcld\u00f6tt k\u00e9r\u00e9s alapj\u00e1n kapjuk meg a v\u00e1laszt, tov\u00e1bbi \u00e1llapoinform\u00e1ci\u00f3kat nem felt\u00e9telezhet\u00fcnk a szerver r\u00e9sz\u00e9r\u0151l. Ez nem \u00f6sszekeverend\u0151 azzal, hogy a szerver vagy kliens t\u00e1rol-e \u00e1llapotot vagy sem : napjainkban mindk\u00e9t oldalon t\u00e1rolunk inform\u00e1ci\u00f3t az \u00e1llapotunkkal kapcsolatban, viszont a k\u00e9r\u00e9sben tal\u00e1lhat\u00f3 meg minden olyan inform\u00e1ci\u00f3, ami alapj\u00e1n a szerver azonos\u00edtani tudja a k\u00e9r\u0151t \u00e9s a k\u00e9r\u00e9si ig\u00e9nyt, ami alapj\u00e1n \u00f6ssze\u00e1ll\u00edtja a v\u00e1laszt. K\u00e9r\u00e9sek ind\u00edt\u00e1sa \u00b6 \u00c1ll\u00edtsunk \u00f6ssze egy egyszer\u0171 HTTP k\u00e9r\u00e9st a Fiddlerb\u0151l! Navig\u00e1ljunk a jobb oldali panelen a Composer f\u00fclre! Itt lehet\u0151s\u00e9g\u00fcnk van \u00f6ssze\u00e1ll\u00edtani egy HTTP \u00fczenetet. A Parsed lehet\u0151s\u00e9g kicsit szofisztik\u00e1ltabb, nek\u00fcnk most megfelel\u0151 lesz a Raw (nyers) \u00f6ssze\u00e1ll\u00edt\u00e1s is. K\u00fcldj\u00fck el az al\u00e1bbi HTTP \u00fczenetet \u00e9s vizsg\u00e1ljuk meg az erre \u00e9rkez\u0151 v\u00e1laszt: GET http://www.aut.bme.hu/ HTTP / 1.1 Fontos , hogy a fenti k\u00e9r\u00e9sben egy \u00fcres sor legyen a fejl\u00e9c ut\u00e1n, teh\u00e1t k\u00e9t Entert is kell \u00fctn\u00fcnk. BEADAND\u00d3 (0.5 pont) K\u00e9sz\u00edtsen k\u00e9perny\u0151k\u00e9pet a nyers HTTP v\u00e1laszr\u00f3l f1c.png n\u00e9ven! A fenti k\u00e9r\u00e9s\u00fcnk formailag helyes HTTP \u00fczenet: csak a HTTP ige, c\u00edm, \u00e9s protokoll megad\u00e1sa k\u00f6telez\u0151, az \u00f6sszes fejl\u00e9c opcion\u00e1lis, a t\u00f6rzs GET k\u00e9r\u00e9sn\u00e9l pedig nem szabv\u00e1nyos. Ha megvizsg\u00e1ljuk a k\u00e9r\u00e9s\u00fcnkre \u00e9rkez\u0151 v\u00e1laszokat, \u00e9s \u00f6sszehasonl\u00edtjuk a kor\u00e1bban a b\u00f6ng\u00e9sz\u0151nek k\u00fcld\u00f6tt v\u00e1lasszal (erre lehet\u0151s\u00e9g\u00fcnk van a k\u00e9t relev\u00e1ns \u00fczenetv\u00e1lt\u00e1st kijel\u00f6lve, majd a Compare lehet\u0151s\u00e9get haszn\u00e1lva), akkor l\u00e1thatjuk, hogy a k\u00e9r\u00e9s\u00fcnkre nem r\u00f6gt\u00f6n egy 200 OK v\u00e1lasz \u00e9rkezik, hanem el\u0151tte egy \u00e1tir\u00e1ny\u00edt\u00e1st kapunk a HTTPS v\u00e9gpontra. Feladat 2 - Hibakeres\u0151 eszk\u00f6z\u00f6k \u00b6 Weboldalak k\u00e9sz\u00edt\u00e9sekor sz\u00fcks\u00e9g lehet a HTTP forgalom megvizsg\u00e1l\u00e1s\u00e1ra, viszont az esetek jelent\u0151s r\u00e9sz\u00e9ben elegend\u0151 lehet, ha a b\u00f6ng\u00e9sz\u0151 forgalm\u00e1t meg tudjuk vizsg\u00e1lni. A mai b\u00f6ng\u00e9sz\u0151k mindegyike tartalmaz eszk\u00f6z\u00f6ket, amellyel a weboldalak hibakeres\u00e9se nagyon egyszer\u0171en kezelhet\u0151v\u00e9 v\u00e1lik. A b\u00f6ng\u00e9sz\u0151k Inspector n\u00e9zet\u00e9t a b\u00f6ng\u00e9sz\u0151ben \u00e1ltal\u00e1ban az F12 billenty\u0171vel nyithatjuk meg. Vizsg\u00e1ljuk meg, mit k\u00edn\u00e1lnak a b\u00f6ng\u00e9sz\u0151kbe \u00e9p\u00edtett hibakeres\u0151 eszk\u00f6z\u00f6k! A laborvezet\u0151 \u00e1ltal kijel\u00f6lt b\u00f6ng\u00e9sz\u0151n navig\u00e1ljunk a www.aut.bme.hu oldalra \u00e9s vizsg\u00e1ljuk meg az oldal fel\u00e9p\u00edt\u00e9s\u00e9t! Nyissuk meg a hibakeres\u00e9si eszk\u00f6zt\u00e1rat az F12-vel, n\u00e9zz\u00fck meg, milyen lehet\u0151s\u00e9geink vannak! A Chrome, Internet Explorer, Edge \u00e9s Firefox b\u00f6ng\u00e9sz\u0151k eszk\u00f6zk\u00e9szlete kisebb elt\u00e9r\u00e9sekt\u0151l eltekintve megegyezik, a leggyakoribb funkci\u00f3k az al\u00e1bbiak: A dokkol\u00e1s m\u00f3dja megadhat\u00f3: az ablak als\u00f3 r\u00e9sz\u00e9re vagy oldal\u00e1ra is (Chrome, Firefox) dokkolhat\u00f3 az eszk\u00f6zt\u00e1r, ill. kivehet\u0151 a saj\u00e1t ablak\u00e1ba. DOM vizsg\u00e1lata (DOM Explorer, Elements, Inspector) : a dokumentumfa fel\u00e9p\u00edt\u00e9s\u00e9t tudjuk megvizsg\u00e1lni, l\u00e1that\u00f3 a kirajzolt HTML tartalom. Lehet\u0151s\u00e9g\u00fcnk van szerkeszteni az elemeket, besz\u00farni attrib\u00fatumokat, elemeket, t\u00f6r\u00f6lni \u0151ket. Kiv\u00e1laszthat\u00f3 egy DOM elem eg\u00e9rrel a kirajzolt oldalon vagy a sz\u00f6veges megjelen\u00edt\u0151ben is. Egy elemet kiv\u00e1lasztva jobb oldalon az elemre illeszked\u0151 st\u00edluslap-szab\u00e1lyok (CSS) l\u00e1that\u00f3k, ezek is szerkeszthet\u0151k. JavaScript konzol (Console) : a JavaScript standard outputja a konzol, az alkalmaz\u00e1sok \u00e1ltal \u00edrt tartalmak itt l\u00e1that\u00f3k. Lehet\u0151s\u00e9g\u00fcnk van k\u00f3d futtat\u00e1s\u00e1ra is a konzol ablakban, ami azonnal ki\u00e9rt\u00e9kel\u0151dik. H\u00e1l\u00f3zat (Network) : a Fiddlerhez hasonl\u00f3an l\u00e1thatjuk a kimen\u0151 k\u00e9r\u00e9seket \u00e9s a r\u00e1juk \u00e9rkez\u0151 v\u00e1laszokat. El\u0151nye, hogy csak a konkr\u00e9t oldalhoz tartozik, nem a teljes b\u00f6ng\u00e9sz\u0151h\u00f6z, \u00edgy k\u00f6nnyebb lesz\u0171rn\u00fcnk, melyik k\u00e9r\u00e9sek tartoznak melyik alkalmaz\u00e1shoz/oldalhoz. L\u00e1that\u00f3k a pontos id\u0151z\u00edt\u00e9sek is, HTTP k\u00e9r\u00e9sek ind\u00edt\u00e1s\u00e1t viszont nem lehets\u00e9ges k\u00e9zzel megejten\u00fcnk a be\u00e9p\u00edtett lehet\u0151s\u00e9gekkel. Hibakeres\u0151 (Debugger) : az oldalhoz bet\u00f6lt\u00f6tt JavaScript forr\u00e1sk\u00f3d hibakeres\u00e9s\u00e9t teszi lehet\u0151v\u00e9. Teljes\u00edtm\u00e9nym\u00e9r\u0151k : k\u00fcl\u00f6nb\u00f6z\u0151 teljes\u00edtm\u00e9nym\u00e9r\u0151 eszk\u00f6z\u00f6k \u00e1llnak rendelkez\u00e9s\u00fcnkre a weboldalak elemz\u00e9s\u00e9hez, amik jellemz\u0151en a mem\u00f3ria- \u00e9s processzorhaszn\u00e1latot m\u00e9rik. Emul\u00e1ci\u00f3 : a b\u00f6ng\u00e9sz\u0151kbe \u00e9p\u00edtett emul\u00e1ci\u00f3s lehet\u0151s\u00e9gek korl\u00e1tozottak, \u00e1ltal\u00e1ban csak a user agent string cser\u00e9j\u00e9t \u00e9s a kirajzol\u00f3 ter\u00fclet felbont\u00e1s\u00e1t \u00e1ll\u00edtj\u00e1k \u00e1t (mag\u00e1t a b\u00f6ng\u00e9sz\u0151motort term\u00e9szetesen nem cser\u00e9lik le fut\u00e1si id\u0151ben, ami a val\u00f3di hib\u00e1k jelent\u0151s r\u00e9sz\u00e9\u00e9rt felel\u0151s). Az eszk\u00f6z\u00f6k legal\u00e1bb alapszint\u0171 ismerete (els\u0151sorban a DOM Explorer, Console \u00e9s Network haszn\u00e1lata) a laborokon elengedhetetlen. Feladat 3 - Szemantikus HTML \u00b6 A HTML (HyperText Markup Language) a web nyelve. A b\u00f6ng\u00e9sz\u0151k els\u0151sorban HTTP-n kereszt\u00fcl eljuttatott HTML tartalom kirajzol\u00e1s\u00e1\u00e9rt \u00e9s feldolgoz\u00e1s\u00e1\u00e9rt felel\u0151sek. A HTML egy XML-szer\u0171 nyelv, amelyben elemek (tag) \u00edrj\u00e1k le a dokumentumunkat. Az egyes elemeknek lehetnek tulajdons\u00e1gai, amiket attrib\u00fatumoknak (attribute) nevez\u00fcnk. Az attrib\u00fatum \u00e9rt\u00e9ke leggyakrabban sz\u00e1m, sz\u00f6veg, korl\u00e1tozott \u00e9rt\u00e9kk\u00e9szlet\u0171 sz\u00f6veg (enumer\u00e1ci\u00f3), ritk\u00e1bban felsorol\u00e1s vagy objektum lehet. A HTML-ben bizonyos szab\u00e1lyrendszernek kell eleget tenn\u00fcnk: megk\u00f6t\u00e9sek vonatkoznak arra, hogy milyen jelleg\u0171 elemeket milyen m\u00e1s elemekben helyezhet\u00fcnk el. A szemantikus web alapelve, hogy a HTML elemeink ne csak klasszikus \"t\u00e1rol\u00f3\" funkcionalit\u00e1st l\u00e1ssanak el, hanem jelent\u00e9st is hordozzanak. El\u0151nye kett\u0151s: g\u00e9pi \u00e9s emberi feldolgoz\u00e1sa egyar\u00e1nt egyszer\u0171bb. Fontos , hogy a HTML-ben v\u00e9tett esetleges hib\u00e1k csendes hib\u00e1k, az esetleges hib\u00e1s elhelyez\u00e9sek vagy helytelen form\u00e1z\u00e1s/szintaxis k\u00f6vetkezt\u00e9ben a b\u00f6ng\u00e9sz\u0151 meg fogja jelen\u00edteni az oldalt, amennyire a HTML alapj\u00e1n azt meg tudja tenni. Egy lemaradt </lez\u00e1r\u00f3 tag> pl. nem minden esetben rontja el a HTML oldal kin\u00e9zet\u00e9t, de okozhat nemk\u00edv\u00e1natos mell\u00e9khat\u00e1sokat. Forr\u00e1s: https://internetingishard.com/html-and-css/semantic-html/ N\u00e9zz\u00fck meg, mik\u00e9nt jav\u00edtja a HTML szemantikus fel\u00e9p\u00edt\u00e9se az alkalmaz\u00e1sunkat! Nyissuk meg a GitHub Classroom lekl\u00f3nozott beadand\u00f3j\u00e1nak repositoryj\u00e1t, aminek gy\u00f6k\u00e9r k\u00f6nyvt\u00e1r\u00e1t nyissuk meg a VS Code szerkeszt\u0151ben! A feladat3/index.html f\u00e1jlban dolgozzunk \u00e9s a megoldas \u00e1gra pusholjunk. A k\u00f3d k\u00f6nnyen \u00e9rtelmezhet\u0151, az egyes elemek nyit\u00f3 \u00e9s z\u00e1r\u00f3 tag-je k\u00f6z\u00f6tt tal\u00e1lhat\u00f3k a hozz\u00e1rendelt gyerekelemek. A whitespace-ek, beh\u00faz\u00e1sok csak az olvashat\u00f3s\u00e1got seg\u00edtik. Nyissuk meg VS Code-ban a Terminalt (Ctrl+\u00f6, vagy View > Terminal), ami egy be\u00e9p\u00edtett Powershell futtat\u00f3k\u00f6rnyezetet ad. Itt adjuk ki az al\u00e1bbi parancsot: http-server Navig\u00e1ljunk a b\u00f6ng\u00e9sz\u0151ben a http://localhost:8080/ URL-re, \u00e9s tesztelj\u00fck le, mit l\u00e1tunk! L\u00e1thatjuk, hogy a sz\u00f6vegek form\u00e1z\u00e1s\u00e1t nem a whitespace-ek, hanem az elemek t\u00edpusa adja. Ha szeretn\u00e9nk l\u00e1tni, melyik elem hol helyezkedik el a fel\u00fcleten ill. a DOM-ban, az F12 eszk\u00f6zt\u00e1ron, a DOM Explorer fels\u0151 sor\u00e1n lev\u0151 ikonokkal v\u00e1ltoztathatjuk, hogy a fel\u00fcleten navig\u00e1lva a DOM elem kijel\u00f6l\u0151dj\u00f6n-e, ill. a DOM-ban navig\u00e1lva a fel\u00fcleten jelezve legyen-e a kiv\u00e1lasztott elem. Az alap\u00e9rtelmezett form\u00e1z\u00e1st a b\u00f6ng\u00e9sz\u0151k be\u00e9p\u00edtetten adj\u00e1k, ez\u00e9rt nagyobbak az egyes c\u00edmsor ( <h1> , <h2> ) mez\u0151k, ill. ez\u00e9rt t\u00f6rik a <div> (ami blockszint\u0171 elem), \u00e9s marad foly\u00f3sz\u00f6veg a <span> (ami inline). A be\u00e9p\u00edtett st\u00edlusokat megvizsg\u00e1lhatjuk egy elemet kijel\u00f6lve a jobb oldali panel Computed f\u00fcl\u00e9n az \u00e1br\u00e1n jel\u00f6lt ikonra kattintva (ne legyen enged\u00e9lyezve a 'Display user styles only' lehet\u0151s\u00e9g). Forr\u00e1s: https://internetingishard.com/html-and-css/semantic-html/ M\u00f3dos\u00edtsa a HTML dokumentum tartalm\u00e1t \u00fagy, hogy szemantikus elemeket haszn\u00e1l a nemszemantikus (pl. div) elemek helyett! A sz\u00fcks\u00e9ges elemek: article , aside , figure , figcaption , footer , header , main , nav , section Szeml\u00e9ltesse az \u00edgy elk\u00e9sz\u00fclt dokumentum r\u00e9szletes szemantikus k\u00f6rvonal\u00e1t! https://hoyois.github.io/html5outliner/ BEADAND\u00d3 (1.5 pont) Az \u00edgy k\u00e9sz\u00fclt outline-r\u00f3l k\u00e9sz\u00edtett k\u00e9perny\u0151k\u00e9pet adja be f3.png n\u00e9ven a repository gy\u00f6ker\u00e9ben! Az index.html m\u00f3dos\u00edt\u00e1sait is commitolja! Feladat 4 - HTML \u0171rlapok \u00b6 A HTML \u0171rlapok egys\u00e9ges, megszokott adatbeviteli eszk\u00f6zk\u00e9nt szolg\u00e1lnak sz\u00e1munkra a felhaszn\u00e1l\u00f3val val\u00f3 kommunik\u00e1ci\u00f3ra. Az el\u0151ad\u00e1son elhangzottak gyakorl\u00e1sak\u00e9nt \u00e1ll\u00edtson \u00f6ssze egy \u0171rlapot a feladat5/form.html f\u00e1jlba, mely megfelel az al\u00e1bbi felt\u00e9teleknek: Az \u0171rlap az al\u00e1bbi adatokat k\u00e9ri be a fel\u00fcleten a felhaszn\u00e1l\u00f3t\u00f3l (a *-gal jel\u00f6lt mez\u0151k k\u00f6telez\u0151en kit\u00f6ltend\u0151k): N\u00e9v*: sz\u00f6veges mez\u0151 Jelsz\u00f3*: jelsz\u00f3 mez\u0151 (nem l\u00e1that\u00f3 karakterek \u2013 haszn\u00e1lja a \"mobweb\" jelsz\u00f3t szeml\u00e9ltet\u00e9sre) Le\u00edr\u00e1s: sz\u00f6veges mez\u0151, t\u00f6bbsoros Sz\u00fclet\u00e9si d\u00e1tum*: d\u00e1tum Nem: fi\u00fa/l\u00e1ny/egy\u00e9b, leg\u00f6rd\u00fcl\u0151 men\u00fcb\u0151l L\u00e1bm\u00e9ret: sz\u00e1m, 0.5-\u00f6s l\u00e9pt\u00e9kkel Kutya: igen/nem, jel\u00f6l\u0151n\u00e9gyzettel megadhat\u00f3 Minden mez\u0151h\u00f6z tartozzon egy c\u00edmke is, amely t\u0151le balra helyezkedjen el! A c\u00edmk\u00e9re kattintva a f\u00f3kusz ker\u00fclj\u00f6n a relev\u00e1ns mez\u0151be (haszn\u00e1lja az id \u00e9s for attrib\u00fatumokat)! Az egyes mez\u0151k egym\u00e1s alatt helyezkedjenek el! Legyen egy K\u00fcld\u00e9s felirat\u00fa gomb, amely az adatokat a saj\u00e1t szerver\u00fcnknek k\u00fcldi a /postform.html URL-re, ahol egy egyszer\u0171 oldal jelenjen meg GET k\u00e9r\u00e9s hat\u00e1s\u00e1ra (POST k\u00e9r\u00e9s eset\u00e9n nem sz\u00fcks\u00e9ges bet\u00f6lt\u0151dnie az oldalnak, de az URL legyen ugyanez)! Tipp: Sz\u00fcks\u00e9ges elemek: form , input , label , option , select , textarea . Sz\u00fcks\u00e9ges attrib\u00fatumok: action , for , id , method , name , required , step , type , value . BEADAND\u00d3 (1.5 pont) Commitolja a form.html m\u00f3dos\u00edtott tartalm\u00e1t! K\u00e9sz\u00edtsen k\u00e9perny\u0151k\u00e9pet f5a.png n\u00e9ven tetsz\u0151leges b\u00f6ng\u00e9sz\u0151ben a teljesen kit\u00f6lt\u00f6tt \u0171rlapr\u00f3l, amin pontosan egy valid\u00e1ci\u00f3s hiba tal\u00e1lhat\u00f3! Demonstr\u00e1lja Fiddlerrel \u00e9s a b\u00f6ng\u00e9sz\u0151 Network f\u00fcl\u00e9nek seg\u00edts\u00e9g\u00e9vel az \u0171rlapadatok elk\u00fcld\u00e9s\u00e9nek t\u00e9ny\u00e9t GET f5b.png \u00e9s POST f5c.png ig\u00e9k haszn\u00e1lat\u00e1val is!","title":"Labor 08 - HTTP, HTML"},{"location":"laborok/08-http/#labor-08-http-html","text":"","title":"Labor 08 - HTTP, HTML"},{"location":"laborok/08-http/#bevezetes","text":"A laborok sor\u00e1n a hallgat\u00f3k laborvezet\u0151i seg\u00edts\u00e9ggel, majd \u00f6n\u00e1ll\u00f3an v\u00e9geznek feladatokat a webes technol\u00f3gi\u00e1k gyakorlati megismer\u00e9se \u00e9rdek\u00e9ben. A f\u00e9l\u00e9v sor\u00e1n felhaszn\u00e1lt eszk\u00f6z\u00f6k: Telerik Fiddler , haszn\u00e1lhat\u00f3 az OS X / Linux verzi\u00f3n is futtathat\u00f3 Fiddler Everywhere verzi\u00f3 is, ekkor viszont a k\u00fcl\u00f6nbs\u00e9gekb\u0151l fakad\u00f3 esetleges kellemetlens\u00e9gek\u00e9rt nem v\u00e1llalunk felel\u0151ss\u00e9get, k\u00f6zvetlen link: FiddlerSetup.exe , webb\u00f6ng\u00e9sz\u0151k be\u00e9p\u00edtett hibakeres\u0151 eszk\u00f6zei, Visual Studio Code k\u00f3dszerkeszt\u0151 alkalmaz\u00e1s, otthoni vagy egy\u00e9ni munkav\u00e9gz\u00e9shez haszn\u00e1lhat\u00f3 b\u00e1rmilyen m\u00e1s k\u00f3dszerkeszt\u0151 vagy fejleszt\u0151k\u00f6rnyezet, npm, a NodeJS csomagkezel\u0151je, a http-server npm csomag, ami egy nagyon egyszer\u0171, fejleszt\u00e9si c\u00e9lra sz\u00e1nt HTTP kiszolg\u00e1l\u00f3 ha a g\u00e9pen nincsen telep\u00edtve a http-server, azt az npm install -g http-server paranccsal lehet telep\u00edteni a NodeJS telep\u00edt\u00e9s\u00e9t k\u00f6vet\u0151en, majd parancssorban a http-server parancs kiad\u00e1s\u00e1val egy \u00faj HTTP szerver indul, ami az aktu\u00e1lis munkamappa tartalm\u00e1t szolg\u00e1lja ki. Az npm parancs futtat\u00e1s\u00e1hoz telep\u00edtett NodeJS-re is sz\u00fcks\u00e9g van. Amelyik laboron ezeken fel\u00fcl tov\u00e1bbi eszk\u00f6z\u00f6kre lesz sz\u00fcks\u00e9g, ott a labor bevezet\u0151j\u00e9ben ezt jelezz\u00fck.","title":"Bevezet\u00e9s"},{"location":"laborok/08-http/#elokeszulet","text":"A feladatok megold\u00e1sa sor\u00e1n ne felejtsd el k\u00f6vetni a feladat bead\u00e1s folyamat\u00e1t TODO LINK.","title":"El\u0151k\u00e9sz\u00fclet"},{"location":"laborok/08-http/#git-repository-letrehozasa-es-letoltese","text":"Moodle-ben keresd meg a laborhoz tartoz\u00f3 megh\u00edv\u00f3 URL-j\u00e9t \u00e9s annak seg\u00edts\u00e9g\u00e9vel hozd l\u00e9tre a saj\u00e1t repository-dat. V\u00e1rd meg, m\u00edg elk\u00e9sz\u00fcl a repository, majd checkout-old ki. Egyetemi laborokban, ha a checkout sor\u00e1n nem k\u00e9r a rendszer felhaszn\u00e1l\u00f3nevet \u00e9s jelsz\u00f3t, \u00e9s nem siker\u00fcl a checkout, akkor val\u00f3sz\u00edn\u0171leg a g\u00e9pen kor\u00e1bban megjegyzett felhaszn\u00e1l\u00f3n\u00e9vvel pr\u00f3b\u00e1lkozott a rendszer. El\u0151sz\u00f6r t\u00f6r\u00f6ld ki a mentett bel\u00e9p\u00e9si adatokat (l\u00e1sd itt), \u00e9s pr\u00f3b\u00e1ld \u00fajra. Hozz l\u00e9tre egy \u00faj \u00e1gat megoldas n\u00e9ven, \u00e9s ezen az \u00e1gon dolgozz. A neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dodat. A f\u00e1jlban semmi m\u00e1s ne szerepeljen, csak egyetlen sorban a Neptun k\u00f3d 6 karaktere.","title":"Git repository l\u00e9trehoz\u00e1sa \u00e9s let\u00f6lt\u00e9se"},{"location":"laborok/08-http/#feladat-1-http-hibakereses","text":"A Fiddler a Telerik c\u00e9g ingyenes term\u00e9ke, az egyik leggyakrabban haszn\u00e1lt webes hibakeres\u0151 (debugger) eszk\u00f6z. A Fiddler egy k\u00f6zbe\u00e9kel\u0151d\u00e9ses \u201et\u00e1mad\u00e1st\u201d (man in the middle attack) j\u00e1tszik el a gazda sz\u00e1m\u00edt\u00f3g\u00e9pen az\u00e1ltal, hogy proxy-k\u00e9nt viselkedik. A sz\u00e1m\u00edt\u00f3g\u00e9pr\u0151l kifel\u00e9 indul\u00f3 HTTP k\u00e9r\u00e9seinket elkapja, napl\u00f3zza azokat feldolgoz\u00e1s \u00e9s a fel\u00fcleten t\u00f6rt\u00e9n\u0151 megjelen\u00edt\u00e9s c\u00e9lj\u00e1b\u00f3l, majd elk\u00fcldi az eredeti c\u00edmzett fel\u00e9. Ugyanezt a sorozatot j\u00e1tssza el a visszair\u00e1nyban is, amikor a g\u00e9p\u00fcnk a h\u00e1l\u00f3zatr\u00f3l kap adatot. Ind\u00edtsuk el a Fiddler alkalmaz\u00e1st! Ne z\u00e1rjuk be a Fiddler alkalmaz\u00e1st! Ind\u00edtsuk el a Windows be\u00e9p\u00edtett proxy be\u00e1ll\u00edt\u00f3 fel\u00fclet\u00e9t! Ind\u00edtsuk el a Windows be\u00e9p\u00edtett proxy be\u00e1ll\u00edt\u00f3 fel\u00fclet\u00e9t! A Windows billenty\u0171t nyomjuk le, a Start men\u00fc megny\u00edl\u00e1sa ut\u00e1n g\u00e9pelj\u00fck be: \"proxy\", \u00e9s nyissuk meg a proxybe\u00e1ll\u00edt\u00e1sokat! BEADAND\u00d3 (0.5 pont) M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet arr\u00f3l f1a.png n\u00e9ven, hogyan m\u00f3dos\u00edtja a Fiddler a proxy be\u00e1ll\u00edt\u00e1sokat a Windows proxy be\u00e1ll\u00edt\u00e1sai k\u00f6z\u00f6tt \u00e9s a Telerik Fiddler Options > Connections f\u00fcl\u00f6n! Ha bez\u00e1rjuk a Fiddlert, l\u00e1thatjuk, hogy vissza\u00e1ll\u00edtja a proxybe\u00e1ll\u00edt\u00e1sokat a kiindul\u00f3 \u00e1llapotra. Ind\u00edtsuk el ism\u00e9t, hogy meg tudjuk vizsg\u00e1lni a h\u00e1l\u00f3zati forgalmat! Miel\u0151tt haszn\u00e1ljuk az eszk\u00f6zt, sz\u00fcks\u00e9ges lehet a HTTPS forgalom felold\u00e1sa, amihez egy egyedi tan\u00fas\u00edtv\u00e1nyt kell telep\u00edten\u00fcnk a g\u00e9p\u00fcnkre. Ezt a Tools -> Options -> HTTPS lehet\u0151s\u00e9gn\u00e9l kezdem\u00e9nyezhetj\u00fck. A Fiddler fut\u00e1sa k\u00f6zben ind\u00edtsunk el egy b\u00f6ng\u00e9sz\u0151t, \u00e9s navig\u00e1ljunk a https://www.aut.bme.hu c\u00edmre ( figyelem, pontosan \u00edrjuk/m\u00e1soljuk be! )! Tekints\u00fck \u00e1t a program fel\u00fclet\u00e9t az \u00edgy keletkez\u0151 HTTP k\u00e9r\u00e9sek alapj\u00e1n! A Fiddler alapvet\u0151 fel\u00e9p\u00edt\u00e9se az al\u00e1bbi: HTTP k\u00e9r\u00e9sek id\u0151rendi list\u00e1ja: itt l\u00e1tjuk, hogy milyen k\u00e9r\u00e9seink mentek ki a h\u00e1l\u00f3zatra. A protokoll HTTP vagy HTTPS lehet, a Result a v\u00e1lasz\u00fczenetben \u00e9rkez\u0151 HTTP st\u00e1tuszk\u00f3dot jelzi. A Body mez\u0151ben l\u00e1thatjuk, hogy a v\u00e1lasz h\u00e1ny b\u00e1jt m\u00e9ret\u0171 volt. A bal oldali list\u00e1ban b\u00e1rmely k\u00e9r\u00e9st kiv\u00e1lasztva annak r\u00e9szleteit jobb oldalon l\u00e1thatjuk . Jobb eg\u00e9rgombbal a lista elemein lehet\u0151s\u00e9g\u00fcnk van azok \u00fajraj\u00e1tsz\u00e1s\u00e1ra . Lehet\u0151s\u00e9g\u00fcnk van a list\u00e1ban akt\u00edv sz\u0171r\u0151 be\u00e1ll\u00edt\u00e1s\u00e1ra pl. alkalmaz\u00e1s (process ID) vagy host alapj\u00e1n. A jobb oldali f\u00fcl\u00f6n alap\u00e9rtelmez\u00e9s szerint az Inspectors f\u00fcl van kiv\u00e1lasztva, ami az aktu\u00e1lisan kiv\u00e1lasztott HTTP k\u00e9r\u00e9s-v\u00e1lasz p\u00e1rost r\u00e9szletezi. A fels\u0151 panel a kimen\u0151 k\u00e9r\u00e9s panelje. A tabok sor\u00e1n v\u00e1ltogatva az \u00fczenetet k\u00fcl\u00f6nb\u00f6z\u0151 form\u00e1z\u00e1sokkal is megvizsg\u00e1lhatjuk, a fontosabbak: Headers : itt l\u00e1thatjuk a HTTP fejl\u00e9c legfontosabb elemeit, \u00fagy mint a HTTP ig\u00e9t \u00e9s protokollt, csoportokba szervezve a HTTP \u00fczenet tartalm\u00e1t. TextView : sz\u00f6veges n\u00e9zet. WebForms : \u0171rlapok k\u00fcld\u00e9se eset\u00e9n a param\u00e9terek nev\u00e9t \u00e9s \u00e9rt\u00e9k\u00e9t tartalmazza. Cookies : a felk\u00fcld\u00f6tt/fogadott s\u00fctik megjelen\u00edt\u00e9se. Raw : a nyers HTTP \u00fczenet megjelen\u00edt\u00e9se. JSON/XML : az \u00fczenet megjelen\u00edt\u00e9se JSON/XML objektumokk\u00e9nt (csak megfelel\u0151 form\u00e1tum eset\u00e9n). A jobb oldali panelen az **Inspector**t v\u00e1lasztva az als\u00f3 r\u00e9szen a v\u00e1laszb\u00f3l kinyerhet\u0151 adatok tal\u00e1lhat\u00f3k meg, ezek jelent\u0151s r\u00e9sze anal\u00f3g a k\u00e9r\u00e9s form\u00e1tum\u00e1val \u00e9s a Request panelen tal\u00e1lhat\u00f3 adatokkal. Egy fontos eszk\u00f6z lehet m\u00e9g sz\u00e1munkra a Composer , amellyel teljes HTTP k\u00e9r\u00e9st tudunk \u00f6ssze\u00e1ll\u00edtani \u00e9s elk\u00fcldeni.","title":"Feladat 1 - HTTP hibakeres\u00e9s"},{"location":"laborok/08-http/#keresek-vizsgalata","text":"Elemezz\u00fck a b\u00f6ng\u00e9sz\u0151 \u00e1ltal gener\u00e1lt k\u00e9r\u00e9seket! A b\u00f6ng\u00e9sz\u0151be a weboldal c\u00edm\u00e9nek be\u00edr\u00e1sa ut\u00e1n egy HTTP k\u00e9r\u00e9s indult meg a www.aut.bme.hu szerver ir\u00e1ny\u00e1ba (esetleg HTTP \u00e1tir\u00e1ny\u00edt\u00e1st k\u00f6vet\u0151en, ami a www n\u00e9lk\u00fcli vari\u00e1ns vagy a nem HTTPS vari\u00e1ns eset\u00e9n a megfelel\u0151 oldalra ir\u00e1ny\u00edt \u00e1t). A Fiddlerben megvizsg\u00e1lva k\u00f6vetkeztet\u00e9seket vonhatunk le a k\u00e9r\u00e9s-v\u00e1lasz adatai alapj\u00e1n. Laborg\u00e9peken elk\u00e9pzelhet\u0151, hogy a tan\u00fas\u00edtv\u00e1ny nincsen telep\u00edtve \u00e9s nincsen jogunk a telep\u00edt\u00e9shez. Ebben az esetben haladjunk a laborral a le\u00edrtaknak megfelel\u0151en, de minden esetben a HTTPS URL-ek helyett HTTP-t haszn\u00e1ljunk! A v\u00e1lasz ezekben az esetekben egy \u00e1tir\u00e1ny\u00edt\u00e1s lesz a szok\u00e1sos 200 OK v\u00e1lasz helyett. Az els\u0151 k\u00e9r\u00e9s az \u00e1ltalunk be\u00edrt webc\u00edmre ker\u00fclt kik\u00fcld\u00e9sre az al\u00e1bbi form\u00e1ban: GET https://www.aut.bme.hu/ HTTP / 1.1 Accept : text/html, application/xhtml+xml, image/jxr, */* Accept-Language : en-US,en;q=0.7,hu;q=0.3 User-Agent : Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 Edge/15.15063 Accept-Encoding : gzip, deflate Host : www.aut.bme.hu Connection : Keep-Alive A k\u00e9r\u00e9s GET ig\u00e9t haszn\u00e1lt, ez\u00e9rt nem tartozik hozz\u00e1 t\u00f6rzs (body) a k\u00fcld\u00f6tt HTTP \u00fczenetben. A HTTP \u00fczenet egyszer\u0171 sz\u00f6veges form\u00e1tum\u00fa , ember \u00e1ltal is olvashat\u00f3. A b\u00f6ng\u00e9sz\u0151 kulcs-\u00e9rt\u00e9k p\u00e1rok form\u00e1j\u00e1ban tov\u00e1bbi adatokat k\u00fcld\u00f6tt a szerver fel\u00e9, mint pl. a b\u00f6ng\u00e9sz\u0151t azonos\u00edt\u00f3 karakterl\u00e1ncot ( User-Agent ), a v\u00e1rt adat form\u00e1tum\u00e1t ( Accept , Accept-Encoding ), elt\u00e1rolt s\u00fctiket ( Cookie ) stb. \u00c9rdekess\u00e9g, hogy bizonyos kulcsok t\u00f6bbsz\u00f6r el\u0151fordulhatnak egy HTTP \u00fczenetben, ekkor az \u00f6sszes ugyanolyan kulcshoz tartoz\u00f3 \u00e9rt\u00e9kek egy kollekci\u00f3k\u00e9nt/t\u00f6mbk\u00e9nt \u00e9rtelmezhet\u0151k. Az els\u0151 elk\u00fcld\u00f6tt \u00fczenet ut\u00e1n tov\u00e1bbi HTTP k\u00e9r\u00e9sek indultak el a st\u00edluslapok (CSS), k\u00e9pek \u00e9s szkriptek (JavaScript) let\u00f6lt\u00e9s\u00e9\u00e9rt. Ennek az az oka, hogy a b\u00f6ng\u00e9sz\u0151 fel\u00e9p\u00edti a HTML oldalt, amiben a tov\u00e1bbi linkek tov\u00e1bbi HTTP k\u00e9r\u00e9seket induk\u00e1lnak. A k\u00e9r\u00e9s\u00fcnkre az al\u00e1bbi v\u00e1lasz \u00e9rkezett: HTTP / 1.1 200 OK Cache-Control : no-cache Pragma : no-cache Content-Type : text/html; charset=utf-8 Expires : -1 Vary : Accept-Encoding Server : Microsoft-IIS/8.0 X-AspNet-Version : 4.0.30319 Set-Cookie : AaitC=3495d86d-2b52-4b73-b020-80eb90069465; path=/; HttpOnly X-Powered-By : ASP.NET X-Frame-Options : deny Date : Wed, 18 Oct 2017 10:40:05 GMT Content-Length : 26940 <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> < html > < head > ... </ head > < body > ... </ body > </ html > A k\u00e9r\u00e9s sikeres volt, ezt a fejl\u00e9c elej\u00e9n tal\u00e1lhat\u00f3 st\u00e1tuszk\u00f3db\u00f3l \u00e9s st\u00e1tusz \u00fczenet\u00e9b\u0151l l\u00e1tjuk. A v\u00e1lasz form\u00e1tuma megegyezik a k\u00e9r\u00e9s form\u00e1tum\u00e1val: \u00fczenet c\u00edme, fejl\u00e9cek kulcs-\u00e9rt\u00e9k p\u00e1rokk\u00e9nt, \u00fcres sor, \u00e9s egy opcion\u00e1lis t\u00f6rzs. A fejl\u00e9cekben tal\u00e1lhat\u00f3 fontosabb elemek a szerver t\u00edpusa (Server), szerverid\u0151 (Date), a k\u00fcld\u00f6tt adat t\u00edpusa (Content-Type) \u00e9s m\u00e9rete b\u00e1jtban (Content-Length). Ezen k\u00edv\u00fcl a szerver a Set-Cookie headerrel k\u00e9t s\u00fctit \u00e1ll\u00edt be a kliensen, ill. k\u00fcl\u00f6nb\u00f6z\u0151 fejl\u00e9cekben defini\u00e1lja a gyors\u00edt\u00f3t\u00e1raz\u00e1shoz (cache) sz\u00fcks\u00e9ges szab\u00e1lyokat. A fejl\u00e9ceket egy \u00fcres sor k\u00f6veti, majd a HTTP \u00fczenet t\u00f6rzse k\u00f6vetkezik, ami egy HTML5 dokumentum. BEADAND\u00d3 (1 pont) M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet f1b.png n\u00e9ven a k\u00e9r\u00e9sr\u0151l, amelyet a b\u00f6ng\u00e9sz\u0151 a www.aut.bme.hu c\u00edmre k\u00fcld\u00f6tt \u00e9s az ehhez tartoz\u00f3 v\u00e1laszr\u00f3l! A v\u00e1lasz \u00e9s a k\u00e9r\u00e9s is nyers (Raw) form\u00e1tumban legyen l\u00e1that\u00f3! Vegy\u00fck \u00e9szre, hogy a HTTP k\u00e9r\u00e9s\u00fcnkh\u00f6z tartoz\u00f3 v\u00e1lasz kiz\u00e1r\u00f3lag a kor\u00e1bban elk\u00fcld\u00f6tt k\u00e9r\u00e9s\u00fcnkben megtal\u00e1lhat\u00f3 inform\u00e1ci\u00f3k alapj\u00e1n k\u00e9sz\u00fclt el! Ez jelenti azt, hogy a HTTP \u00e1llapotmentes : az \u00e1ltalunk elk\u00fcld\u00f6tt k\u00e9r\u00e9s alapj\u00e1n kapjuk meg a v\u00e1laszt, tov\u00e1bbi \u00e1llapoinform\u00e1ci\u00f3kat nem felt\u00e9telezhet\u00fcnk a szerver r\u00e9sz\u00e9r\u0151l. Ez nem \u00f6sszekeverend\u0151 azzal, hogy a szerver vagy kliens t\u00e1rol-e \u00e1llapotot vagy sem : napjainkban mindk\u00e9t oldalon t\u00e1rolunk inform\u00e1ci\u00f3t az \u00e1llapotunkkal kapcsolatban, viszont a k\u00e9r\u00e9sben tal\u00e1lhat\u00f3 meg minden olyan inform\u00e1ci\u00f3, ami alapj\u00e1n a szerver azonos\u00edtani tudja a k\u00e9r\u0151t \u00e9s a k\u00e9r\u00e9si ig\u00e9nyt, ami alapj\u00e1n \u00f6ssze\u00e1ll\u00edtja a v\u00e1laszt.","title":"K\u00e9r\u00e9sek vizsg\u00e1lata"},{"location":"laborok/08-http/#keresek-inditasa","text":"\u00c1ll\u00edtsunk \u00f6ssze egy egyszer\u0171 HTTP k\u00e9r\u00e9st a Fiddlerb\u0151l! Navig\u00e1ljunk a jobb oldali panelen a Composer f\u00fclre! Itt lehet\u0151s\u00e9g\u00fcnk van \u00f6ssze\u00e1ll\u00edtani egy HTTP \u00fczenetet. A Parsed lehet\u0151s\u00e9g kicsit szofisztik\u00e1ltabb, nek\u00fcnk most megfelel\u0151 lesz a Raw (nyers) \u00f6ssze\u00e1ll\u00edt\u00e1s is. K\u00fcldj\u00fck el az al\u00e1bbi HTTP \u00fczenetet \u00e9s vizsg\u00e1ljuk meg az erre \u00e9rkez\u0151 v\u00e1laszt: GET http://www.aut.bme.hu/ HTTP / 1.1 Fontos , hogy a fenti k\u00e9r\u00e9sben egy \u00fcres sor legyen a fejl\u00e9c ut\u00e1n, teh\u00e1t k\u00e9t Entert is kell \u00fctn\u00fcnk. BEADAND\u00d3 (0.5 pont) K\u00e9sz\u00edtsen k\u00e9perny\u0151k\u00e9pet a nyers HTTP v\u00e1laszr\u00f3l f1c.png n\u00e9ven! A fenti k\u00e9r\u00e9s\u00fcnk formailag helyes HTTP \u00fczenet: csak a HTTP ige, c\u00edm, \u00e9s protokoll megad\u00e1sa k\u00f6telez\u0151, az \u00f6sszes fejl\u00e9c opcion\u00e1lis, a t\u00f6rzs GET k\u00e9r\u00e9sn\u00e9l pedig nem szabv\u00e1nyos. Ha megvizsg\u00e1ljuk a k\u00e9r\u00e9s\u00fcnkre \u00e9rkez\u0151 v\u00e1laszokat, \u00e9s \u00f6sszehasonl\u00edtjuk a kor\u00e1bban a b\u00f6ng\u00e9sz\u0151nek k\u00fcld\u00f6tt v\u00e1lasszal (erre lehet\u0151s\u00e9g\u00fcnk van a k\u00e9t relev\u00e1ns \u00fczenetv\u00e1lt\u00e1st kijel\u00f6lve, majd a Compare lehet\u0151s\u00e9get haszn\u00e1lva), akkor l\u00e1thatjuk, hogy a k\u00e9r\u00e9s\u00fcnkre nem r\u00f6gt\u00f6n egy 200 OK v\u00e1lasz \u00e9rkezik, hanem el\u0151tte egy \u00e1tir\u00e1ny\u00edt\u00e1st kapunk a HTTPS v\u00e9gpontra.","title":"K\u00e9r\u00e9sek ind\u00edt\u00e1sa"},{"location":"laborok/08-http/#feladat-2-hibakereso-eszkozok","text":"Weboldalak k\u00e9sz\u00edt\u00e9sekor sz\u00fcks\u00e9g lehet a HTTP forgalom megvizsg\u00e1l\u00e1s\u00e1ra, viszont az esetek jelent\u0151s r\u00e9sz\u00e9ben elegend\u0151 lehet, ha a b\u00f6ng\u00e9sz\u0151 forgalm\u00e1t meg tudjuk vizsg\u00e1lni. A mai b\u00f6ng\u00e9sz\u0151k mindegyike tartalmaz eszk\u00f6z\u00f6ket, amellyel a weboldalak hibakeres\u00e9se nagyon egyszer\u0171en kezelhet\u0151v\u00e9 v\u00e1lik. A b\u00f6ng\u00e9sz\u0151k Inspector n\u00e9zet\u00e9t a b\u00f6ng\u00e9sz\u0151ben \u00e1ltal\u00e1ban az F12 billenty\u0171vel nyithatjuk meg. Vizsg\u00e1ljuk meg, mit k\u00edn\u00e1lnak a b\u00f6ng\u00e9sz\u0151kbe \u00e9p\u00edtett hibakeres\u0151 eszk\u00f6z\u00f6k! A laborvezet\u0151 \u00e1ltal kijel\u00f6lt b\u00f6ng\u00e9sz\u0151n navig\u00e1ljunk a www.aut.bme.hu oldalra \u00e9s vizsg\u00e1ljuk meg az oldal fel\u00e9p\u00edt\u00e9s\u00e9t! Nyissuk meg a hibakeres\u00e9si eszk\u00f6zt\u00e1rat az F12-vel, n\u00e9zz\u00fck meg, milyen lehet\u0151s\u00e9geink vannak! A Chrome, Internet Explorer, Edge \u00e9s Firefox b\u00f6ng\u00e9sz\u0151k eszk\u00f6zk\u00e9szlete kisebb elt\u00e9r\u00e9sekt\u0151l eltekintve megegyezik, a leggyakoribb funkci\u00f3k az al\u00e1bbiak: A dokkol\u00e1s m\u00f3dja megadhat\u00f3: az ablak als\u00f3 r\u00e9sz\u00e9re vagy oldal\u00e1ra is (Chrome, Firefox) dokkolhat\u00f3 az eszk\u00f6zt\u00e1r, ill. kivehet\u0151 a saj\u00e1t ablak\u00e1ba. DOM vizsg\u00e1lata (DOM Explorer, Elements, Inspector) : a dokumentumfa fel\u00e9p\u00edt\u00e9s\u00e9t tudjuk megvizsg\u00e1lni, l\u00e1that\u00f3 a kirajzolt HTML tartalom. Lehet\u0151s\u00e9g\u00fcnk van szerkeszteni az elemeket, besz\u00farni attrib\u00fatumokat, elemeket, t\u00f6r\u00f6lni \u0151ket. Kiv\u00e1laszthat\u00f3 egy DOM elem eg\u00e9rrel a kirajzolt oldalon vagy a sz\u00f6veges megjelen\u00edt\u0151ben is. Egy elemet kiv\u00e1lasztva jobb oldalon az elemre illeszked\u0151 st\u00edluslap-szab\u00e1lyok (CSS) l\u00e1that\u00f3k, ezek is szerkeszthet\u0151k. JavaScript konzol (Console) : a JavaScript standard outputja a konzol, az alkalmaz\u00e1sok \u00e1ltal \u00edrt tartalmak itt l\u00e1that\u00f3k. Lehet\u0151s\u00e9g\u00fcnk van k\u00f3d futtat\u00e1s\u00e1ra is a konzol ablakban, ami azonnal ki\u00e9rt\u00e9kel\u0151dik. H\u00e1l\u00f3zat (Network) : a Fiddlerhez hasonl\u00f3an l\u00e1thatjuk a kimen\u0151 k\u00e9r\u00e9seket \u00e9s a r\u00e1juk \u00e9rkez\u0151 v\u00e1laszokat. El\u0151nye, hogy csak a konkr\u00e9t oldalhoz tartozik, nem a teljes b\u00f6ng\u00e9sz\u0151h\u00f6z, \u00edgy k\u00f6nnyebb lesz\u0171rn\u00fcnk, melyik k\u00e9r\u00e9sek tartoznak melyik alkalmaz\u00e1shoz/oldalhoz. L\u00e1that\u00f3k a pontos id\u0151z\u00edt\u00e9sek is, HTTP k\u00e9r\u00e9sek ind\u00edt\u00e1s\u00e1t viszont nem lehets\u00e9ges k\u00e9zzel megejten\u00fcnk a be\u00e9p\u00edtett lehet\u0151s\u00e9gekkel. Hibakeres\u0151 (Debugger) : az oldalhoz bet\u00f6lt\u00f6tt JavaScript forr\u00e1sk\u00f3d hibakeres\u00e9s\u00e9t teszi lehet\u0151v\u00e9. Teljes\u00edtm\u00e9nym\u00e9r\u0151k : k\u00fcl\u00f6nb\u00f6z\u0151 teljes\u00edtm\u00e9nym\u00e9r\u0151 eszk\u00f6z\u00f6k \u00e1llnak rendelkez\u00e9s\u00fcnkre a weboldalak elemz\u00e9s\u00e9hez, amik jellemz\u0151en a mem\u00f3ria- \u00e9s processzorhaszn\u00e1latot m\u00e9rik. Emul\u00e1ci\u00f3 : a b\u00f6ng\u00e9sz\u0151kbe \u00e9p\u00edtett emul\u00e1ci\u00f3s lehet\u0151s\u00e9gek korl\u00e1tozottak, \u00e1ltal\u00e1ban csak a user agent string cser\u00e9j\u00e9t \u00e9s a kirajzol\u00f3 ter\u00fclet felbont\u00e1s\u00e1t \u00e1ll\u00edtj\u00e1k \u00e1t (mag\u00e1t a b\u00f6ng\u00e9sz\u0151motort term\u00e9szetesen nem cser\u00e9lik le fut\u00e1si id\u0151ben, ami a val\u00f3di hib\u00e1k jelent\u0151s r\u00e9sz\u00e9\u00e9rt felel\u0151s). Az eszk\u00f6z\u00f6k legal\u00e1bb alapszint\u0171 ismerete (els\u0151sorban a DOM Explorer, Console \u00e9s Network haszn\u00e1lata) a laborokon elengedhetetlen.","title":"Feladat 2 - Hibakeres\u0151 eszk\u00f6z\u00f6k"},{"location":"laborok/08-http/#feladat-3-szemantikus-html","text":"A HTML (HyperText Markup Language) a web nyelve. A b\u00f6ng\u00e9sz\u0151k els\u0151sorban HTTP-n kereszt\u00fcl eljuttatott HTML tartalom kirajzol\u00e1s\u00e1\u00e9rt \u00e9s feldolgoz\u00e1s\u00e1\u00e9rt felel\u0151sek. A HTML egy XML-szer\u0171 nyelv, amelyben elemek (tag) \u00edrj\u00e1k le a dokumentumunkat. Az egyes elemeknek lehetnek tulajdons\u00e1gai, amiket attrib\u00fatumoknak (attribute) nevez\u00fcnk. Az attrib\u00fatum \u00e9rt\u00e9ke leggyakrabban sz\u00e1m, sz\u00f6veg, korl\u00e1tozott \u00e9rt\u00e9kk\u00e9szlet\u0171 sz\u00f6veg (enumer\u00e1ci\u00f3), ritk\u00e1bban felsorol\u00e1s vagy objektum lehet. A HTML-ben bizonyos szab\u00e1lyrendszernek kell eleget tenn\u00fcnk: megk\u00f6t\u00e9sek vonatkoznak arra, hogy milyen jelleg\u0171 elemeket milyen m\u00e1s elemekben helyezhet\u00fcnk el. A szemantikus web alapelve, hogy a HTML elemeink ne csak klasszikus \"t\u00e1rol\u00f3\" funkcionalit\u00e1st l\u00e1ssanak el, hanem jelent\u00e9st is hordozzanak. El\u0151nye kett\u0151s: g\u00e9pi \u00e9s emberi feldolgoz\u00e1sa egyar\u00e1nt egyszer\u0171bb. Fontos , hogy a HTML-ben v\u00e9tett esetleges hib\u00e1k csendes hib\u00e1k, az esetleges hib\u00e1s elhelyez\u00e9sek vagy helytelen form\u00e1z\u00e1s/szintaxis k\u00f6vetkezt\u00e9ben a b\u00f6ng\u00e9sz\u0151 meg fogja jelen\u00edteni az oldalt, amennyire a HTML alapj\u00e1n azt meg tudja tenni. Egy lemaradt </lez\u00e1r\u00f3 tag> pl. nem minden esetben rontja el a HTML oldal kin\u00e9zet\u00e9t, de okozhat nemk\u00edv\u00e1natos mell\u00e9khat\u00e1sokat. Forr\u00e1s: https://internetingishard.com/html-and-css/semantic-html/ N\u00e9zz\u00fck meg, mik\u00e9nt jav\u00edtja a HTML szemantikus fel\u00e9p\u00edt\u00e9se az alkalmaz\u00e1sunkat! Nyissuk meg a GitHub Classroom lekl\u00f3nozott beadand\u00f3j\u00e1nak repositoryj\u00e1t, aminek gy\u00f6k\u00e9r k\u00f6nyvt\u00e1r\u00e1t nyissuk meg a VS Code szerkeszt\u0151ben! A feladat3/index.html f\u00e1jlban dolgozzunk \u00e9s a megoldas \u00e1gra pusholjunk. A k\u00f3d k\u00f6nnyen \u00e9rtelmezhet\u0151, az egyes elemek nyit\u00f3 \u00e9s z\u00e1r\u00f3 tag-je k\u00f6z\u00f6tt tal\u00e1lhat\u00f3k a hozz\u00e1rendelt gyerekelemek. A whitespace-ek, beh\u00faz\u00e1sok csak az olvashat\u00f3s\u00e1got seg\u00edtik. Nyissuk meg VS Code-ban a Terminalt (Ctrl+\u00f6, vagy View > Terminal), ami egy be\u00e9p\u00edtett Powershell futtat\u00f3k\u00f6rnyezetet ad. Itt adjuk ki az al\u00e1bbi parancsot: http-server Navig\u00e1ljunk a b\u00f6ng\u00e9sz\u0151ben a http://localhost:8080/ URL-re, \u00e9s tesztelj\u00fck le, mit l\u00e1tunk! L\u00e1thatjuk, hogy a sz\u00f6vegek form\u00e1z\u00e1s\u00e1t nem a whitespace-ek, hanem az elemek t\u00edpusa adja. Ha szeretn\u00e9nk l\u00e1tni, melyik elem hol helyezkedik el a fel\u00fcleten ill. a DOM-ban, az F12 eszk\u00f6zt\u00e1ron, a DOM Explorer fels\u0151 sor\u00e1n lev\u0151 ikonokkal v\u00e1ltoztathatjuk, hogy a fel\u00fcleten navig\u00e1lva a DOM elem kijel\u00f6l\u0151dj\u00f6n-e, ill. a DOM-ban navig\u00e1lva a fel\u00fcleten jelezve legyen-e a kiv\u00e1lasztott elem. Az alap\u00e9rtelmezett form\u00e1z\u00e1st a b\u00f6ng\u00e9sz\u0151k be\u00e9p\u00edtetten adj\u00e1k, ez\u00e9rt nagyobbak az egyes c\u00edmsor ( <h1> , <h2> ) mez\u0151k, ill. ez\u00e9rt t\u00f6rik a <div> (ami blockszint\u0171 elem), \u00e9s marad foly\u00f3sz\u00f6veg a <span> (ami inline). A be\u00e9p\u00edtett st\u00edlusokat megvizsg\u00e1lhatjuk egy elemet kijel\u00f6lve a jobb oldali panel Computed f\u00fcl\u00e9n az \u00e1br\u00e1n jel\u00f6lt ikonra kattintva (ne legyen enged\u00e9lyezve a 'Display user styles only' lehet\u0151s\u00e9g). Forr\u00e1s: https://internetingishard.com/html-and-css/semantic-html/ M\u00f3dos\u00edtsa a HTML dokumentum tartalm\u00e1t \u00fagy, hogy szemantikus elemeket haszn\u00e1l a nemszemantikus (pl. div) elemek helyett! A sz\u00fcks\u00e9ges elemek: article , aside , figure , figcaption , footer , header , main , nav , section Szeml\u00e9ltesse az \u00edgy elk\u00e9sz\u00fclt dokumentum r\u00e9szletes szemantikus k\u00f6rvonal\u00e1t! https://hoyois.github.io/html5outliner/ BEADAND\u00d3 (1.5 pont) Az \u00edgy k\u00e9sz\u00fclt outline-r\u00f3l k\u00e9sz\u00edtett k\u00e9perny\u0151k\u00e9pet adja be f3.png n\u00e9ven a repository gy\u00f6ker\u00e9ben! Az index.html m\u00f3dos\u00edt\u00e1sait is commitolja!","title":"Feladat 3 - Szemantikus HTML"},{"location":"laborok/08-http/#feladat-4-html-urlapok","text":"A HTML \u0171rlapok egys\u00e9ges, megszokott adatbeviteli eszk\u00f6zk\u00e9nt szolg\u00e1lnak sz\u00e1munkra a felhaszn\u00e1l\u00f3val val\u00f3 kommunik\u00e1ci\u00f3ra. Az el\u0151ad\u00e1son elhangzottak gyakorl\u00e1sak\u00e9nt \u00e1ll\u00edtson \u00f6ssze egy \u0171rlapot a feladat5/form.html f\u00e1jlba, mely megfelel az al\u00e1bbi felt\u00e9teleknek: Az \u0171rlap az al\u00e1bbi adatokat k\u00e9ri be a fel\u00fcleten a felhaszn\u00e1l\u00f3t\u00f3l (a *-gal jel\u00f6lt mez\u0151k k\u00f6telez\u0151en kit\u00f6ltend\u0151k): N\u00e9v*: sz\u00f6veges mez\u0151 Jelsz\u00f3*: jelsz\u00f3 mez\u0151 (nem l\u00e1that\u00f3 karakterek \u2013 haszn\u00e1lja a \"mobweb\" jelsz\u00f3t szeml\u00e9ltet\u00e9sre) Le\u00edr\u00e1s: sz\u00f6veges mez\u0151, t\u00f6bbsoros Sz\u00fclet\u00e9si d\u00e1tum*: d\u00e1tum Nem: fi\u00fa/l\u00e1ny/egy\u00e9b, leg\u00f6rd\u00fcl\u0151 men\u00fcb\u0151l L\u00e1bm\u00e9ret: sz\u00e1m, 0.5-\u00f6s l\u00e9pt\u00e9kkel Kutya: igen/nem, jel\u00f6l\u0151n\u00e9gyzettel megadhat\u00f3 Minden mez\u0151h\u00f6z tartozzon egy c\u00edmke is, amely t\u0151le balra helyezkedjen el! A c\u00edmk\u00e9re kattintva a f\u00f3kusz ker\u00fclj\u00f6n a relev\u00e1ns mez\u0151be (haszn\u00e1lja az id \u00e9s for attrib\u00fatumokat)! Az egyes mez\u0151k egym\u00e1s alatt helyezkedjenek el! Legyen egy K\u00fcld\u00e9s felirat\u00fa gomb, amely az adatokat a saj\u00e1t szerver\u00fcnknek k\u00fcldi a /postform.html URL-re, ahol egy egyszer\u0171 oldal jelenjen meg GET k\u00e9r\u00e9s hat\u00e1s\u00e1ra (POST k\u00e9r\u00e9s eset\u00e9n nem sz\u00fcks\u00e9ges bet\u00f6lt\u0151dnie az oldalnak, de az URL legyen ugyanez)! Tipp: Sz\u00fcks\u00e9ges elemek: form , input , label , option , select , textarea . Sz\u00fcks\u00e9ges attrib\u00fatumok: action , for , id , method , name , required , step , type , value . BEADAND\u00d3 (1.5 pont) Commitolja a form.html m\u00f3dos\u00edtott tartalm\u00e1t! K\u00e9sz\u00edtsen k\u00e9perny\u0151k\u00e9pet f5a.png n\u00e9ven tetsz\u0151leges b\u00f6ng\u00e9sz\u0151ben a teljesen kit\u00f6lt\u00f6tt \u0171rlapr\u00f3l, amin pontosan egy valid\u00e1ci\u00f3s hiba tal\u00e1lhat\u00f3! Demonstr\u00e1lja Fiddlerrel \u00e9s a b\u00f6ng\u00e9sz\u0151 Network f\u00fcl\u00e9nek seg\u00edts\u00e9g\u00e9vel az \u0171rlapadatok elk\u00fcld\u00e9s\u00e9nek t\u00e9ny\u00e9t GET f5b.png \u00e9s POST f5c.png ig\u00e9k haszn\u00e1lat\u00e1val is!","title":"Feladat 4 - HTML \u0171rlapok"},{"location":"laborok/09-css/","text":"Labor 09 - CSS \u00b6 Bevezet\u00e9s \u00b6 A laborok sor\u00e1n a hallgat\u00f3k laborvezet\u0151i seg\u00edts\u00e9ggel, majd \u00f6n\u00e1ll\u00f3an v\u00e9geznek feladatokat a webes technol\u00f3gi\u00e1k gyakorlati megismer\u00e9se \u00e9rdek\u00e9ben. A feladatok megold\u00e1sa sor\u00e1n ne felejtsd el k\u00f6vetni a feladat bead\u00e1s folyamat\u00e1t TODO LINK. Git repository l\u00e9trehoz\u00e1sa \u00e9s let\u00f6lt\u00e9se \u00b6 Moodle-ben keresd meg a laborhoz tartoz\u00f3 megh\u00edv\u00f3 URL-j\u00e9t \u00e9s annak seg\u00edts\u00e9g\u00e9vel hozd l\u00e9tre a saj\u00e1t repository-dat. V\u00e1rd meg, m\u00edg elk\u00e9sz\u00fcl a repository, majd checkout-old ki. > Egyetemi laborokban, ha a checkout sor\u00e1n nem k\u00e9r a rendszer felhaszn\u00e1l\u00f3nevet \u00e9s jelsz\u00f3t, \u00e9s nem siker\u00fcl a checkout, akkor val\u00f3sz\u00edn\u0171leg a g\u00e9pen kor\u00e1bban megjegyzett felhaszn\u00e1l\u00f3n\u00e9vvel pr\u00f3b\u00e1lkozott a rendszer. El\u0151sz\u00f6r t\u00f6r\u00f6ld ki a mentett bel\u00e9p\u00e9si adatokat (l\u00e1sd itt), \u00e9s pr\u00f3b\u00e1ld \u00fajra. Hozz l\u00e9tre egy \u00faj \u00e1gat megoldas n\u00e9ven, \u00e9s ezen az \u00e1gon dolgozz. A neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dodat. A f\u00e1jlban semmi m\u00e1s ne szerepeljen, csak egyetlen sorban a Neptun k\u00f3d 6 karaktere. Feladat 1 - St\u00edluslapok, inline st\u00edlusok \u00b6 Webes HTML tartalmak st\u00edlusoz\u00e1s\u00e1ra CSS-t haszn\u00e1lunk. A CSS alapjai: szab\u00e1ly (mintailleszt\u00e9s) alap\u00fa, deklarat\u00edv programoz\u00e1si nyelv, DOM elemekhez megjelen\u00e9st rendel. A b\u00f6ng\u00e9sz\u0151ben megjelen\u00edtett HTML tartalmak alap\u00e9rtelmez\u00e9s szerint form\u00e1zatlanok, viszont bizonyos szab\u00e1lyokat a b\u00f6ng\u00e9sz\u0151 alap\u00e9rtelmezetten illeszt az egyes elemekre, az elem t\u00edpusa szerint. Vizsg\u00e1ljuk meg, milyen szab\u00e1lyokat illeszt a b\u00f6ng\u00e9sz\u0151 a HTML, a BODY, a DIV, a SPAN, a H1, H2, az A \u00e9s a B elemekre! Nyissuk meg a Visual Studio Code-ban a lekl\u00f3nozott repositorynkat, \u00e9s dolgozzunk a feladat1-3 mapp\u00e1ban l\u00e9v\u0151 index.html -ben. Sz\u00fcks\u00e9g\u00fcnk lesz egy webszerverre, ami ki tudja szolg\u00e1lni nek\u00fcnk a f\u00e1jlokat. Futtassuk az al\u00e1bbi parancsot a Terminal ( Ctrl+\u00f6 vagy View > Integrated Terminal ) ablakb\u00f3l: http-server Figyelem! \u00dcgyeljen r\u00e1, hogy a parancsot a megfelel\u0151 munkak\u00f6nyvt\u00e1rban adja ki, ahol a szerkesztett f\u00e1jl is tal\u00e1lhat\u00f3! Ez elind\u00edt nek\u00fcnk egy egyszer\u0171 HTTP szervert a g\u00e9p 8080-as portj\u00e1n ( http://localhost:8080/ ), ahonnan egyszer\u0171en ki tudjuk szolg\u00e1lni a mapp\u00e1ban lev\u0151 f\u00e1jlokat, ill. index.html f\u00e1jl hi\u00e1ny\u00e1ban egy f\u00e1jllist\u00e1z\u00f3 f\u0151oldalt kapunk. Navig\u00e1ljunk a http://localhost:8080/ URL-re a b\u00f6ng\u00e9sz\u0151ben! Nyissuk meg az itt l\u00e1that\u00f3 index.html f\u00e1jlt! Az al\u00e1bbit kell l\u00e1tnunk: Vegy\u00fck \u00e9szre, hogy az oldalhoz nem vett\u00fcnk fel saj\u00e1t st\u00edluslapot, valamilyen form\u00e1z\u00e1s m\u00e9gis \u00e9rv\u00e9nyes\u00fclt. Egyes elemek f\u00e9lk\u00f6v\u00e9rek, kisebbek-nagyobbak, elrendez\u00e9s\u00fck sorfolytonos vagy t\u00f6rdelt. Vizsg\u00e1ljuk meg, milyen szab\u00e1lyok \u00e9rv\u00e9nyes\u00fclnek az egyes elemekre! Nyissuk meg a b\u00f6ng\u00e9sz\u0151 be\u00e9p\u00edtett fejleszt\u0151i eszk\u00f6zeit ( F12 )! Lehet\u0151s\u00e9g\u00fcnk van az elemeket kijel\u00f6lni ( Jobb klikk > Inspect Element ), megn\u00e9zni elhelyezked\u00e9s\u00fcket a fel\u00fcleten \u00e9s a DOM sz\u00f6veges reprezent\u00e1ci\u00f3j\u00e1ban egyar\u00e1nt. Fontos! A b\u00f6ng\u00e9sz\u0151k \u00e9s/vagy bizonyos szerverek t\u00fal agressz\u00edvan gyors\u00edt\u00f3t\u00e1razhatnak bizonyos f\u00e1jlokat, pl. a HTML \u00e9s CSS f\u00e1jljainkat, \u00edgy a v\u00e1ltoz\u00e1sokat nem biztos, hogy l\u00e1tni fogjuk egyszer\u0171 \u00fajrat\u00f6lt\u00e9s ut\u00e1n. Ha ez el\u0151fordul, a cache letilt\u00e1s\u00e1hoz a Developer Tools eszk\u00f6zt\u00e1ron ki kell kapcsolnunk a cache-t. Jellemz\u0151en a men\u00fcsor bal oldal\u00e1n tal\u00e1lhat\u00f3k a kijel\u00f6l\u00e9shez sz\u00fcks\u00e9ges m\u0171veletek ikonjai, jobb oldalon a r\u00e9szletes n\u00e9zet. A kiv\u00e1lasztott elemhez a jobb oldali Computed f\u00fcl\u00f6n a t\u00e9nylegesen \u00e9rv\u00e9nyre l\u00e9pett szab\u00e1lyokat l\u00e1thatjuk. Mivel nincs explicit CSS f\u00e1jlunk linkelve \u00e9s CSS szab\u00e1lyokat sem \u00edrtunk a HTML-ben, ez\u00e9rt kiz\u00e1r\u00f3lag a b\u00f6ng\u00e9sz\u0151 be\u00e9p\u00edtett user agent stylesheet -je \u00e9rv\u00e9nyes\u00fcl. Itt l\u00e1thatjuk a CSS Box model**t is, ami az elem **tartalma , a hozz\u00e1 tartoz\u00f3 padding , border \u00e9s margin \u00e9rt\u00e9kek egym\u00e1sra halmoz\u00e1s\u00e1t jelenti a 2 dimenzi\u00f3s t\u00e9glalap oldalaihoz m\u00e9rten. A CSS felold\u00e1s\u00e1ban a cascading , azaz \"egym\u00e1sba \u00e1gyazhat\u00f3\" r\u00e9sz szerint t\u00f6bb st\u00edluslap l\u00e9tezik a sz\u00e1rmaz\u00e1s szempontj\u00e1b\u00f3l; mi most a b\u00f6ng\u00e9sz\u0151be be\u00e9p\u00edtett , \u00fan. user agent stylesheet -et l\u00e1tjuk. A user agent stylesheet alap\u00e9rtelmezetten nem biztos, hogy l\u00e1that\u00f3 a fel\u00fcleten, a Computed f\u00fcl\u00f6n van lehet\u0151s\u00e9g\u00fcnk ezek megtekint\u00e9s\u00e9t bekapcsolni (\"Browser styles\"/\"Show all\" stb. lehet\u0151s\u00e9gek): A fenti sz\u0171r\u0151t haszn\u00e1lva van lehet\u0151s\u00e9g\u00fcnk az alkalmazott CSS szab\u00e1lyok k\u00f6z\u00f6tt keresni is. A h1 , h2 \u00e9s b elemek alap\u00e9rtelmezetten f\u00e9lk\u00f6v\u00e9rek, ezt a font-weight: 700; tulajdons\u00e1g \u00edrja le nek\u00fcnk. A html , body , div , h1 , h2 elemek display tulajdons\u00e1ga block , a span , a \u00e9s b elemek pedig inline t\u00edpus\u00faak. A display: block; tulajdons\u00e1g\u00fa elemek egy blokkot (sort) foglalnak el az \u0151ket befoglal\u00f3 elemben, az inline t\u00edpus\u00faak sorfolytonosak (egym\u00e1s mellett is elhelyezkedhetnek). L\u00e1thatjuk, hogy a body elemen tal\u00e1lhat\u00f3 8px marg\u00f3 ( margin ) mind a 4 ir\u00e1nyban: BEADAND\u00d3 (0.5 pont) Egy-egy k\u00e9perny\u0151k\u00e9ppel al\u00e1t\u00e1masztva demonstr\u00e1lja az al\u00e1bbi k\u00e9rd\u00e9seket: Mekkora a margin , padding \u00e9s border \u00e9rt\u00e9ke az <ul> elemnek? f1.1.png H\u00e1ny pixel a (f\u00fcgg\u0151leges) t\u00e1vols\u00e1g a <h1> \u00e9s <h2> elemek tartalma k\u00f6z\u00f6tt (\u00fcgyelve az \u00e1tfed\u0151 marg\u00f3kra)? f1.2.png Eml\u00e9keztet\u0151 a CSS szab\u00e1lyok defini\u00e1l\u00e1s\u00e1hoz Saj\u00e1t CSS szab\u00e1lyokat t\u00f6bbf\u00e9le m\u00f3don tudunk az oldalunkhoz rendelni: CSS f\u00e1jlokra t\u00f6rt\u00e9n\u0151 hivatkoz\u00e1ssal, CSS szab\u00e1lyok felv\u00e9tel\u00e9vel a HTML tartalm\u00e1n bel\u00fcli <style> tagben, inline, a HTML elemek style attrib\u00fatum\u00e1nak be\u00e1ll\u00edt\u00e1s\u00e1val. \u00dctk\u00f6z\u0151 CSS szab\u00e1lyok k\u00f6z\u00fcl az \u00e9rv\u00e9nyes\u00fcl, amelynek nagyobb a specificit\u00e1sa (megegyez\u0151 specificit\u00e1s eset\u00e9ben az utolj\u00e1ra defini\u00e1lt). Eml\u00e9keztet\u0151k\u00e9nt a szab\u00e1lyok specificit\u00e1si sorrendje: inline st\u00edlus ( <div style=\"...\"> ), ID-k sz\u00e1ma ( #azonosito ), oszt\u00e1lyok, attrib\u00fatumok \u00e9s pszeudo-oszt\u00e1lyok sz\u00e1ma ( .osztaly , [attributum] , [attributum=\"ertek\"] , :hover ), pszeudo-elemek ( :before , :after ). A sorrendhez hozz\u00e1tartozik az !important kulcssz\u00f3, ami \u00f6nmag\u00e1ban a fentiekt\u0151l specifikusabb, viszont az !important szab\u00e1lyokra a fenti specificit\u00e1si sorrend szint\u00e9n \u00e9rv\u00e9nyes\u00fcl. A szab\u00e1lyok defini\u00e1l\u00e1sa: M\u00f3dos\u00edtsuk az oldal megjelen\u00e9s\u00e9t fut\u00e1si id\u0151ben! Rejts\u00fck el a b\u00f6ng\u00e9sz\u0151 be\u00e9p\u00edtett st\u00edlusait, \u00e9s l\u00e1thatjuk, hogy kiz\u00e1r\u00f3lag az \u00fcres inline st\u00edlus illeszkedik \u00edgy az elemre. Itt hozz\u00e1 tudunk adni \u00faj inline st\u00edlust az elemhez. Ha \u00faj szab\u00e1lyt akarunk felvenni, akkor a kapcsos z\u00e1r\u00f3jelek k\u00f6z\u00e9 kattintva tehetj\u00fck ezt meg, ezut\u00e1n az automatikus kieg\u00e9sz\u00edt\u00e9s funkci\u00f3val l\u00e1thatjuk az \u00f6sszes, a b\u00f6ng\u00e9sz\u0151 \u00e1ltal ismert CSS tulajdons\u00e1got (Firefox Developerben ezt az \u00fcres kurzoron a **fel-le nyilak**kal tehetj\u00fck meg, Edge-ben \u00e9s Chrome-ban a **Ctrl+sz\u00f3k\u00f6z**zel). Vegy\u00fck fel a <h1> elemhez az al\u00e1bbi CSS tulajdons\u00e1got: color : red ; K\u00f6zben vegy\u00fck \u00e9szre a DOM reprezent\u00e1ci\u00f3ban, hogy b\u00e1r a jobb oldali panelen szerkeszt\u00fcnk, pontosan ugyanaz t\u00f6rt\u00e9nik, mintha a HTML elem style attrib\u00fatum\u00e1t adtuk volna meg. Ha be\u00e1ll\u00edtjuk a font-weight: bold; tulajdons\u00e1got a <body> -n, akkor l\u00e1thatjuk, hogy az \u00f6sszes gyermek\u00e9re is \u00e9rv\u00e9nyes\u00fcl a szab\u00e1ly. Bizonyos szab\u00e1lyok \u00f6r\u00f6kl\u0151dnek (a font-weight ilyen), m\u00e1sok (p\u00e9ld\u00e1ul a padding \u00e9s margin ) viszont nem. Lehet\u0151s\u00e9g van esetenk\u00e9nt t\u00f6bb szab\u00e1ly aggreg\u00e1lt megad\u00e1s\u00e1ra is \u00fan. shorthandek haszn\u00e1lat\u00e1val. Gyakori p\u00e9ld\u00e1ul a 4-ir\u00e1ny\u00fa \u00e9rt\u00e9kad\u00e1s, ami a top-right-bottom-left ir\u00e1nysorrend szerint ad meg t\u00f6bb \u00e9rt\u00e9ket. A padding: 50px 30px 10px 5px; szab\u00e1ly mind a n\u00e9gy \u00e9rt\u00e9ket be\u00e1ll\u00edtja a fenti sorrend szerint. A padding: 10% 1mm; szab\u00e1ly a fenti-lenti \u00e9rt\u00e9keket 10%-ra, a jobb-balt 1 mm-re (a padding-top). A sz\u00e1zal\u00e9kos \u00e9rt\u00e9kek a sz\u00fcl\u0151 elem sz\u00e9less\u00e9g\u00e9hez viszony\u00edtottak (ha padding-top -ot vagy margin-bottom -ot adunk meg, akkor is sz\u00e9less\u00e9ghez). A padding: 0; mind a 4 oldalon 0-ra \u00e1ll\u00edtja a paddingot (nem sz\u00fcks\u00e9ges m\u00e9rt\u00e9kegys\u00e9g 0 eset\u00e9n). Inline st\u00edlusok Inline st\u00edlusokat csak kiv\u00e9teles esetekben haszn\u00e1ljunk, jellemz\u0151en programozottan (JavaScriptb\u0151l) elfogadott lehet egy elem megjelen\u00e9s\u00e9t ilyen m\u00f3don \u00e1ll\u00edtani, de a nyers HTML-ben nem! Feladat 2. - CSS \u00b6 Az oldalhoz alapvet\u0151en k\u00e9tf\u00e9le m\u00f3don van lehet\u0151s\u00e9g\u00fcnk st\u00edluslapot rendelni: k\u00fcls\u0151 CSS f\u00e1jlb\u00f3l vagy az oldalban defini\u00e1lt <style> tagben. Az index.html forr\u00e1sk\u00f3dj\u00e1t eg\u00e9sz\u00edts\u00fck ki, a <head> elembe helyezz\u00fck el az al\u00e1bbi k\u00f3dot: < style > ul { list-style : none ; padding : 0 ; } ul > li { float : left ; padding : 10 px ; min-width : 200 px ; border : 1 px solid grey ; } </ style > Ha friss\u00edtj\u00fck az oldalt (nem sz\u00fcks\u00e9ges \u00fajraind\u00edtani a szervert, csak menteni a f\u00e1jlt), akkor az elrendez\u00e9s m\u00f3dosul: a list\u00e1nkban a listaelemek egym\u00e1s mell\u00e9 ker\u00fclnek, \u00e9s a listaelemet jelz\u0151 p\u00f6tty elt\u0171nik. float: left A float: left; tulajdons\u00e1g \u00e1ll\u00edt\u00e1s\u00e1val nem ugyanazt \u00e9rj\u00fck el, mintha a listaelemet display: inline-block; -ra \u00e1ll\u00edtan\u00e1nk, mert az inline-block megtartja az egym\u00e1st k\u00f6vet\u0151 elemek k\u00f6z\u00f6tti whitespace-eket, a float: left; viszont nem. A float seg\u00edts\u00e9g\u00e9vel komplexebb elrendez\u00e9seket is el tudunk \u00e9rni, viszont a float-ol\u00e1st meg kell tudnunk sz\u00fcntetni. Ehhez a clear: both; \u00e9rt\u00e9ket \u00e1ll\u00edthatjuk be egy elemen. A float-ol\u00e1s azon kev\u00e9s CSS tulajdons\u00e1g egyike, ami az elemet sorban k\u00f6vet\u0151 tov\u00e1bbi testv\u00e9rekre is k\u00f6zvetlen\u00fcl hat. Az al\u00e1bbi szab\u00e1lyt haszn\u00e1lhatjuk a float-ol\u00e1s megsz\u00fcntet\u00e9s\u00e9hez, ekkor az <article> elemre a clearfix oszt\u00e1lyt alkalmazva az m\u00e1r \u00faj sorba is ker\u00fcl. . clearfix { clear : both ; } < article class = \"clearfix\" > <!-- ... --> </ article > A CSS szab\u00e1lyainknak az esetek nagy t\u00f6bbs\u00e9g\u00e9ben nem tesz j\u00f3t, ha t\u00fal \u00e1ltal\u00e1nosak. A fenti szab\u00e1lyok minden listaelemre \u00e1ltal\u00e1nosan illeszkedni fognak, ami ebben a konkr\u00e9t esetben nem j\u00f3 d\u00f6nt\u00e9s, ugyanis valahol az oldal t\u00f6rzs\u00e9ben lehet, hogy szeretn\u00e9nk haszn\u00e1lni a \"klasszikus\" list\u00e1s megjelen\u00edt\u00e9st is. Ez\u00e9rt a szab\u00e1lyunkat \u00e1t kell gondolnunk, specifikusabb szab\u00e1lyt \u00e9rdemes \u00edrni: ul . menu { list-style : none ; padding : 0 ; } ul . menu > li { float : left ; padding : 10 px ; min-width : 200 px ; border : 1 px solid grey ; } A fenti oszt\u00e1llyal megk\u00fcl\u00f6nb\u00f6ztett\u00fck a menu oszt\u00e1llyal ell\u00e1tott ul elemeket azokt\u00f3l, amiken nincs rajta az oszt\u00e1ly. A pszeudooszt\u00e1lyok haszn\u00e1lat\u00e1val az elemek k\u00fcl\u00f6nb\u00f6z\u0151 \u00e1llapotainak k\u00fcl\u00f6nb\u00f6z\u0151 st\u00edlust tudunk adni. Ha a listaelemek kijel\u00f6l\u00e9se a felhaszn\u00e1l\u00f3 sz\u00e1m\u00e1ra speci\u00e1lis \u00e1llapot, ezt \u00e9rdemes jelezn\u00fcnk a fel\u00fcleten. Haszn\u00e1ljuk az al\u00e1bbi szab\u00e1lyt: ul . menu > li : focus { font-weight : bold ; color : #44AA44 ; } \u00d6nmag\u00e1ban a focus pszeudooszt\u00e1ly haszn\u00e1lata nem elegend\u0151, ugyanis a li elem nem f\u00f3kusz\u00e1lhat\u00f3. A <li> elemen elhelyezett tabindex attrib\u00fatum jelzi a b\u00f6ng\u00e9sz\u0151nek, hogy az elem k\u00e9pes f\u00f3kuszt kapni: < ul class = \"menu\" > < li tabindex = \"1\" > Item 1 </ li > < li tabindex = \"2\" > Item 2 </ li > < li tabindex = \"3\" > Item 3 </ li > </ ul > Ezut\u00e1n lehets\u00e9ges az eg\u00e9r kattint\u00e1ssal vagy a Tab billenty\u0171 haszn\u00e1lat\u00e1val kijel\u00f6lni az elemet. A HTML-be \u00e1gyazott CSS-sel a probl\u00e9ma, hogy ugyanaz a st\u00edlus nem \u00fajrahasznos\u00edthat\u00f3 a k\u00fcl\u00f6nb\u00f6z\u0151 oldalaink k\u00f6z\u00f6tt. Ez\u00e9rt \u00e9rdemes kiszervezni a CSS tartalmainkat a saj\u00e1t dedik\u00e1lt CSS f\u00e1jljainkba. A CSS tartalm\u00e1t mozgassuk \u00e1t a HTML <head> r\u00e9sz\u00e9b\u0151l egy \u00faj f\u00e1jlba az index.html mellett, legyen a neve index.css . A f\u00e1jlt a HTML-b\u0151l az al\u00e1bbi m\u00f3don tudjuk linkelni: tegy\u00fck az oldal <head> r\u00e9sz\u00e9be (a kor\u00e1bbi oldalon bel\u00fcli st\u00edlus-defin\u00edci\u00f3k hely\u00e9re) az al\u00e1bbi hivatkoz\u00e1st: < link rel = \"stylesheet\" type = \"text/css\" href = \"index.css\" > BEADAND\u00d3 (0.5 pont) K\u00e9perny\u0151k\u00e9ppel demonstr\u00e1lja, hogy: Az index.html let\u00f6lt\u0151d\u00e9s\u00e9t k\u00f6vet\u0151en az index.css f\u00e1jl is let\u00f6lt\u0151dik. ( f2.1.png ) Az <ul> lista elemei egym\u00e1s mellett helyezkednek el. ( f2.2.png ) Ehhez a HTML-t m\u00f3dos\u00edtani sz\u00fcks\u00e9ges \u00e9s commitolni. Az egyik listaelem kijel\u00f6lt \u00e1llapot\u00e1ban a bet\u0171sz\u00edn z\u00f6ld lesz, a karakterek f\u00e9lk\u00f6v\u00e9rek. ( f2.3.png ) Feladat 3 - Reszponz\u00edv elrendez\u00e9s \u00b6 A weboldalakat k\u00fcl\u00f6nb\u00f6z\u0151 k\u00e9perny\u0151m\u00e9ret\u0171 \u00e9s felbont\u00e1s\u00fa eszk\u00f6z\u00f6kr\u0151l szoktuk l\u00e1togatni. A t\u00fal r\u00e9szletes t\u00e1bl\u00e1zatok, hossz\u00fa, meg nem t\u00f6r\u0151 sorok nem felhaszn\u00e1l\u00f3bar\u00e1tak kisebb m\u00e9ret\u0171 kijelz\u0151k\u00f6n, m\u00e9g ha az eszk\u00f6z felbont\u00e1sa kell\u0151en nagy is. A mobil eszk\u00f6z\u00f6k ez\u00e9rt szorz\u00f3kat alkalmaznak a val\u00f3s \u00e9s a hasznos felbont\u00e1s k\u00f6z\u00f6tti megk\u00fcl\u00f6nb\u00f6ztet\u00e9sk\u00e9ppen. A reszponz\u00edv elrendez\u00e9s sor\u00e1n a legfontosabb koncepci\u00f3k k\u00f6z\u00e9 tartozik a sz\u00e9less\u00e9g f\u00fcggv\u00e9ny\u00e9ben t\u00f6rt\u00e9n\u0151 \u00e1tm\u00e9retez\u00e9se az oldalnak. Ezeket az al\u00e1bbi szintaxis alapj\u00e1n, \u00fan. media query-vel tudjuk implement\u00e1lni: . medium-only { display : none ; } @ media ( min-width : 768px ) and ( max-width : 991px ) { . medium-only { display : block ; } } A fenti szab\u00e1ly 768 \u00e9s 991 pixel k\u00f6z\u00f6tti sz\u00e9less\u00e9g\u0171 viewport-on jelenik meg, teh\u00e1t nem a k\u00e9perny\u0151 m\u00e9rete, hanem a rendelkez\u00e9sre \u00e1ll\u00f3 hely f\u00fcggv\u00e9ny\u00e9ben v\u00e1ltozik (pl. ablak \u00e1tm\u00e9retez\u00e9sekor is). A medium-only oszt\u00e1llyal ell\u00e1tott elemek csak ilyen k\u00e9perny\u0151m\u00e9reten jelennek meg, ugyanis a media query szab\u00e1ly specifikusabb, mint az azon k\u00edv\u00fcl defini\u00e1lt. Pr\u00f3b\u00e1ljuk ki, mi t\u00f6rt\u00e9nik, hogyha a k\u00e9t szab\u00e1ly sorrendj\u00e9t felcser\u00e9lj\u00fck! BEADAND\u00d3 (0.5 pont) K\u00e9perny\u0151k\u00e9pekkel demonstr\u00e1lja, hogy a fenti szab\u00e1lyt tetsz\u0151leges elemekre alkalmazva azok az ablak m\u00e9ret\u00e9nek f\u00fcggv\u00e9ny\u00e9ben l\u00e1that\u00f3k vagy el vannak rejtve! ( f3.1.png, f3.2.png ) Feladat 4 (\u00f6n\u00e1ll\u00f3) - CSS egy komplexebb feladatban (3.5 pont) \u00b6 Mostant\u00f3l a Feladat4 mapp\u00e1ban l\u00e9v\u0151 \u00e1llom\u00e1nyokkal dolgozzon. K\u00e9sz\u00edtse el a kiindul\u00f3 HTML oldal designj\u00e1t, mely megk\u00f6zel\u00edti a lenti k\u00e9peken l\u00e1that\u00f3 elrendez\u00e9st \u00e9s megjelen\u00e9st! Figyeljen r\u00e1, hogy a megval\u00f3s\u00edt\u00e1s sor\u00e1n nem alkalmazhat inline st\u00edlusokat, \u00e9s ker\u00fclje a HTML f\u00e1jl m\u00f3dos\u00edt\u00e1s\u00e1t. Fejl\u00e9c (1 pont) \u00b6 A fejl\u00e9c megjelen\u00e9s\u00e9t a navbar.css f\u00e1jlba k\u00e9sz\u00edtse el, amit el\u0151sz\u00f6r l\u00e9tre kell hozni. (A HTML oldal m\u00e1r hivatkozik r\u00e1.) Az oldalon fix fejl\u00e9c tal\u00e1lhat\u00f3 (teh\u00e1t a fejl\u00e9c nem t\u0171nik el, ha kig\u00f6rget\u00fcnk a tartalomb\u00f3l). \u00dcgyeljen r\u00e1, hogy a fejl\u00e9c ne takarja ki az oldal k\u00f6zponti tartalm\u00e1t! (Tipp: padding ) A fejl\u00e9c magass\u00e1ga 60px \u00e9s a h\u00e1ttere bord\u00f3! A log\u00f3 mellett egy 2 elemb\u0151l \u00e1ll\u00f3 men\u00fcsor tal\u00e1lhat\u00f3, ahol az elemek \u00e1tnavig\u00e1lnak rendre az index.html \u00e9s contact.html oldalakra az aktu\u00e1lis oldalr\u00f3l, megnevez\u00e9s\u00fck: F\u0151oldal , Kapcsolat (ezeket az oldalakat nem kell elk\u00e9sz\u00edtenie)! A men\u00fcsort <ul> \u00e9s <li> elemek haszn\u00e1lat\u00e1val struktur\u00e1lja. (Tipp: display: inline-block ) A men\u00fcpontok bet\u0171m\u00e9rete 1.1em legyen, el\u0151t\u00e9rsz\u00edne feh\u00e9r. Az egeret a men\u00fcpontra helyezve (Tipp: :hover pszeudoclass) a h\u00e1tt\u00e9rsz\u00edn valamelyest * t\u00e9tebb\u00e9 v\u00e1lik. A men\u00fcpontok sz\u00f6vege legyen f\u00fcgg\u0151legesen k\u00f6z\u00e9pre igaz\u00edtva. (Tipp: line-height ) A fejl\u00e9cben jobbra igaz\u00edtva tal\u00e1lhat\u00f3 egy Bejelentkez\u00e9s gomb (Tipp: float ). \u00dcgyeljen r\u00e1, hogy g\u00f6rget\u00e9skor a tartalom ne takarja ki a men\u00fcsort! (Tipp: z-index ) BEADAND\u00d3 (1 pont) Demonstr\u00e1lja k\u00e9perny\u0151k\u00e9ppel a megold\u00e1st! f4.1.png F\u0151 h\u00edr megjelen\u00edt\u00e9se (1 pont) \u00b6 A f\u0151 h\u00edr megjelen\u00e9s\u00e9t a news.css f\u00e1jlba k\u00e9sz\u00edtse el, amit el\u0151sz\u00f6r l\u00e9tre kell hozni. (A HTML oldal m\u00e1r hivatkozik r\u00e1.) A kezd\u0151oldalon a legfrissebb h\u00edr jelenik meg. A h\u00edrnek van egy fejl\u00e9ce amiben megtal\u00e1lhat\u00f3 a c\u00edm , szerz\u0151 , szerz\u0151 profil k\u00e9pe , publik\u00e1l\u00e1si d\u00e1tum . Ezeket a csatolt k\u00e9perny\u0151k\u00e9p alapj\u00e1n rendezze \u00e9s form\u00e1zza! A szerz\u0151 profil k\u00e9pe 80px x 80px. Ezek mellett jelenik meg a c\u00edm, a szerz\u0151 neve, \u00e9s a publik\u00e1l\u00e1s d\u00e1tuma. A profilk\u00e9p \u00e9s a sz\u00f6veg k\u00f6z\u00f6tt legyen 10px t\u00e1vols\u00e1g. A c\u00edm, szerz\u0151 neve \u00e9s publik\u00e1l\u00e1s d\u00e1tum\u00e1n\u00e1l \u00fagy \u00e1ll\u00edtsa \u00e1t a bet\u0171m\u00e9retet \u00e9s a marg\u00f3kat, hogy azok olyan magasak legyenek mint a k\u00e9p. A h\u00edr t\u00f6rzse egy bevezet\u0151 , k\u00e9p majd tov\u00e1bbi tartalomb\u00f3l \u00e1ll. A h\u00edrhez tartoz\u00f3 k\u00e9p legyen k\u00f6z\u00e9pre igaz\u00edtva. \u00dcgyeljen arra, hogy a sz\u00f6vegek tartsanak egys\u00e9gesen 16px t\u00e1vols\u00e1got a befoglal\u00f3 elemekt\u0151l. (Tipp: padding ) BEADAND\u00d3 (1 pont) Demonstr\u00e1lja k\u00e9perny\u0151k\u00e9ppel a megold\u00e1st! f4.2.png Oldals\u00f3 s\u00e1v (1 pont) \u00b6 Az oldals\u00f3 s\u00e1v megjelen\u00edt\u00e9s\u00e9t is a news.css f\u00e1jlba k\u00e9sz\u00edtse el. Az oldal alj\u00e1n tal\u00e1lhat\u00f3 kor\u00e1bbi h\u00edreket rendezze \u00fagy, hogy a f\u0151 h\u00edr jobb oldal\u00e1n jelenjenek meg Az oldals\u00e1v sz\u00e9less\u00e9ge fixen 350px legyen, a f\u0151 h\u00edr pedig a fennmarad\u00f3 helyet t\u00f6ltse ki (Tipp: width: calc(100% - oldals\u00e1g sz\u00e9less\u00e9ge - paddingok) ) Az oldals\u00e1v h\u00e1tt\u00e9rsz\u00edne legyen vil\u00e1gossz\u00fcrke. Ha a f\u0151 h\u00edr magasabb mint az oldals\u00e1v, akkor is \u00e9rjen le az oldals\u00e1v a l\u00e1bl\u00e9cig. (Tipp: position: absolute ) Ha az oldals\u00e1v magasabb, akkor pedig jelenjen meg a scrollbar az oldals\u00e1von. (Tipp: overflow: auto ) Az egyes h\u00edrek k\u00f6z\u00f6tt legyen egy elv\u00e1laszt\u00f3 vonal (Tipp: border-bottom ) \u00dcgyeljen r\u00e1, hogy az utols\u00f3 h\u00edr ut\u00e1n viszont m\u00e1r ne legyen elv\u00e1laszt\u00f3 vonal (Tipp: :last-child ) BEADAND\u00d3 (1 pont) Demonstr\u00e1lja k\u00e9perny\u0151k\u00e9ppel a megold\u00e1st! f4.3.png Reszponzivit\u00e1s (0.5 pont) \u00b6 Eg\u00e9sz\u00edtse ki a news.css f\u00e1jlt \u00fagy, hogy ha 900px-n\u00e9l kisebbre \u00e1ll\u00edtjuk az ablakot, akkor a jobb oldali s\u00e1v t\u0171nj\u00f6n el, \u00e9s a teljes oldalt a f\u0151 h\u00edr foglalja el. (Tipp: @media( max-width: 900px ) ) Tippek a megold\u00e1shoz: Haszn\u00e1lja a b\u00f6ng\u00e9sz\u0151 DOM vizualiz\u00e1l\u00f3 eszk\u00f6zt, \u00edgy l\u00e1thatja, hogy a kijel\u00f6lt elemre milyen CSS szab\u00e1lyok illeszkednek. Ha egy elemnek ki kell t\u00f6ltenie a rendelkez\u00e9sre \u00e1ll\u00f3 sz\u00e9less\u00e9get, akkor minden \u0151s\u00e9nek a f\u00e1ban ki kell t\u00f6ltenie a rendelkez\u00e9sre \u00e1ll\u00f3 sz\u00e9less\u00e9get, am\u00edg az sz\u00fcks\u00e9ges. Pl. a width: 100%; csak a k\u00f6zvetlen \u0151sre vonatkozik blokkszint\u0171 elemekn\u00e9l, ha az position: relative vagy nincs be\u00e1ll\u00edtva. Az elrendez\u00e9sn\u00e9l \u00e9rdemes figyelembe venni, hogy a position: absolute; \u00e9rt\u00e9k a DOM-ban az elemhez legk\u00f6zelebbi olyan \u0151sh\u00f6z poz\u00edcion\u00e1l, mely position: relative; . Ezut\u00e1n a top , right , bottom \u00e9s left tulajdons\u00e1gokat tudja be\u00e1ll\u00edtani pl. pixel vagy sz\u00e1zal\u00e9k \u00e9rt\u00e9k alapj\u00e1n, \u00edgy az adott \u0151sh\u00f6z poz\u00edcion\u00e1lja az elemet. Haszn\u00e1lhatja a calc() f\u00fcggv\u00e9nyt, mely egyszer\u0171 konstans \u00e9rt\u00e9kek sz\u00e1m\u00edt\u00e1s\u00e1ra haszn\u00e1lhat\u00f3, pl. width: calc(50% - 100px); . Fontos, hogy a sz\u00e1m\u00edtand\u00f3 \u00e9rt\u00e9kek k\u00f6z\u00f6tt mindenk\u00e9ppen sz\u00fcks\u00e9ges sz\u00f3k\u00f6zt tennie. @media query-ket az and \u00e9s az or logikai oper\u00e1torokkal tud egym\u00e1s ut\u00e1n f\u0171zni, pl. @media screen and (min-width: 200px) {...} , neg\u00e1lni a not kulcssz\u00f3val lehets\u00e9ges. BEADAND\u00d3 (0.5 pont) Demonstr\u00e1lja k\u00e9perny\u0151k\u00e9ppel a megold\u00e1st! f4.4.png","title":"Labor 09 - CSS"},{"location":"laborok/09-css/#labor-09-css","text":"","title":"Labor 09 - CSS"},{"location":"laborok/09-css/#bevezetes","text":"A laborok sor\u00e1n a hallgat\u00f3k laborvezet\u0151i seg\u00edts\u00e9ggel, majd \u00f6n\u00e1ll\u00f3an v\u00e9geznek feladatokat a webes technol\u00f3gi\u00e1k gyakorlati megismer\u00e9se \u00e9rdek\u00e9ben. A feladatok megold\u00e1sa sor\u00e1n ne felejtsd el k\u00f6vetni a feladat bead\u00e1s folyamat\u00e1t TODO LINK.","title":"Bevezet\u00e9s"},{"location":"laborok/09-css/#git-repository-letrehozasa-es-letoltese","text":"Moodle-ben keresd meg a laborhoz tartoz\u00f3 megh\u00edv\u00f3 URL-j\u00e9t \u00e9s annak seg\u00edts\u00e9g\u00e9vel hozd l\u00e9tre a saj\u00e1t repository-dat. V\u00e1rd meg, m\u00edg elk\u00e9sz\u00fcl a repository, majd checkout-old ki. > Egyetemi laborokban, ha a checkout sor\u00e1n nem k\u00e9r a rendszer felhaszn\u00e1l\u00f3nevet \u00e9s jelsz\u00f3t, \u00e9s nem siker\u00fcl a checkout, akkor val\u00f3sz\u00edn\u0171leg a g\u00e9pen kor\u00e1bban megjegyzett felhaszn\u00e1l\u00f3n\u00e9vvel pr\u00f3b\u00e1lkozott a rendszer. El\u0151sz\u00f6r t\u00f6r\u00f6ld ki a mentett bel\u00e9p\u00e9si adatokat (l\u00e1sd itt), \u00e9s pr\u00f3b\u00e1ld \u00fajra. Hozz l\u00e9tre egy \u00faj \u00e1gat megoldas n\u00e9ven, \u00e9s ezen az \u00e1gon dolgozz. A neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dodat. A f\u00e1jlban semmi m\u00e1s ne szerepeljen, csak egyetlen sorban a Neptun k\u00f3d 6 karaktere.","title":"Git repository l\u00e9trehoz\u00e1sa \u00e9s let\u00f6lt\u00e9se"},{"location":"laborok/09-css/#feladat-1-stiluslapok-inline-stilusok","text":"Webes HTML tartalmak st\u00edlusoz\u00e1s\u00e1ra CSS-t haszn\u00e1lunk. A CSS alapjai: szab\u00e1ly (mintailleszt\u00e9s) alap\u00fa, deklarat\u00edv programoz\u00e1si nyelv, DOM elemekhez megjelen\u00e9st rendel. A b\u00f6ng\u00e9sz\u0151ben megjelen\u00edtett HTML tartalmak alap\u00e9rtelmez\u00e9s szerint form\u00e1zatlanok, viszont bizonyos szab\u00e1lyokat a b\u00f6ng\u00e9sz\u0151 alap\u00e9rtelmezetten illeszt az egyes elemekre, az elem t\u00edpusa szerint. Vizsg\u00e1ljuk meg, milyen szab\u00e1lyokat illeszt a b\u00f6ng\u00e9sz\u0151 a HTML, a BODY, a DIV, a SPAN, a H1, H2, az A \u00e9s a B elemekre! Nyissuk meg a Visual Studio Code-ban a lekl\u00f3nozott repositorynkat, \u00e9s dolgozzunk a feladat1-3 mapp\u00e1ban l\u00e9v\u0151 index.html -ben. Sz\u00fcks\u00e9g\u00fcnk lesz egy webszerverre, ami ki tudja szolg\u00e1lni nek\u00fcnk a f\u00e1jlokat. Futtassuk az al\u00e1bbi parancsot a Terminal ( Ctrl+\u00f6 vagy View > Integrated Terminal ) ablakb\u00f3l: http-server Figyelem! \u00dcgyeljen r\u00e1, hogy a parancsot a megfelel\u0151 munkak\u00f6nyvt\u00e1rban adja ki, ahol a szerkesztett f\u00e1jl is tal\u00e1lhat\u00f3! Ez elind\u00edt nek\u00fcnk egy egyszer\u0171 HTTP szervert a g\u00e9p 8080-as portj\u00e1n ( http://localhost:8080/ ), ahonnan egyszer\u0171en ki tudjuk szolg\u00e1lni a mapp\u00e1ban lev\u0151 f\u00e1jlokat, ill. index.html f\u00e1jl hi\u00e1ny\u00e1ban egy f\u00e1jllist\u00e1z\u00f3 f\u0151oldalt kapunk. Navig\u00e1ljunk a http://localhost:8080/ URL-re a b\u00f6ng\u00e9sz\u0151ben! Nyissuk meg az itt l\u00e1that\u00f3 index.html f\u00e1jlt! Az al\u00e1bbit kell l\u00e1tnunk: Vegy\u00fck \u00e9szre, hogy az oldalhoz nem vett\u00fcnk fel saj\u00e1t st\u00edluslapot, valamilyen form\u00e1z\u00e1s m\u00e9gis \u00e9rv\u00e9nyes\u00fclt. Egyes elemek f\u00e9lk\u00f6v\u00e9rek, kisebbek-nagyobbak, elrendez\u00e9s\u00fck sorfolytonos vagy t\u00f6rdelt. Vizsg\u00e1ljuk meg, milyen szab\u00e1lyok \u00e9rv\u00e9nyes\u00fclnek az egyes elemekre! Nyissuk meg a b\u00f6ng\u00e9sz\u0151 be\u00e9p\u00edtett fejleszt\u0151i eszk\u00f6zeit ( F12 )! Lehet\u0151s\u00e9g\u00fcnk van az elemeket kijel\u00f6lni ( Jobb klikk > Inspect Element ), megn\u00e9zni elhelyezked\u00e9s\u00fcket a fel\u00fcleten \u00e9s a DOM sz\u00f6veges reprezent\u00e1ci\u00f3j\u00e1ban egyar\u00e1nt. Fontos! A b\u00f6ng\u00e9sz\u0151k \u00e9s/vagy bizonyos szerverek t\u00fal agressz\u00edvan gyors\u00edt\u00f3t\u00e1razhatnak bizonyos f\u00e1jlokat, pl. a HTML \u00e9s CSS f\u00e1jljainkat, \u00edgy a v\u00e1ltoz\u00e1sokat nem biztos, hogy l\u00e1tni fogjuk egyszer\u0171 \u00fajrat\u00f6lt\u00e9s ut\u00e1n. Ha ez el\u0151fordul, a cache letilt\u00e1s\u00e1hoz a Developer Tools eszk\u00f6zt\u00e1ron ki kell kapcsolnunk a cache-t. Jellemz\u0151en a men\u00fcsor bal oldal\u00e1n tal\u00e1lhat\u00f3k a kijel\u00f6l\u00e9shez sz\u00fcks\u00e9ges m\u0171veletek ikonjai, jobb oldalon a r\u00e9szletes n\u00e9zet. A kiv\u00e1lasztott elemhez a jobb oldali Computed f\u00fcl\u00f6n a t\u00e9nylegesen \u00e9rv\u00e9nyre l\u00e9pett szab\u00e1lyokat l\u00e1thatjuk. Mivel nincs explicit CSS f\u00e1jlunk linkelve \u00e9s CSS szab\u00e1lyokat sem \u00edrtunk a HTML-ben, ez\u00e9rt kiz\u00e1r\u00f3lag a b\u00f6ng\u00e9sz\u0151 be\u00e9p\u00edtett user agent stylesheet -je \u00e9rv\u00e9nyes\u00fcl. Itt l\u00e1thatjuk a CSS Box model**t is, ami az elem **tartalma , a hozz\u00e1 tartoz\u00f3 padding , border \u00e9s margin \u00e9rt\u00e9kek egym\u00e1sra halmoz\u00e1s\u00e1t jelenti a 2 dimenzi\u00f3s t\u00e9glalap oldalaihoz m\u00e9rten. A CSS felold\u00e1s\u00e1ban a cascading , azaz \"egym\u00e1sba \u00e1gyazhat\u00f3\" r\u00e9sz szerint t\u00f6bb st\u00edluslap l\u00e9tezik a sz\u00e1rmaz\u00e1s szempontj\u00e1b\u00f3l; mi most a b\u00f6ng\u00e9sz\u0151be be\u00e9p\u00edtett , \u00fan. user agent stylesheet -et l\u00e1tjuk. A user agent stylesheet alap\u00e9rtelmezetten nem biztos, hogy l\u00e1that\u00f3 a fel\u00fcleten, a Computed f\u00fcl\u00f6n van lehet\u0151s\u00e9g\u00fcnk ezek megtekint\u00e9s\u00e9t bekapcsolni (\"Browser styles\"/\"Show all\" stb. lehet\u0151s\u00e9gek): A fenti sz\u0171r\u0151t haszn\u00e1lva van lehet\u0151s\u00e9g\u00fcnk az alkalmazott CSS szab\u00e1lyok k\u00f6z\u00f6tt keresni is. A h1 , h2 \u00e9s b elemek alap\u00e9rtelmezetten f\u00e9lk\u00f6v\u00e9rek, ezt a font-weight: 700; tulajdons\u00e1g \u00edrja le nek\u00fcnk. A html , body , div , h1 , h2 elemek display tulajdons\u00e1ga block , a span , a \u00e9s b elemek pedig inline t\u00edpus\u00faak. A display: block; tulajdons\u00e1g\u00fa elemek egy blokkot (sort) foglalnak el az \u0151ket befoglal\u00f3 elemben, az inline t\u00edpus\u00faak sorfolytonosak (egym\u00e1s mellett is elhelyezkedhetnek). L\u00e1thatjuk, hogy a body elemen tal\u00e1lhat\u00f3 8px marg\u00f3 ( margin ) mind a 4 ir\u00e1nyban: BEADAND\u00d3 (0.5 pont) Egy-egy k\u00e9perny\u0151k\u00e9ppel al\u00e1t\u00e1masztva demonstr\u00e1lja az al\u00e1bbi k\u00e9rd\u00e9seket: Mekkora a margin , padding \u00e9s border \u00e9rt\u00e9ke az <ul> elemnek? f1.1.png H\u00e1ny pixel a (f\u00fcgg\u0151leges) t\u00e1vols\u00e1g a <h1> \u00e9s <h2> elemek tartalma k\u00f6z\u00f6tt (\u00fcgyelve az \u00e1tfed\u0151 marg\u00f3kra)? f1.2.png Eml\u00e9keztet\u0151 a CSS szab\u00e1lyok defini\u00e1l\u00e1s\u00e1hoz Saj\u00e1t CSS szab\u00e1lyokat t\u00f6bbf\u00e9le m\u00f3don tudunk az oldalunkhoz rendelni: CSS f\u00e1jlokra t\u00f6rt\u00e9n\u0151 hivatkoz\u00e1ssal, CSS szab\u00e1lyok felv\u00e9tel\u00e9vel a HTML tartalm\u00e1n bel\u00fcli <style> tagben, inline, a HTML elemek style attrib\u00fatum\u00e1nak be\u00e1ll\u00edt\u00e1s\u00e1val. \u00dctk\u00f6z\u0151 CSS szab\u00e1lyok k\u00f6z\u00fcl az \u00e9rv\u00e9nyes\u00fcl, amelynek nagyobb a specificit\u00e1sa (megegyez\u0151 specificit\u00e1s eset\u00e9ben az utolj\u00e1ra defini\u00e1lt). Eml\u00e9keztet\u0151k\u00e9nt a szab\u00e1lyok specificit\u00e1si sorrendje: inline st\u00edlus ( <div style=\"...\"> ), ID-k sz\u00e1ma ( #azonosito ), oszt\u00e1lyok, attrib\u00fatumok \u00e9s pszeudo-oszt\u00e1lyok sz\u00e1ma ( .osztaly , [attributum] , [attributum=\"ertek\"] , :hover ), pszeudo-elemek ( :before , :after ). A sorrendhez hozz\u00e1tartozik az !important kulcssz\u00f3, ami \u00f6nmag\u00e1ban a fentiekt\u0151l specifikusabb, viszont az !important szab\u00e1lyokra a fenti specificit\u00e1si sorrend szint\u00e9n \u00e9rv\u00e9nyes\u00fcl. A szab\u00e1lyok defini\u00e1l\u00e1sa: M\u00f3dos\u00edtsuk az oldal megjelen\u00e9s\u00e9t fut\u00e1si id\u0151ben! Rejts\u00fck el a b\u00f6ng\u00e9sz\u0151 be\u00e9p\u00edtett st\u00edlusait, \u00e9s l\u00e1thatjuk, hogy kiz\u00e1r\u00f3lag az \u00fcres inline st\u00edlus illeszkedik \u00edgy az elemre. Itt hozz\u00e1 tudunk adni \u00faj inline st\u00edlust az elemhez. Ha \u00faj szab\u00e1lyt akarunk felvenni, akkor a kapcsos z\u00e1r\u00f3jelek k\u00f6z\u00e9 kattintva tehetj\u00fck ezt meg, ezut\u00e1n az automatikus kieg\u00e9sz\u00edt\u00e9s funkci\u00f3val l\u00e1thatjuk az \u00f6sszes, a b\u00f6ng\u00e9sz\u0151 \u00e1ltal ismert CSS tulajdons\u00e1got (Firefox Developerben ezt az \u00fcres kurzoron a **fel-le nyilak**kal tehetj\u00fck meg, Edge-ben \u00e9s Chrome-ban a **Ctrl+sz\u00f3k\u00f6z**zel). Vegy\u00fck fel a <h1> elemhez az al\u00e1bbi CSS tulajdons\u00e1got: color : red ; K\u00f6zben vegy\u00fck \u00e9szre a DOM reprezent\u00e1ci\u00f3ban, hogy b\u00e1r a jobb oldali panelen szerkeszt\u00fcnk, pontosan ugyanaz t\u00f6rt\u00e9nik, mintha a HTML elem style attrib\u00fatum\u00e1t adtuk volna meg. Ha be\u00e1ll\u00edtjuk a font-weight: bold; tulajdons\u00e1got a <body> -n, akkor l\u00e1thatjuk, hogy az \u00f6sszes gyermek\u00e9re is \u00e9rv\u00e9nyes\u00fcl a szab\u00e1ly. Bizonyos szab\u00e1lyok \u00f6r\u00f6kl\u0151dnek (a font-weight ilyen), m\u00e1sok (p\u00e9ld\u00e1ul a padding \u00e9s margin ) viszont nem. Lehet\u0151s\u00e9g van esetenk\u00e9nt t\u00f6bb szab\u00e1ly aggreg\u00e1lt megad\u00e1s\u00e1ra is \u00fan. shorthandek haszn\u00e1lat\u00e1val. Gyakori p\u00e9ld\u00e1ul a 4-ir\u00e1ny\u00fa \u00e9rt\u00e9kad\u00e1s, ami a top-right-bottom-left ir\u00e1nysorrend szerint ad meg t\u00f6bb \u00e9rt\u00e9ket. A padding: 50px 30px 10px 5px; szab\u00e1ly mind a n\u00e9gy \u00e9rt\u00e9ket be\u00e1ll\u00edtja a fenti sorrend szerint. A padding: 10% 1mm; szab\u00e1ly a fenti-lenti \u00e9rt\u00e9keket 10%-ra, a jobb-balt 1 mm-re (a padding-top). A sz\u00e1zal\u00e9kos \u00e9rt\u00e9kek a sz\u00fcl\u0151 elem sz\u00e9less\u00e9g\u00e9hez viszony\u00edtottak (ha padding-top -ot vagy margin-bottom -ot adunk meg, akkor is sz\u00e9less\u00e9ghez). A padding: 0; mind a 4 oldalon 0-ra \u00e1ll\u00edtja a paddingot (nem sz\u00fcks\u00e9ges m\u00e9rt\u00e9kegys\u00e9g 0 eset\u00e9n). Inline st\u00edlusok Inline st\u00edlusokat csak kiv\u00e9teles esetekben haszn\u00e1ljunk, jellemz\u0151en programozottan (JavaScriptb\u0151l) elfogadott lehet egy elem megjelen\u00e9s\u00e9t ilyen m\u00f3don \u00e1ll\u00edtani, de a nyers HTML-ben nem!","title":"Feladat 1 - St\u00edluslapok, inline st\u00edlusok"},{"location":"laborok/09-css/#feladat-2-css","text":"Az oldalhoz alapvet\u0151en k\u00e9tf\u00e9le m\u00f3don van lehet\u0151s\u00e9g\u00fcnk st\u00edluslapot rendelni: k\u00fcls\u0151 CSS f\u00e1jlb\u00f3l vagy az oldalban defini\u00e1lt <style> tagben. Az index.html forr\u00e1sk\u00f3dj\u00e1t eg\u00e9sz\u00edts\u00fck ki, a <head> elembe helyezz\u00fck el az al\u00e1bbi k\u00f3dot: < style > ul { list-style : none ; padding : 0 ; } ul > li { float : left ; padding : 10 px ; min-width : 200 px ; border : 1 px solid grey ; } </ style > Ha friss\u00edtj\u00fck az oldalt (nem sz\u00fcks\u00e9ges \u00fajraind\u00edtani a szervert, csak menteni a f\u00e1jlt), akkor az elrendez\u00e9s m\u00f3dosul: a list\u00e1nkban a listaelemek egym\u00e1s mell\u00e9 ker\u00fclnek, \u00e9s a listaelemet jelz\u0151 p\u00f6tty elt\u0171nik. float: left A float: left; tulajdons\u00e1g \u00e1ll\u00edt\u00e1s\u00e1val nem ugyanazt \u00e9rj\u00fck el, mintha a listaelemet display: inline-block; -ra \u00e1ll\u00edtan\u00e1nk, mert az inline-block megtartja az egym\u00e1st k\u00f6vet\u0151 elemek k\u00f6z\u00f6tti whitespace-eket, a float: left; viszont nem. A float seg\u00edts\u00e9g\u00e9vel komplexebb elrendez\u00e9seket is el tudunk \u00e9rni, viszont a float-ol\u00e1st meg kell tudnunk sz\u00fcntetni. Ehhez a clear: both; \u00e9rt\u00e9ket \u00e1ll\u00edthatjuk be egy elemen. A float-ol\u00e1s azon kev\u00e9s CSS tulajdons\u00e1g egyike, ami az elemet sorban k\u00f6vet\u0151 tov\u00e1bbi testv\u00e9rekre is k\u00f6zvetlen\u00fcl hat. Az al\u00e1bbi szab\u00e1lyt haszn\u00e1lhatjuk a float-ol\u00e1s megsz\u00fcntet\u00e9s\u00e9hez, ekkor az <article> elemre a clearfix oszt\u00e1lyt alkalmazva az m\u00e1r \u00faj sorba is ker\u00fcl. . clearfix { clear : both ; } < article class = \"clearfix\" > <!-- ... --> </ article > A CSS szab\u00e1lyainknak az esetek nagy t\u00f6bbs\u00e9g\u00e9ben nem tesz j\u00f3t, ha t\u00fal \u00e1ltal\u00e1nosak. A fenti szab\u00e1lyok minden listaelemre \u00e1ltal\u00e1nosan illeszkedni fognak, ami ebben a konkr\u00e9t esetben nem j\u00f3 d\u00f6nt\u00e9s, ugyanis valahol az oldal t\u00f6rzs\u00e9ben lehet, hogy szeretn\u00e9nk haszn\u00e1lni a \"klasszikus\" list\u00e1s megjelen\u00edt\u00e9st is. Ez\u00e9rt a szab\u00e1lyunkat \u00e1t kell gondolnunk, specifikusabb szab\u00e1lyt \u00e9rdemes \u00edrni: ul . menu { list-style : none ; padding : 0 ; } ul . menu > li { float : left ; padding : 10 px ; min-width : 200 px ; border : 1 px solid grey ; } A fenti oszt\u00e1llyal megk\u00fcl\u00f6nb\u00f6ztett\u00fck a menu oszt\u00e1llyal ell\u00e1tott ul elemeket azokt\u00f3l, amiken nincs rajta az oszt\u00e1ly. A pszeudooszt\u00e1lyok haszn\u00e1lat\u00e1val az elemek k\u00fcl\u00f6nb\u00f6z\u0151 \u00e1llapotainak k\u00fcl\u00f6nb\u00f6z\u0151 st\u00edlust tudunk adni. Ha a listaelemek kijel\u00f6l\u00e9se a felhaszn\u00e1l\u00f3 sz\u00e1m\u00e1ra speci\u00e1lis \u00e1llapot, ezt \u00e9rdemes jelezn\u00fcnk a fel\u00fcleten. Haszn\u00e1ljuk az al\u00e1bbi szab\u00e1lyt: ul . menu > li : focus { font-weight : bold ; color : #44AA44 ; } \u00d6nmag\u00e1ban a focus pszeudooszt\u00e1ly haszn\u00e1lata nem elegend\u0151, ugyanis a li elem nem f\u00f3kusz\u00e1lhat\u00f3. A <li> elemen elhelyezett tabindex attrib\u00fatum jelzi a b\u00f6ng\u00e9sz\u0151nek, hogy az elem k\u00e9pes f\u00f3kuszt kapni: < ul class = \"menu\" > < li tabindex = \"1\" > Item 1 </ li > < li tabindex = \"2\" > Item 2 </ li > < li tabindex = \"3\" > Item 3 </ li > </ ul > Ezut\u00e1n lehets\u00e9ges az eg\u00e9r kattint\u00e1ssal vagy a Tab billenty\u0171 haszn\u00e1lat\u00e1val kijel\u00f6lni az elemet. A HTML-be \u00e1gyazott CSS-sel a probl\u00e9ma, hogy ugyanaz a st\u00edlus nem \u00fajrahasznos\u00edthat\u00f3 a k\u00fcl\u00f6nb\u00f6z\u0151 oldalaink k\u00f6z\u00f6tt. Ez\u00e9rt \u00e9rdemes kiszervezni a CSS tartalmainkat a saj\u00e1t dedik\u00e1lt CSS f\u00e1jljainkba. A CSS tartalm\u00e1t mozgassuk \u00e1t a HTML <head> r\u00e9sz\u00e9b\u0151l egy \u00faj f\u00e1jlba az index.html mellett, legyen a neve index.css . A f\u00e1jlt a HTML-b\u0151l az al\u00e1bbi m\u00f3don tudjuk linkelni: tegy\u00fck az oldal <head> r\u00e9sz\u00e9be (a kor\u00e1bbi oldalon bel\u00fcli st\u00edlus-defin\u00edci\u00f3k hely\u00e9re) az al\u00e1bbi hivatkoz\u00e1st: < link rel = \"stylesheet\" type = \"text/css\" href = \"index.css\" > BEADAND\u00d3 (0.5 pont) K\u00e9perny\u0151k\u00e9ppel demonstr\u00e1lja, hogy: Az index.html let\u00f6lt\u0151d\u00e9s\u00e9t k\u00f6vet\u0151en az index.css f\u00e1jl is let\u00f6lt\u0151dik. ( f2.1.png ) Az <ul> lista elemei egym\u00e1s mellett helyezkednek el. ( f2.2.png ) Ehhez a HTML-t m\u00f3dos\u00edtani sz\u00fcks\u00e9ges \u00e9s commitolni. Az egyik listaelem kijel\u00f6lt \u00e1llapot\u00e1ban a bet\u0171sz\u00edn z\u00f6ld lesz, a karakterek f\u00e9lk\u00f6v\u00e9rek. ( f2.3.png )","title":"Feladat 2. - CSS"},{"location":"laborok/09-css/#feladat-3-reszponziv-elrendezes","text":"A weboldalakat k\u00fcl\u00f6nb\u00f6z\u0151 k\u00e9perny\u0151m\u00e9ret\u0171 \u00e9s felbont\u00e1s\u00fa eszk\u00f6z\u00f6kr\u0151l szoktuk l\u00e1togatni. A t\u00fal r\u00e9szletes t\u00e1bl\u00e1zatok, hossz\u00fa, meg nem t\u00f6r\u0151 sorok nem felhaszn\u00e1l\u00f3bar\u00e1tak kisebb m\u00e9ret\u0171 kijelz\u0151k\u00f6n, m\u00e9g ha az eszk\u00f6z felbont\u00e1sa kell\u0151en nagy is. A mobil eszk\u00f6z\u00f6k ez\u00e9rt szorz\u00f3kat alkalmaznak a val\u00f3s \u00e9s a hasznos felbont\u00e1s k\u00f6z\u00f6tti megk\u00fcl\u00f6nb\u00f6ztet\u00e9sk\u00e9ppen. A reszponz\u00edv elrendez\u00e9s sor\u00e1n a legfontosabb koncepci\u00f3k k\u00f6z\u00e9 tartozik a sz\u00e9less\u00e9g f\u00fcggv\u00e9ny\u00e9ben t\u00f6rt\u00e9n\u0151 \u00e1tm\u00e9retez\u00e9se az oldalnak. Ezeket az al\u00e1bbi szintaxis alapj\u00e1n, \u00fan. media query-vel tudjuk implement\u00e1lni: . medium-only { display : none ; } @ media ( min-width : 768px ) and ( max-width : 991px ) { . medium-only { display : block ; } } A fenti szab\u00e1ly 768 \u00e9s 991 pixel k\u00f6z\u00f6tti sz\u00e9less\u00e9g\u0171 viewport-on jelenik meg, teh\u00e1t nem a k\u00e9perny\u0151 m\u00e9rete, hanem a rendelkez\u00e9sre \u00e1ll\u00f3 hely f\u00fcggv\u00e9ny\u00e9ben v\u00e1ltozik (pl. ablak \u00e1tm\u00e9retez\u00e9sekor is). A medium-only oszt\u00e1llyal ell\u00e1tott elemek csak ilyen k\u00e9perny\u0151m\u00e9reten jelennek meg, ugyanis a media query szab\u00e1ly specifikusabb, mint az azon k\u00edv\u00fcl defini\u00e1lt. Pr\u00f3b\u00e1ljuk ki, mi t\u00f6rt\u00e9nik, hogyha a k\u00e9t szab\u00e1ly sorrendj\u00e9t felcser\u00e9lj\u00fck! BEADAND\u00d3 (0.5 pont) K\u00e9perny\u0151k\u00e9pekkel demonstr\u00e1lja, hogy a fenti szab\u00e1lyt tetsz\u0151leges elemekre alkalmazva azok az ablak m\u00e9ret\u00e9nek f\u00fcggv\u00e9ny\u00e9ben l\u00e1that\u00f3k vagy el vannak rejtve! ( f3.1.png, f3.2.png )","title":"Feladat 3 - Reszponz\u00edv elrendez\u00e9s"},{"location":"laborok/09-css/#feladat-4-onallo-css-egy-komplexebb-feladatban-35-pont","text":"Mostant\u00f3l a Feladat4 mapp\u00e1ban l\u00e9v\u0151 \u00e1llom\u00e1nyokkal dolgozzon. K\u00e9sz\u00edtse el a kiindul\u00f3 HTML oldal designj\u00e1t, mely megk\u00f6zel\u00edti a lenti k\u00e9peken l\u00e1that\u00f3 elrendez\u00e9st \u00e9s megjelen\u00e9st! Figyeljen r\u00e1, hogy a megval\u00f3s\u00edt\u00e1s sor\u00e1n nem alkalmazhat inline st\u00edlusokat, \u00e9s ker\u00fclje a HTML f\u00e1jl m\u00f3dos\u00edt\u00e1s\u00e1t.","title":"Feladat 4 (\u00f6n\u00e1ll\u00f3) - CSS egy komplexebb feladatban (3.5 pont)"},{"location":"laborok/09-css/#fejlec-1-pont","text":"A fejl\u00e9c megjelen\u00e9s\u00e9t a navbar.css f\u00e1jlba k\u00e9sz\u00edtse el, amit el\u0151sz\u00f6r l\u00e9tre kell hozni. (A HTML oldal m\u00e1r hivatkozik r\u00e1.) Az oldalon fix fejl\u00e9c tal\u00e1lhat\u00f3 (teh\u00e1t a fejl\u00e9c nem t\u0171nik el, ha kig\u00f6rget\u00fcnk a tartalomb\u00f3l). \u00dcgyeljen r\u00e1, hogy a fejl\u00e9c ne takarja ki az oldal k\u00f6zponti tartalm\u00e1t! (Tipp: padding ) A fejl\u00e9c magass\u00e1ga 60px \u00e9s a h\u00e1ttere bord\u00f3! A log\u00f3 mellett egy 2 elemb\u0151l \u00e1ll\u00f3 men\u00fcsor tal\u00e1lhat\u00f3, ahol az elemek \u00e1tnavig\u00e1lnak rendre az index.html \u00e9s contact.html oldalakra az aktu\u00e1lis oldalr\u00f3l, megnevez\u00e9s\u00fck: F\u0151oldal , Kapcsolat (ezeket az oldalakat nem kell elk\u00e9sz\u00edtenie)! A men\u00fcsort <ul> \u00e9s <li> elemek haszn\u00e1lat\u00e1val struktur\u00e1lja. (Tipp: display: inline-block ) A men\u00fcpontok bet\u0171m\u00e9rete 1.1em legyen, el\u0151t\u00e9rsz\u00edne feh\u00e9r. Az egeret a men\u00fcpontra helyezve (Tipp: :hover pszeudoclass) a h\u00e1tt\u00e9rsz\u00edn valamelyest * t\u00e9tebb\u00e9 v\u00e1lik. A men\u00fcpontok sz\u00f6vege legyen f\u00fcgg\u0151legesen k\u00f6z\u00e9pre igaz\u00edtva. (Tipp: line-height ) A fejl\u00e9cben jobbra igaz\u00edtva tal\u00e1lhat\u00f3 egy Bejelentkez\u00e9s gomb (Tipp: float ). \u00dcgyeljen r\u00e1, hogy g\u00f6rget\u00e9skor a tartalom ne takarja ki a men\u00fcsort! (Tipp: z-index ) BEADAND\u00d3 (1 pont) Demonstr\u00e1lja k\u00e9perny\u0151k\u00e9ppel a megold\u00e1st! f4.1.png","title":"Fejl\u00e9c (1 pont)"},{"location":"laborok/09-css/#fo-hir-megjelenitese-1-pont","text":"A f\u0151 h\u00edr megjelen\u00e9s\u00e9t a news.css f\u00e1jlba k\u00e9sz\u00edtse el, amit el\u0151sz\u00f6r l\u00e9tre kell hozni. (A HTML oldal m\u00e1r hivatkozik r\u00e1.) A kezd\u0151oldalon a legfrissebb h\u00edr jelenik meg. A h\u00edrnek van egy fejl\u00e9ce amiben megtal\u00e1lhat\u00f3 a c\u00edm , szerz\u0151 , szerz\u0151 profil k\u00e9pe , publik\u00e1l\u00e1si d\u00e1tum . Ezeket a csatolt k\u00e9perny\u0151k\u00e9p alapj\u00e1n rendezze \u00e9s form\u00e1zza! A szerz\u0151 profil k\u00e9pe 80px x 80px. Ezek mellett jelenik meg a c\u00edm, a szerz\u0151 neve, \u00e9s a publik\u00e1l\u00e1s d\u00e1tuma. A profilk\u00e9p \u00e9s a sz\u00f6veg k\u00f6z\u00f6tt legyen 10px t\u00e1vols\u00e1g. A c\u00edm, szerz\u0151 neve \u00e9s publik\u00e1l\u00e1s d\u00e1tum\u00e1n\u00e1l \u00fagy \u00e1ll\u00edtsa \u00e1t a bet\u0171m\u00e9retet \u00e9s a marg\u00f3kat, hogy azok olyan magasak legyenek mint a k\u00e9p. A h\u00edr t\u00f6rzse egy bevezet\u0151 , k\u00e9p majd tov\u00e1bbi tartalomb\u00f3l \u00e1ll. A h\u00edrhez tartoz\u00f3 k\u00e9p legyen k\u00f6z\u00e9pre igaz\u00edtva. \u00dcgyeljen arra, hogy a sz\u00f6vegek tartsanak egys\u00e9gesen 16px t\u00e1vols\u00e1got a befoglal\u00f3 elemekt\u0151l. (Tipp: padding ) BEADAND\u00d3 (1 pont) Demonstr\u00e1lja k\u00e9perny\u0151k\u00e9ppel a megold\u00e1st! f4.2.png","title":"F\u0151 h\u00edr megjelen\u00edt\u00e9se (1 pont)"},{"location":"laborok/09-css/#oldalso-sav-1-pont","text":"Az oldals\u00f3 s\u00e1v megjelen\u00edt\u00e9s\u00e9t is a news.css f\u00e1jlba k\u00e9sz\u00edtse el. Az oldal alj\u00e1n tal\u00e1lhat\u00f3 kor\u00e1bbi h\u00edreket rendezze \u00fagy, hogy a f\u0151 h\u00edr jobb oldal\u00e1n jelenjenek meg Az oldals\u00e1v sz\u00e9less\u00e9ge fixen 350px legyen, a f\u0151 h\u00edr pedig a fennmarad\u00f3 helyet t\u00f6ltse ki (Tipp: width: calc(100% - oldals\u00e1g sz\u00e9less\u00e9ge - paddingok) ) Az oldals\u00e1v h\u00e1tt\u00e9rsz\u00edne legyen vil\u00e1gossz\u00fcrke. Ha a f\u0151 h\u00edr magasabb mint az oldals\u00e1v, akkor is \u00e9rjen le az oldals\u00e1v a l\u00e1bl\u00e9cig. (Tipp: position: absolute ) Ha az oldals\u00e1v magasabb, akkor pedig jelenjen meg a scrollbar az oldals\u00e1von. (Tipp: overflow: auto ) Az egyes h\u00edrek k\u00f6z\u00f6tt legyen egy elv\u00e1laszt\u00f3 vonal (Tipp: border-bottom ) \u00dcgyeljen r\u00e1, hogy az utols\u00f3 h\u00edr ut\u00e1n viszont m\u00e1r ne legyen elv\u00e1laszt\u00f3 vonal (Tipp: :last-child ) BEADAND\u00d3 (1 pont) Demonstr\u00e1lja k\u00e9perny\u0151k\u00e9ppel a megold\u00e1st! f4.3.png","title":"Oldals\u00f3 s\u00e1v (1 pont)"},{"location":"laborok/09-css/#reszponzivitas-05-pont","text":"Eg\u00e9sz\u00edtse ki a news.css f\u00e1jlt \u00fagy, hogy ha 900px-n\u00e9l kisebbre \u00e1ll\u00edtjuk az ablakot, akkor a jobb oldali s\u00e1v t\u0171nj\u00f6n el, \u00e9s a teljes oldalt a f\u0151 h\u00edr foglalja el. (Tipp: @media( max-width: 900px ) ) Tippek a megold\u00e1shoz: Haszn\u00e1lja a b\u00f6ng\u00e9sz\u0151 DOM vizualiz\u00e1l\u00f3 eszk\u00f6zt, \u00edgy l\u00e1thatja, hogy a kijel\u00f6lt elemre milyen CSS szab\u00e1lyok illeszkednek. Ha egy elemnek ki kell t\u00f6ltenie a rendelkez\u00e9sre \u00e1ll\u00f3 sz\u00e9less\u00e9get, akkor minden \u0151s\u00e9nek a f\u00e1ban ki kell t\u00f6ltenie a rendelkez\u00e9sre \u00e1ll\u00f3 sz\u00e9less\u00e9get, am\u00edg az sz\u00fcks\u00e9ges. Pl. a width: 100%; csak a k\u00f6zvetlen \u0151sre vonatkozik blokkszint\u0171 elemekn\u00e9l, ha az position: relative vagy nincs be\u00e1ll\u00edtva. Az elrendez\u00e9sn\u00e9l \u00e9rdemes figyelembe venni, hogy a position: absolute; \u00e9rt\u00e9k a DOM-ban az elemhez legk\u00f6zelebbi olyan \u0151sh\u00f6z poz\u00edcion\u00e1l, mely position: relative; . Ezut\u00e1n a top , right , bottom \u00e9s left tulajdons\u00e1gokat tudja be\u00e1ll\u00edtani pl. pixel vagy sz\u00e1zal\u00e9k \u00e9rt\u00e9k alapj\u00e1n, \u00edgy az adott \u0151sh\u00f6z poz\u00edcion\u00e1lja az elemet. Haszn\u00e1lhatja a calc() f\u00fcggv\u00e9nyt, mely egyszer\u0171 konstans \u00e9rt\u00e9kek sz\u00e1m\u00edt\u00e1s\u00e1ra haszn\u00e1lhat\u00f3, pl. width: calc(50% - 100px); . Fontos, hogy a sz\u00e1m\u00edtand\u00f3 \u00e9rt\u00e9kek k\u00f6z\u00f6tt mindenk\u00e9ppen sz\u00fcks\u00e9ges sz\u00f3k\u00f6zt tennie. @media query-ket az and \u00e9s az or logikai oper\u00e1torokkal tud egym\u00e1s ut\u00e1n f\u0171zni, pl. @media screen and (min-width: 200px) {...} , neg\u00e1lni a not kulcssz\u00f3val lehets\u00e9ges. BEADAND\u00d3 (0.5 pont) Demonstr\u00e1lja k\u00e9perny\u0151k\u00e9ppel a megold\u00e1st! f4.4.png","title":"Reszponzivit\u00e1s (0.5 pont)"},{"location":"laborok/10-bootstrap/","text":"Labor 10 - Bootstrap \u00b6 Bevezet\u00e9s \u00b6 A laborok sor\u00e1n a hallgat\u00f3k laborvezet\u0151i seg\u00edts\u00e9ggel, majd \u00f6n\u00e1ll\u00f3an v\u00e9geznek feladatokat a webes technol\u00f3gi\u00e1k gyakorlati megismer\u00e9se \u00e9rdek\u00e9ben. A feladatok megold\u00e1sa sor\u00e1n ne felejtsd el k\u00f6vetni a feladat bead\u00e1s folyamat\u00e1t TODO LINK. Git repository l\u00e9trehoz\u00e1sa \u00e9s projekt ind\u00edt\u00e1sa \u00b6 Moodle-ben keresd meg a laborhoz tartoz\u00f3 megh\u00edv\u00f3 URL-j\u00e9t \u00e9s annak seg\u00edts\u00e9g\u00e9vel hozd l\u00e9tre a saj\u00e1t repository-dat. V\u00e1rd meg, m\u00edg elk\u00e9sz\u00fcl a repository, majd checkout-old ki. Egyetemi laborokban, ha a checkout sor\u00e1n nem k\u00e9r a rendszer felhaszn\u00e1l\u00f3nevet \u00e9s jelsz\u00f3t, \u00e9s nem siker\u00fcl a checkout, akkor val\u00f3sz\u00edn\u0171leg a g\u00e9pen kor\u00e1bban megjegyzett felhaszn\u00e1l\u00f3n\u00e9vvel pr\u00f3b\u00e1lkozott a rendszer. El\u0151sz\u00f6r t\u00f6r\u00f6ld ki a mentett bel\u00e9p\u00e9si adatokat (l\u00e1sd itt), \u00e9s pr\u00f3b\u00e1ld \u00fajra. Hozz l\u00e9tre egy \u00faj \u00e1gat megoldas n\u00e9ven, \u00e9s ezen az \u00e1gon dolgozz. A neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dodat. A f\u00e1jlban semmi m\u00e1s ne szerepeljen, csak egyetlen sorban a Neptun k\u00f3d 6 karaktere. Nyissuk meg a Visual Studio Code-dal a l\u00e9trehozott k\u00f6nyvt\u00e1rat (File -> Open Folder)! Ind\u00edtsuk el a Terminal ( Ctrl+\u00f6 vagy View > Integrated Terminal ) ablakb\u00f3l a http-server-t: http-server Ellen\u0151rizz\u00fck, hogy a megfelel\u0151 k\u00f6nyvt\u00e1rban ind\u00edtottuk-e el a szervert! Feladat 0. - Ismerked\u00e9s a kiindul\u00f3 projekttel \u00b6 A webfejleszt\u00e9sben \u00e1ltal\u00e1nos jelens\u00e9g, hogy a diz\u00e1jnerek csak egy k\u00e9pet k\u00e9sz\u00edtenek el, hogy a fel\u00fcletnek hogyan kell kin\u00e9znie, ami alapj\u00e1n el kell k\u00e9sz\u00edteni a megfelel\u0151 HTML \u00e9s CSS k\u00f3dot a fejleszt\u0151nek. A mai labor alkalm\u00e1val egy ilyen k\u00e9pb\u0151l (\u00e9s egy kicsi HTML v\u00e1z seg\u00edts\u00e9g\u00e9vel) kell az oldalt elk\u00e9sz\u00edteni. A diz\u00e1jnol\u00e1s folyam\u00e1n \u00e1ltal\u00e1ban valamilyen keretrendszerb\u0151l indulunk ki, mely k\u00e9sz megold\u00e1sokat ad a leggyakoribb feladatokra, \u00edgy cs\u00f6kkentve az egyedi CSS mennyis\u00e9g\u00e9t. A Bootstrap k\u00e9t alapvet\u0151 funkci\u00f3t ny\u00fajt: egys\u00e9ges form\u00e1z\u00e1s (gombok, sz\u00ednek) \u00e9s grid alap\u00fa elrendez\u00e9s kiz\u00e1r\u00f3lag CSS-sel, gyakori komponensek (felugr\u00f3 ablakok, k\u00e1rty\u00e1k, nyithat\u00f3-z\u00e1rhat\u00f3 blokkok, kiemel\u00e9sek, panelek) CSS-sel \u00e9s/vagy JavaScriptb\u0151l. A laboron ezekb\u0151l a k\u00e9sz komponensekb\u0151l fogunk megismerni egy p\u00e1rat k\u00f6zelebbr\u0151l is. Bootstrap hozz\u00e1ad\u00e1sa egy HTML oldalhoz \u00b6 Nyissuk meg az index.html f\u00e1jlt, amit a labor sor\u00e1n meg fogunk form\u00e1zni. N\u00e9zz\u00fck meg, hogy az oldal head -j\u00e9ben milyen \u00e1llom\u00e1nyokat \u00e9s honnan t\u00f6lt\u00fcnk be. < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > MyBlog </ title > <!-- Bootstrap linkel\u00e9se CDN-r\u0151l --> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > <!-- Font awesome 5 CDN-r\u0151l (solid, regular \u00e9s brand is) --> < link rel = \"stylesheet\" href = \"https://use.fontawesome.com/releases/v5.15.1/css/all.css\" crossorigin = \"anonymous\" > <!-- Google font (Muli) let\u00f6lt\u00e9se --> < link href = \"https://fonts.googleapis.com/css?family=Muli\" rel = \"stylesheet\" > <!-- Saj\u00e1t CSS --> < link rel = \"stylesheet\" href = \"assets/css/site.css\" > </ head > Figyelj\u00fck meg, hogy n\u00e9gy k\u00fcl\u00f6nb\u00f6z\u0151 CSS \u00e1llom\u00e1nyt t\u00f6lt\u00fcnk be, egy kiv\u00e9tel\u00e9vel CDN-r\u0151l: Az els\u0151 mag\u00e1t a Bootstrap-et t\u00f6lti be. Ezt k\u00f6vet\u0151en egy gyakran haszn\u00e1lt ikongy\u0171jtem\u00e9nyt, a Font Awesome-ot t\u00f6ltj\u00fck le. Ezen fel\u00fcl, mivel egyedi bet\u0171t\u00edpust haszn\u00e1lunk, azt a Google fonts oldal\u00e1r\u00f3l t\u00f6ltj\u00fck le. A legutols\u00f3 hivatkoz\u00e1s pedig az \u00e1ltalunk k\u00e9sz\u00edtett CSS f\u00e1jlt hivatkozza be. Bet\u00f6lt\u00e9si lehet\u0151s\u00e9gek A CSS \u00e9s JS k\u00f6nyvt\u00e1rakat t\u00f6bbf\u00e9lek\u00e9ppen is be tudjuk t\u00f6lteni: CDN-r\u0151l, publikus webr\u0151l t\u00f6lti le a CSS f\u00e1jlt, amit most is haszn\u00e1lunk, van lehet\u0151s\u00e9g\u00fcnk csomagkezel\u0151t (npm, bower) haszn\u00e1lni let\u00f6lt\u00e9sre \u00e9s magunk kiszolg\u00e1lni a f\u00e1jlt, ak\u00e1r saj\u00e1t magunk k\u00e9zzel is let\u00f6lthetj\u00fck a megfelel\u0151 f\u00e1jlokat, ebben az esetben is a saj\u00e1t webszerver\u00fcnk szolg\u00e1lja ki ezeket a f\u00e1jlokat. Ha az alkalmaz\u00e1s elrendez\u00e9s\u00e9t szeretn\u00e9nk megadni, el\u00e9g sok boilerplate-jelleg\u0171 CSS k\u00f3dot kellene \u00edrnunk. A Bootstrap megk\u00f6zel\u00edt\u00e9se, hogy a gyakori elrendez\u00e9si lehet\u0151s\u00e9geket \u00e9s st\u00edlusoz\u00e1si lehet\u0151s\u00e9geket k\u00e9szen \u00e9s konfigur\u00e1lhat\u00f3an adja nek\u00fcnk. A megval\u00f3s\u00edtand\u00f3 oldal az al\u00e1bbi f\u0151bb r\u00e9szekb\u0151l \u00e1ll: navig\u00e1ci\u00f3s s\u00e1v, oldal k\u00f6zponti eleme, ami blogbejegyz\u00e9sek list\u00e1j\u00e1t tartalmazza, l\u00e1bl\u00e9c. Feladat 1 - Navig\u00e1ci\u00f3s s\u00e1v \u00b6 A navig\u00e1ci\u00f3s s\u00e1v fel\u00e9p\u00edt\u00e9se legyen a k\u00f6vetkez\u0151 (a HTML v\u00e1z szerepel a kiindul\u00f3 index.html -ben): bal sz\u00e9len szerepeljen egy a BME AUT logo, ami az assets/img/logo-bme-aut.png \u00fatvonalon \u00e9rhet\u0151 el, ezt k\u00f6vet\u0151en a k\u00e9t navig\u00e1ci\u00f3s link: Home \u00e9s Registration, a s\u00e1v jobb sz\u00e9l\u00e9n pedig egy keres\u00e9s sz\u00f6vegdoboz \u00e9s egy Search felirat\u00fa gomb legyen. A navig\u00e1ci\u00f3s s\u00e1v az al\u00e1bbiak szerint n\u00e9zzen ki magas felbont\u00e1son Mivel a navig\u00e1ci\u00f3 is egy gyakori probl\u00e9ma, a Bootstrap ad r\u00e1 k\u00e9sz komponenst, a **navbar**t. A megval\u00f3s\u00edt\u00e1s el\u0151tt n\u00e9zz\u00fck meg, hogyan \u00e9p\u00fcl fel a Bootstrap navbar komponense. Az oldalon tal\u00e1lunk k\u00e9sz HTML v\u00e1zakat is, amib\u0151l ha a megfelel\u0151t kiv\u00e1lasztva bem\u00e1soljuk a saj\u00e1t k\u00f3dunkba, apr\u00f3 m\u00f3dos\u00edt\u00e1sokkal el tudjuk \u00e9rni a megfelel\u0151 kin\u00e9zetet. A legfontosabb oszt\u00e1lyok, amire a navbar \u00e9p\u00edt: .navbar-brand brand logo megjelen\u00edt\u00e9s\u00e9re. .navbar-nav teljes magass\u00e1g\u00fa egyszer\u0171 navig\u00e1ci\u00f3s elemek megad\u00e1s\u00e1hoz (a leg\u00f6rd\u00fcl\u0151 lista is t\u00e1mogatott). .navbar-toggler mobil n\u00e9zeten el lehessen rejteni a linkeket egy hamburger men\u00fc al\u00e1. .form-inline ha valamilyen form controlt szeretn\u00e9nk a navig\u00e1ci\u00f3s s\u00e1vba tenni. .navbar-text ha f\u00fcgg\u0151legesen k\u00f6z\u00e9pre igaz\u00edtott sz\u00f6veget szeretn\u00e9nk haszn\u00e1lni. .collapse.navbar-collapse elemek csoportos elrejt\u00e9s\u00e9re haszn\u00e1lhat\u00f3. Tip \u00c9rdemes keresni a dokument\u00e1ci\u00f3ban egy ahhoz hasonl\u00f3 megjelen\u00e9st amire nek\u00fcnk is sz\u00fcks\u00e9g\u00fcnk van \u00e9s az ott tal\u00e1lhat\u00f3 HTML k\u00f3dot \u00e1talak\u00edtani a saj\u00e1t ig\u00e9nyeinknek megfelel\u0151en. A s\u00f6t\u00e9t h\u00e1tter\u0171 navbarhoz haszn\u00e1ljuk navbar-dark \u00e9s bg-dark oszt\u00e1lyokat. !!! example \"BEADAND\u00d3 (0.5 pont) K\u00e9sz\u00edtse el a fent ismertetett navig\u00e1ci\u00f3s s\u00e1vot Bootstrap 4 seg\u00edts\u00e9g\u00e9vel. Az elk\u00e9sz\u00fclt navig\u00e1ci\u00f3s s\u00e1vr\u00f3l illesszen be egy k\u00e9perny\u0151k\u00e9pet! ( f1.png ) Feladat 2 - Reszponz\u00edv megjelen\u00e9s \u00b6 A navig\u00e1ci\u00f3t is reszponz\u00edvan kell megval\u00f3s\u00edtani, teh\u00e1t ha \u00e1tm\u00e9retezz\u00fck az oldalt, akkor a navig\u00e1ci\u00f3s men\u00fcpontokat el kell rejteni \u00e9s egy \u00fagynevezett hamburger men\u00fct kell megjelen\u00edteni helyette, amire kattintva megjelennek a men\u00fcpontok. M\u00e9g miel\u0151tt nekiesn\u00e9nk az egyedi megold\u00e1s kital\u00e1l\u00e1s\u00e1ra \u00e9rdemes megn\u00e9zni, hogy a Bootstrap t\u00e1mogatja ezt a funkcionalit\u00e1st is, teh\u00e1t csak a megfelel\u0151 HTML v\u00e1zat kell kikeresni a Bootstrap navbar dokument\u00e1ci\u00f3j\u00e1b\u00f3l \u00e9s az alapj\u00e1n kieg\u00e9sz\u00edteni a k\u00f3dunkat. Tipp: navbar-toggler A k\u00e9sz oldalnak \u00edgy kell kin\u00e9znie. Mobil eszk\u00f6z\u00f6n z\u00e1rva. Mobil eszk\u00f6z\u00f6n lenyitva BEADAND\u00d3 (0.5 pont) Tegye reszponz\u00edvv\u00e1 a navig\u00e1ci\u00f3s men\u00fct a fenti k\u00e9peknek megfelel\u0151en. Az elk\u00e9sz\u00fclt teljes oldalr\u00f3l (ne csak a navig\u00e1ci\u00f3s s\u00e1vr\u00f3l) illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet: mobil n\u00e9zeten, ahol nincs lenyitva a hamburger men\u00fc, ( f2.1.png ) mobil n\u00e9zeten, ahol le van nyitva a hamburger men\u00fc, ( f2.2.png ) nem mobil n\u00e9zeten. ( f2.3.png ) Feladat 2 iMSc - Navig\u00e1ci\u00f3s s\u00e1vban szab\u00e1lyok fel\u00fcldefini\u00e1l\u00e1sa \u00b6 A navig\u00e1ci\u00f3s men\u00fcben a linkek feh\u00e9r sz\u00edn\u0171ek, hiszen a Bootstrap erre \u00e1ll\u00edtja be. Defini\u00e1lja fel\u00fcl a Bootstrapben megadott men\u00fcpont sz\u00edneket a site.css-ben \u00fagy, hogy azok z\u00f6ldek legyenek \u00e9s ha egy men\u00fcpont f\u00f6l\u00e9 vissz\u00fck az egeret, akkor v\u00e1ltson s\u00f6t\u00e9tz\u00f6ldre. Az !important kulcssz\u00f3t nem haszn\u00e1lhatja! iMSc BEADAND\u00d3 (1 iMSc pont) Illesszen be egy k\u00e9perny\u0151k\u00e9pet a b\u00f6ng\u00e9sz\u0151 devTool (F12) ablak\u00e1r\u00f3l, amin l\u00e1that\u00f3, hogy milyen CSS oszt\u00e1ly hat\u00e1rozza meg most az egyes men\u00fcpontok (pl.: Home) bet\u0171sz\u00edn\u00e9t. Tipp: haszn\u00e1lja a Computed tabf\u00fclet. ( f2.imsc1.png ) A k\u00e9sz megold\u00e1sr\u00f3l csatoljon egy k\u00e9perny\u0151k\u00e9pet. ( f2.imsc2.png ) Feladat 3 - Egy k\u00e1rtya (blog bejegyz\u00e9s) form\u00e1z\u00e1sa \u00b6 A navig\u00e1ci\u00f3 ut\u00e1n t\u00e9rj\u00fcnk \u00e1t a f\u0151 tartalmi elemre, a blog bejegyz\u00e9sre. El\u0151sz\u00f6r csak egy bejegyz\u00e9st form\u00e1zzunk meg. A blog post HTML v\u00e1za m\u00e1r szerepel az index oldalon, ezt kell kieg\u00e9sz\u00edteni a megfelel\u0151 Bootstrap oszt\u00e1lyokkal \u00e9s helyenk\u00e9nt k\u00e9sz\u00edteni egy-egy CSS szab\u00e1lyt, amivel kieg\u00e9sz\u00edtj\u00fck a Bootstrap-es oszt\u00e1lyokat. A megold\u00e1shoz haszn\u00e1ljuk a Bootstrap card -j\u00e1t. Mivel majd t\u00f6bb k\u00e1rtya ker\u00fcl egym\u00e1s mell\u00e9 a sz\u00e9less\u00e9get a grid oszlopaihoz haszn\u00e1lt col-x seg\u00edts\u00e9g\u00e9vel adjuk meg. A k\u00e9p igaz\u00edt\u00e1s\u00e1hoz haszn\u00e1ljuk a card-img-top oszt\u00e1lyt A sz\u00f6veges r\u00e9sz legyen a k\u00e1rtya t\u00f6rzse card-body A c\u00edmhez a card-title oszt\u00e1lyt haszn\u00e1ljuk Az egy\u00e9b adatok pedig a k\u00e1rtya l\u00e1bl\u00e9c\u00e9ben card-footer jelenjenek meg a l\u00e1bl\u00e9c f\u00f6l\u00f6tti vonal legyen szaggatott, a bet\u0171m\u00e9ret 12px, a h\u00e1tt\u00e9rsz\u00edn \u00e1tl\u00e1tsz\u00f3, a l\u00e1bl\u00e9cben szerepl\u0151 linkek legyenek sz\u00fcrk\u00e9k \u00e9s ha f\u00f6l\u00e9 vissz\u00fck az egeret akkor z\u00f6ldek, de ne legyen al\u00e1h\u00fazva. Az ikonok mindig legyenek z\u00f6ldek. Tipp: A l\u00e1bl\u00e9chez \u00e9rdemes egyedi CSS oszt\u00e1ly(oka)t is defini\u00e1lni. \u00dcgyeljen arra, hogy a marg\u00f3k \u00e9s paddingok hasonl\u00f3ak legyenek. Tipp: haszn\u00e1lja a m-0 , py-2 .... oszt\u00e1lyokat. R\u00e9szletesen a Bootstrap spacing szekci\u00f3ban lehet r\u00f3la olvasni. Az egyes blog bejegyz\u00e9seknek, az al\u00e1bbi k\u00e9pen l\u00e1that\u00f3 m\u00f3don kell megjelennie: BEADAND\u00d3 (1 pont) Illesszen be egy k\u00e9perny\u0151k\u00e9pet a teljes oldalr\u00f3l, amin l\u00e1that\u00f3 az elk\u00e9sz\u00edtett blogpost megform\u00e1zva. ( f3.png ) Feladat 4 - Reszponz\u00edv blog bejegyz\u00e9s lista \u00b6 Eg\u00e9sz\u00edtse ki a HTML k\u00f3dot \u00fagy, hogy az oldalon \u00f6sszesen 6 blogbejegyz\u00e9s jelenjen meg. Az egyes bejegyz\u00e9sek minden adata lehet azonos, csak a k\u00e9peket cser\u00e9lje le. A k\u00e9peket az assets/img k\u00f6nyvt\u00e1rban tal\u00e1lja. Haszn\u00e1lja a Bootstrap \u00e1ltal defini\u00e1lt alap\u00e9rtelmezetten 12 has\u00e1bos grid rendszert . Az oldalt \u00fagy val\u00f3s\u00edtsa meg, hogy magas felbont\u00e1son 3 has\u00e1bos legyen, k\u00f6zepesen 2, kicsin pedig 1 has\u00e1bos. Magas felbont\u00e1son K\u00f6zepes felbont\u00e1son Kicsi felbont\u00e1son BEADAND\u00d3 (1 pont) Illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet mindh\u00e1rom felbont\u00e1son, a teljes oldalr\u00f3l. ( f4.png ) Feladat 5 - Oldal l\u00e1bl\u00e9c elk\u00e9sz\u00edt\u00e9se \u00b6 A l\u00e1bl\u00e9c elk\u00e9sz\u00edt\u00e9sekor a footerben egyedi CSS oszt\u00e1lyban adja meg, hogy fekete legyen a h\u00e1tt\u00e9r \u00e9s feh\u00e9r a bet\u0171sz\u00edn. Ezen fel\u00fcl adjon meg megfelel\u0151 m\u00e9ret\u0171 paddingot, amihez haszn\u00e1lhatja a p-4 CSS oszt\u00e1lyt illetve annak egy\u00e9b v\u00e1ltozatait. R\u00e9szletes le\u00edr\u00e1s a Bootstrap spacing fejezetben tal\u00e1lhat\u00f3. A copyright sz\u00f6veg ker\u00fclj\u00f6n balra, az ikonok pedig jobbra. Ehhez a flexboxot haszn\u00e1lja. \u00dcgyeljen arra, hogy az egyes ikonok m\u00e9rete \u00e9s t\u00e1vols\u00e1ga is megfelel\u0151 legyen. BEADAND\u00d3 (0.5 pont) Illesszen be egy k\u00e9perny\u0151k\u00e9pet az elk\u00e9sz\u00edtett l\u00e1bl\u00e9cr\u0151l. ( f5.png ) Feladat 5 iMSc - L\u00e1bl\u00e9c igaz\u00edt\u00e1sa az oldal alj\u00e1ra \u00b6 Dolgozzon ki megold\u00e1st arra, hogy az oldal l\u00e1bl\u00e9ce mindig a l\u00e1that\u00f3 k\u00e9perny\u0151 alj\u00e1n legyen. Akkor is ha az oldalon kev\u00e9s a tartalom \u00e9s akkor is ha scrollozni kell az oldalon Soha ne takarjon ki tartalmi r\u00e9szt. Tipp: a megold\u00e1shoz haszn\u00e1lhatja a calc f\u00fcggv\u00e9nyt a magass\u00e1g sz\u00e1m\u00edt\u00e1s\u00e1hoz, vagy ak\u00e1r a flexboxot is. iMSc BEADAND\u00d3 (0.5 iMSc pont) Illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet a teljes oldalr\u00f3l amikor azon kell scrollozni ( f5.imsc1.png ), illetve akkor is, amikor csak kev\u00e9s tartalom van rajta ( f5.imsc2.png ). (A kev\u00e9s tartalomhoz kommentezze ki a k\u00e1rty\u00e1k egy r\u00e9sz\u00e9t.) Feladat 6 - Regisztr\u00e1ci\u00f3s \u0171rlap l\u00e9trehoz\u00e1sa \u00b6 Az elk\u00e9sz\u00edtett oldal tetej\u00e9n tal\u00e1lhat\u00f3 egy Register felirat\u00fa link, ami a register.html oldalra ir\u00e1ny\u00edt. A feladat ennek az oldalnak az elk\u00e9sz\u00edt\u00e9se. Az oldal fejl\u00e9c \u00e9s l\u00e1bl\u00e9c r\u00e9sze v\u00e1ltozatlan, teh\u00e1t azt m\u00e1solja \u00e1t a megl\u00e9v\u0151 index.html oldalr\u00f3l. Csak a navig\u00e1ci\u00f3 ut\u00e1ni r\u00e9sz fog v\u00e1ltozni. Az oldalon egy \u0171rlapot kell k\u00e9sz\u00edteni, ahol a felhaszn\u00e1l\u00f3t\u00f3 bek\u00e9rj\u00fck a k\u00f6vetkez\u0151 al\u00e1bbi adatokat: Email c\u00edm , Password , Address , City , State (Tipp: select ), ZIP . Az \u0171rlap v\u00e9g\u00e9n legyen egy checkbox, hogy elfogadja a felt\u00e9teleket illetve egy Sign in felirat\u00fa gomb, ami elk\u00fcldi az \u0171rlapot. Az inputok l\u00e9trehoz\u00e1s\u00e1n\u00e1l \u00fcgyeljen mindig a megfelel\u0151 t\u00edpus haszn\u00e1lat\u00e1ra. A sz\u00f6vegdobozokba tegyen placeholder sz\u00f6veget is. Az al\u00e1bbi k\u00e9pen l\u00e1that\u00f3 elrendez\u00e9st val\u00f3s\u00edtja meg. Ellen\u0151rizze, hogy az oldal kis k\u00e9perny\u0151 m\u00e9reten az al\u00e1bbi elrendez\u00e9sben jelenik-e meg. Ha nem, akkor jav\u00edtsa a k\u00f3dot, hogy az al\u00e1bbi kin\u00e9zetet kapja. BEADAND\u00d3 (1.5 pont) Illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet az elk\u00e9sz\u00edtett oldalr\u00f3l kicsi ( f6.1.png ) \u00e9s magas ( f6.2.png ) felbont\u00e1son is. Feladat 6 iMSc - Regisztr\u00e1ci\u00f3 \u0171rlap k\u00f6z\u00e9pre igaz\u00edt\u00e1sa \u00e9s placeholder design \u00b6 Flexbox seg\u00edts\u00e9g\u00e9vel igaz\u00edtsa a regisztr\u00e1ci\u00f3s \u0171rlapot f\u00fcgg\u0151legesen k\u00f6z\u00e9pre. Defini\u00e1lja fel\u00fcl a placeholder sz\u00f6vegek megjelen\u00edt\u00e9s\u00e9t is. Legyen piros d\u0151lt bet\u0171 a placeholder mindenhol. Tipp: ::placeholder iMSc BEADAND\u00d3 (0.5 iMSc pont) Illesszen be az elk\u00e9sz\u00edtett teljes oldalr\u00f3l egy k\u00e9perny\u0151k\u00e9pet, ahol a placeholderek is l\u00e1that\u00f3ak. ( f6.imsc.png )","title":"Labor 10 - Bootstrap"},{"location":"laborok/10-bootstrap/#labor-10-bootstrap","text":"","title":"Labor 10 - Bootstrap"},{"location":"laborok/10-bootstrap/#bevezetes","text":"A laborok sor\u00e1n a hallgat\u00f3k laborvezet\u0151i seg\u00edts\u00e9ggel, majd \u00f6n\u00e1ll\u00f3an v\u00e9geznek feladatokat a webes technol\u00f3gi\u00e1k gyakorlati megismer\u00e9se \u00e9rdek\u00e9ben. A feladatok megold\u00e1sa sor\u00e1n ne felejtsd el k\u00f6vetni a feladat bead\u00e1s folyamat\u00e1t TODO LINK.","title":"Bevezet\u00e9s"},{"location":"laborok/10-bootstrap/#git-repository-letrehozasa-es-projekt-inditasa","text":"Moodle-ben keresd meg a laborhoz tartoz\u00f3 megh\u00edv\u00f3 URL-j\u00e9t \u00e9s annak seg\u00edts\u00e9g\u00e9vel hozd l\u00e9tre a saj\u00e1t repository-dat. V\u00e1rd meg, m\u00edg elk\u00e9sz\u00fcl a repository, majd checkout-old ki. Egyetemi laborokban, ha a checkout sor\u00e1n nem k\u00e9r a rendszer felhaszn\u00e1l\u00f3nevet \u00e9s jelsz\u00f3t, \u00e9s nem siker\u00fcl a checkout, akkor val\u00f3sz\u00edn\u0171leg a g\u00e9pen kor\u00e1bban megjegyzett felhaszn\u00e1l\u00f3n\u00e9vvel pr\u00f3b\u00e1lkozott a rendszer. El\u0151sz\u00f6r t\u00f6r\u00f6ld ki a mentett bel\u00e9p\u00e9si adatokat (l\u00e1sd itt), \u00e9s pr\u00f3b\u00e1ld \u00fajra. Hozz l\u00e9tre egy \u00faj \u00e1gat megoldas n\u00e9ven, \u00e9s ezen az \u00e1gon dolgozz. A neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dodat. A f\u00e1jlban semmi m\u00e1s ne szerepeljen, csak egyetlen sorban a Neptun k\u00f3d 6 karaktere. Nyissuk meg a Visual Studio Code-dal a l\u00e9trehozott k\u00f6nyvt\u00e1rat (File -> Open Folder)! Ind\u00edtsuk el a Terminal ( Ctrl+\u00f6 vagy View > Integrated Terminal ) ablakb\u00f3l a http-server-t: http-server Ellen\u0151rizz\u00fck, hogy a megfelel\u0151 k\u00f6nyvt\u00e1rban ind\u00edtottuk-e el a szervert!","title":"Git repository l\u00e9trehoz\u00e1sa \u00e9s projekt ind\u00edt\u00e1sa"},{"location":"laborok/10-bootstrap/#feladat-0-ismerkedes-a-kiindulo-projekttel","text":"A webfejleszt\u00e9sben \u00e1ltal\u00e1nos jelens\u00e9g, hogy a diz\u00e1jnerek csak egy k\u00e9pet k\u00e9sz\u00edtenek el, hogy a fel\u00fcletnek hogyan kell kin\u00e9znie, ami alapj\u00e1n el kell k\u00e9sz\u00edteni a megfelel\u0151 HTML \u00e9s CSS k\u00f3dot a fejleszt\u0151nek. A mai labor alkalm\u00e1val egy ilyen k\u00e9pb\u0151l (\u00e9s egy kicsi HTML v\u00e1z seg\u00edts\u00e9g\u00e9vel) kell az oldalt elk\u00e9sz\u00edteni. A diz\u00e1jnol\u00e1s folyam\u00e1n \u00e1ltal\u00e1ban valamilyen keretrendszerb\u0151l indulunk ki, mely k\u00e9sz megold\u00e1sokat ad a leggyakoribb feladatokra, \u00edgy cs\u00f6kkentve az egyedi CSS mennyis\u00e9g\u00e9t. A Bootstrap k\u00e9t alapvet\u0151 funkci\u00f3t ny\u00fajt: egys\u00e9ges form\u00e1z\u00e1s (gombok, sz\u00ednek) \u00e9s grid alap\u00fa elrendez\u00e9s kiz\u00e1r\u00f3lag CSS-sel, gyakori komponensek (felugr\u00f3 ablakok, k\u00e1rty\u00e1k, nyithat\u00f3-z\u00e1rhat\u00f3 blokkok, kiemel\u00e9sek, panelek) CSS-sel \u00e9s/vagy JavaScriptb\u0151l. A laboron ezekb\u0151l a k\u00e9sz komponensekb\u0151l fogunk megismerni egy p\u00e1rat k\u00f6zelebbr\u0151l is.","title":"Feladat 0. - Ismerked\u00e9s a kiindul\u00f3 projekttel"},{"location":"laborok/10-bootstrap/#bootstrap-hozzaadasa-egy-html-oldalhoz","text":"Nyissuk meg az index.html f\u00e1jlt, amit a labor sor\u00e1n meg fogunk form\u00e1zni. N\u00e9zz\u00fck meg, hogy az oldal head -j\u00e9ben milyen \u00e1llom\u00e1nyokat \u00e9s honnan t\u00f6lt\u00fcnk be. < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > MyBlog </ title > <!-- Bootstrap linkel\u00e9se CDN-r\u0151l --> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > <!-- Font awesome 5 CDN-r\u0151l (solid, regular \u00e9s brand is) --> < link rel = \"stylesheet\" href = \"https://use.fontawesome.com/releases/v5.15.1/css/all.css\" crossorigin = \"anonymous\" > <!-- Google font (Muli) let\u00f6lt\u00e9se --> < link href = \"https://fonts.googleapis.com/css?family=Muli\" rel = \"stylesheet\" > <!-- Saj\u00e1t CSS --> < link rel = \"stylesheet\" href = \"assets/css/site.css\" > </ head > Figyelj\u00fck meg, hogy n\u00e9gy k\u00fcl\u00f6nb\u00f6z\u0151 CSS \u00e1llom\u00e1nyt t\u00f6lt\u00fcnk be, egy kiv\u00e9tel\u00e9vel CDN-r\u0151l: Az els\u0151 mag\u00e1t a Bootstrap-et t\u00f6lti be. Ezt k\u00f6vet\u0151en egy gyakran haszn\u00e1lt ikongy\u0171jtem\u00e9nyt, a Font Awesome-ot t\u00f6ltj\u00fck le. Ezen fel\u00fcl, mivel egyedi bet\u0171t\u00edpust haszn\u00e1lunk, azt a Google fonts oldal\u00e1r\u00f3l t\u00f6ltj\u00fck le. A legutols\u00f3 hivatkoz\u00e1s pedig az \u00e1ltalunk k\u00e9sz\u00edtett CSS f\u00e1jlt hivatkozza be. Bet\u00f6lt\u00e9si lehet\u0151s\u00e9gek A CSS \u00e9s JS k\u00f6nyvt\u00e1rakat t\u00f6bbf\u00e9lek\u00e9ppen is be tudjuk t\u00f6lteni: CDN-r\u0151l, publikus webr\u0151l t\u00f6lti le a CSS f\u00e1jlt, amit most is haszn\u00e1lunk, van lehet\u0151s\u00e9g\u00fcnk csomagkezel\u0151t (npm, bower) haszn\u00e1lni let\u00f6lt\u00e9sre \u00e9s magunk kiszolg\u00e1lni a f\u00e1jlt, ak\u00e1r saj\u00e1t magunk k\u00e9zzel is let\u00f6lthetj\u00fck a megfelel\u0151 f\u00e1jlokat, ebben az esetben is a saj\u00e1t webszerver\u00fcnk szolg\u00e1lja ki ezeket a f\u00e1jlokat. Ha az alkalmaz\u00e1s elrendez\u00e9s\u00e9t szeretn\u00e9nk megadni, el\u00e9g sok boilerplate-jelleg\u0171 CSS k\u00f3dot kellene \u00edrnunk. A Bootstrap megk\u00f6zel\u00edt\u00e9se, hogy a gyakori elrendez\u00e9si lehet\u0151s\u00e9geket \u00e9s st\u00edlusoz\u00e1si lehet\u0151s\u00e9geket k\u00e9szen \u00e9s konfigur\u00e1lhat\u00f3an adja nek\u00fcnk. A megval\u00f3s\u00edtand\u00f3 oldal az al\u00e1bbi f\u0151bb r\u00e9szekb\u0151l \u00e1ll: navig\u00e1ci\u00f3s s\u00e1v, oldal k\u00f6zponti eleme, ami blogbejegyz\u00e9sek list\u00e1j\u00e1t tartalmazza, l\u00e1bl\u00e9c.","title":"Bootstrap hozz\u00e1ad\u00e1sa egy HTML oldalhoz"},{"location":"laborok/10-bootstrap/#feladat-1-navigacios-sav","text":"A navig\u00e1ci\u00f3s s\u00e1v fel\u00e9p\u00edt\u00e9se legyen a k\u00f6vetkez\u0151 (a HTML v\u00e1z szerepel a kiindul\u00f3 index.html -ben): bal sz\u00e9len szerepeljen egy a BME AUT logo, ami az assets/img/logo-bme-aut.png \u00fatvonalon \u00e9rhet\u0151 el, ezt k\u00f6vet\u0151en a k\u00e9t navig\u00e1ci\u00f3s link: Home \u00e9s Registration, a s\u00e1v jobb sz\u00e9l\u00e9n pedig egy keres\u00e9s sz\u00f6vegdoboz \u00e9s egy Search felirat\u00fa gomb legyen. A navig\u00e1ci\u00f3s s\u00e1v az al\u00e1bbiak szerint n\u00e9zzen ki magas felbont\u00e1son Mivel a navig\u00e1ci\u00f3 is egy gyakori probl\u00e9ma, a Bootstrap ad r\u00e1 k\u00e9sz komponenst, a **navbar**t. A megval\u00f3s\u00edt\u00e1s el\u0151tt n\u00e9zz\u00fck meg, hogyan \u00e9p\u00fcl fel a Bootstrap navbar komponense. Az oldalon tal\u00e1lunk k\u00e9sz HTML v\u00e1zakat is, amib\u0151l ha a megfelel\u0151t kiv\u00e1lasztva bem\u00e1soljuk a saj\u00e1t k\u00f3dunkba, apr\u00f3 m\u00f3dos\u00edt\u00e1sokkal el tudjuk \u00e9rni a megfelel\u0151 kin\u00e9zetet. A legfontosabb oszt\u00e1lyok, amire a navbar \u00e9p\u00edt: .navbar-brand brand logo megjelen\u00edt\u00e9s\u00e9re. .navbar-nav teljes magass\u00e1g\u00fa egyszer\u0171 navig\u00e1ci\u00f3s elemek megad\u00e1s\u00e1hoz (a leg\u00f6rd\u00fcl\u0151 lista is t\u00e1mogatott). .navbar-toggler mobil n\u00e9zeten el lehessen rejteni a linkeket egy hamburger men\u00fc al\u00e1. .form-inline ha valamilyen form controlt szeretn\u00e9nk a navig\u00e1ci\u00f3s s\u00e1vba tenni. .navbar-text ha f\u00fcgg\u0151legesen k\u00f6z\u00e9pre igaz\u00edtott sz\u00f6veget szeretn\u00e9nk haszn\u00e1lni. .collapse.navbar-collapse elemek csoportos elrejt\u00e9s\u00e9re haszn\u00e1lhat\u00f3. Tip \u00c9rdemes keresni a dokument\u00e1ci\u00f3ban egy ahhoz hasonl\u00f3 megjelen\u00e9st amire nek\u00fcnk is sz\u00fcks\u00e9g\u00fcnk van \u00e9s az ott tal\u00e1lhat\u00f3 HTML k\u00f3dot \u00e1talak\u00edtani a saj\u00e1t ig\u00e9nyeinknek megfelel\u0151en. A s\u00f6t\u00e9t h\u00e1tter\u0171 navbarhoz haszn\u00e1ljuk navbar-dark \u00e9s bg-dark oszt\u00e1lyokat. !!! example \"BEADAND\u00d3 (0.5 pont) K\u00e9sz\u00edtse el a fent ismertetett navig\u00e1ci\u00f3s s\u00e1vot Bootstrap 4 seg\u00edts\u00e9g\u00e9vel. Az elk\u00e9sz\u00fclt navig\u00e1ci\u00f3s s\u00e1vr\u00f3l illesszen be egy k\u00e9perny\u0151k\u00e9pet! ( f1.png )","title":"Feladat 1 - Navig\u00e1ci\u00f3s s\u00e1v"},{"location":"laborok/10-bootstrap/#feladat-2-reszponziv-megjelenes","text":"A navig\u00e1ci\u00f3t is reszponz\u00edvan kell megval\u00f3s\u00edtani, teh\u00e1t ha \u00e1tm\u00e9retezz\u00fck az oldalt, akkor a navig\u00e1ci\u00f3s men\u00fcpontokat el kell rejteni \u00e9s egy \u00fagynevezett hamburger men\u00fct kell megjelen\u00edteni helyette, amire kattintva megjelennek a men\u00fcpontok. M\u00e9g miel\u0151tt nekiesn\u00e9nk az egyedi megold\u00e1s kital\u00e1l\u00e1s\u00e1ra \u00e9rdemes megn\u00e9zni, hogy a Bootstrap t\u00e1mogatja ezt a funkcionalit\u00e1st is, teh\u00e1t csak a megfelel\u0151 HTML v\u00e1zat kell kikeresni a Bootstrap navbar dokument\u00e1ci\u00f3j\u00e1b\u00f3l \u00e9s az alapj\u00e1n kieg\u00e9sz\u00edteni a k\u00f3dunkat. Tipp: navbar-toggler A k\u00e9sz oldalnak \u00edgy kell kin\u00e9znie. Mobil eszk\u00f6z\u00f6n z\u00e1rva. Mobil eszk\u00f6z\u00f6n lenyitva BEADAND\u00d3 (0.5 pont) Tegye reszponz\u00edvv\u00e1 a navig\u00e1ci\u00f3s men\u00fct a fenti k\u00e9peknek megfelel\u0151en. Az elk\u00e9sz\u00fclt teljes oldalr\u00f3l (ne csak a navig\u00e1ci\u00f3s s\u00e1vr\u00f3l) illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet: mobil n\u00e9zeten, ahol nincs lenyitva a hamburger men\u00fc, ( f2.1.png ) mobil n\u00e9zeten, ahol le van nyitva a hamburger men\u00fc, ( f2.2.png ) nem mobil n\u00e9zeten. ( f2.3.png )","title":"Feladat 2 - Reszponz\u00edv megjelen\u00e9s"},{"location":"laborok/10-bootstrap/#feladat-2-imsc-navigacios-savban-szabalyok-feluldefinialasa","text":"A navig\u00e1ci\u00f3s men\u00fcben a linkek feh\u00e9r sz\u00edn\u0171ek, hiszen a Bootstrap erre \u00e1ll\u00edtja be. Defini\u00e1lja fel\u00fcl a Bootstrapben megadott men\u00fcpont sz\u00edneket a site.css-ben \u00fagy, hogy azok z\u00f6ldek legyenek \u00e9s ha egy men\u00fcpont f\u00f6l\u00e9 vissz\u00fck az egeret, akkor v\u00e1ltson s\u00f6t\u00e9tz\u00f6ldre. Az !important kulcssz\u00f3t nem haszn\u00e1lhatja! iMSc BEADAND\u00d3 (1 iMSc pont) Illesszen be egy k\u00e9perny\u0151k\u00e9pet a b\u00f6ng\u00e9sz\u0151 devTool (F12) ablak\u00e1r\u00f3l, amin l\u00e1that\u00f3, hogy milyen CSS oszt\u00e1ly hat\u00e1rozza meg most az egyes men\u00fcpontok (pl.: Home) bet\u0171sz\u00edn\u00e9t. Tipp: haszn\u00e1lja a Computed tabf\u00fclet. ( f2.imsc1.png ) A k\u00e9sz megold\u00e1sr\u00f3l csatoljon egy k\u00e9perny\u0151k\u00e9pet. ( f2.imsc2.png )","title":"Feladat 2 iMSc - Navig\u00e1ci\u00f3s s\u00e1vban szab\u00e1lyok fel\u00fcldefini\u00e1l\u00e1sa"},{"location":"laborok/10-bootstrap/#feladat-3-egy-kartya-blog-bejegyzes-formazasa","text":"A navig\u00e1ci\u00f3 ut\u00e1n t\u00e9rj\u00fcnk \u00e1t a f\u0151 tartalmi elemre, a blog bejegyz\u00e9sre. El\u0151sz\u00f6r csak egy bejegyz\u00e9st form\u00e1zzunk meg. A blog post HTML v\u00e1za m\u00e1r szerepel az index oldalon, ezt kell kieg\u00e9sz\u00edteni a megfelel\u0151 Bootstrap oszt\u00e1lyokkal \u00e9s helyenk\u00e9nt k\u00e9sz\u00edteni egy-egy CSS szab\u00e1lyt, amivel kieg\u00e9sz\u00edtj\u00fck a Bootstrap-es oszt\u00e1lyokat. A megold\u00e1shoz haszn\u00e1ljuk a Bootstrap card -j\u00e1t. Mivel majd t\u00f6bb k\u00e1rtya ker\u00fcl egym\u00e1s mell\u00e9 a sz\u00e9less\u00e9get a grid oszlopaihoz haszn\u00e1lt col-x seg\u00edts\u00e9g\u00e9vel adjuk meg. A k\u00e9p igaz\u00edt\u00e1s\u00e1hoz haszn\u00e1ljuk a card-img-top oszt\u00e1lyt A sz\u00f6veges r\u00e9sz legyen a k\u00e1rtya t\u00f6rzse card-body A c\u00edmhez a card-title oszt\u00e1lyt haszn\u00e1ljuk Az egy\u00e9b adatok pedig a k\u00e1rtya l\u00e1bl\u00e9c\u00e9ben card-footer jelenjenek meg a l\u00e1bl\u00e9c f\u00f6l\u00f6tti vonal legyen szaggatott, a bet\u0171m\u00e9ret 12px, a h\u00e1tt\u00e9rsz\u00edn \u00e1tl\u00e1tsz\u00f3, a l\u00e1bl\u00e9cben szerepl\u0151 linkek legyenek sz\u00fcrk\u00e9k \u00e9s ha f\u00f6l\u00e9 vissz\u00fck az egeret akkor z\u00f6ldek, de ne legyen al\u00e1h\u00fazva. Az ikonok mindig legyenek z\u00f6ldek. Tipp: A l\u00e1bl\u00e9chez \u00e9rdemes egyedi CSS oszt\u00e1ly(oka)t is defini\u00e1lni. \u00dcgyeljen arra, hogy a marg\u00f3k \u00e9s paddingok hasonl\u00f3ak legyenek. Tipp: haszn\u00e1lja a m-0 , py-2 .... oszt\u00e1lyokat. R\u00e9szletesen a Bootstrap spacing szekci\u00f3ban lehet r\u00f3la olvasni. Az egyes blog bejegyz\u00e9seknek, az al\u00e1bbi k\u00e9pen l\u00e1that\u00f3 m\u00f3don kell megjelennie: BEADAND\u00d3 (1 pont) Illesszen be egy k\u00e9perny\u0151k\u00e9pet a teljes oldalr\u00f3l, amin l\u00e1that\u00f3 az elk\u00e9sz\u00edtett blogpost megform\u00e1zva. ( f3.png )","title":"Feladat 3 - Egy k\u00e1rtya (blog bejegyz\u00e9s) form\u00e1z\u00e1sa"},{"location":"laborok/10-bootstrap/#feladat-4-reszponziv-blog-bejegyzes-lista","text":"Eg\u00e9sz\u00edtse ki a HTML k\u00f3dot \u00fagy, hogy az oldalon \u00f6sszesen 6 blogbejegyz\u00e9s jelenjen meg. Az egyes bejegyz\u00e9sek minden adata lehet azonos, csak a k\u00e9peket cser\u00e9lje le. A k\u00e9peket az assets/img k\u00f6nyvt\u00e1rban tal\u00e1lja. Haszn\u00e1lja a Bootstrap \u00e1ltal defini\u00e1lt alap\u00e9rtelmezetten 12 has\u00e1bos grid rendszert . Az oldalt \u00fagy val\u00f3s\u00edtsa meg, hogy magas felbont\u00e1son 3 has\u00e1bos legyen, k\u00f6zepesen 2, kicsin pedig 1 has\u00e1bos. Magas felbont\u00e1son K\u00f6zepes felbont\u00e1son Kicsi felbont\u00e1son BEADAND\u00d3 (1 pont) Illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet mindh\u00e1rom felbont\u00e1son, a teljes oldalr\u00f3l. ( f4.png )","title":"Feladat 4 - Reszponz\u00edv blog bejegyz\u00e9s lista"},{"location":"laborok/10-bootstrap/#feladat-5-oldal-lablec-elkeszitese","text":"A l\u00e1bl\u00e9c elk\u00e9sz\u00edt\u00e9sekor a footerben egyedi CSS oszt\u00e1lyban adja meg, hogy fekete legyen a h\u00e1tt\u00e9r \u00e9s feh\u00e9r a bet\u0171sz\u00edn. Ezen fel\u00fcl adjon meg megfelel\u0151 m\u00e9ret\u0171 paddingot, amihez haszn\u00e1lhatja a p-4 CSS oszt\u00e1lyt illetve annak egy\u00e9b v\u00e1ltozatait. R\u00e9szletes le\u00edr\u00e1s a Bootstrap spacing fejezetben tal\u00e1lhat\u00f3. A copyright sz\u00f6veg ker\u00fclj\u00f6n balra, az ikonok pedig jobbra. Ehhez a flexboxot haszn\u00e1lja. \u00dcgyeljen arra, hogy az egyes ikonok m\u00e9rete \u00e9s t\u00e1vols\u00e1ga is megfelel\u0151 legyen. BEADAND\u00d3 (0.5 pont) Illesszen be egy k\u00e9perny\u0151k\u00e9pet az elk\u00e9sz\u00edtett l\u00e1bl\u00e9cr\u0151l. ( f5.png )","title":"Feladat 5 - Oldal l\u00e1bl\u00e9c elk\u00e9sz\u00edt\u00e9se"},{"location":"laborok/10-bootstrap/#feladat-5-imsc-lablec-igazitasa-az-oldal-aljara","text":"Dolgozzon ki megold\u00e1st arra, hogy az oldal l\u00e1bl\u00e9ce mindig a l\u00e1that\u00f3 k\u00e9perny\u0151 alj\u00e1n legyen. Akkor is ha az oldalon kev\u00e9s a tartalom \u00e9s akkor is ha scrollozni kell az oldalon Soha ne takarjon ki tartalmi r\u00e9szt. Tipp: a megold\u00e1shoz haszn\u00e1lhatja a calc f\u00fcggv\u00e9nyt a magass\u00e1g sz\u00e1m\u00edt\u00e1s\u00e1hoz, vagy ak\u00e1r a flexboxot is. iMSc BEADAND\u00d3 (0.5 iMSc pont) Illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet a teljes oldalr\u00f3l amikor azon kell scrollozni ( f5.imsc1.png ), illetve akkor is, amikor csak kev\u00e9s tartalom van rajta ( f5.imsc2.png ). (A kev\u00e9s tartalomhoz kommentezze ki a k\u00e1rty\u00e1k egy r\u00e9sz\u00e9t.)","title":"Feladat 5 iMSc - L\u00e1bl\u00e9c igaz\u00edt\u00e1sa az oldal alj\u00e1ra"},{"location":"laborok/10-bootstrap/#feladat-6-regisztracios-urlap-letrehozasa","text":"Az elk\u00e9sz\u00edtett oldal tetej\u00e9n tal\u00e1lhat\u00f3 egy Register felirat\u00fa link, ami a register.html oldalra ir\u00e1ny\u00edt. A feladat ennek az oldalnak az elk\u00e9sz\u00edt\u00e9se. Az oldal fejl\u00e9c \u00e9s l\u00e1bl\u00e9c r\u00e9sze v\u00e1ltozatlan, teh\u00e1t azt m\u00e1solja \u00e1t a megl\u00e9v\u0151 index.html oldalr\u00f3l. Csak a navig\u00e1ci\u00f3 ut\u00e1ni r\u00e9sz fog v\u00e1ltozni. Az oldalon egy \u0171rlapot kell k\u00e9sz\u00edteni, ahol a felhaszn\u00e1l\u00f3t\u00f3 bek\u00e9rj\u00fck a k\u00f6vetkez\u0151 al\u00e1bbi adatokat: Email c\u00edm , Password , Address , City , State (Tipp: select ), ZIP . Az \u0171rlap v\u00e9g\u00e9n legyen egy checkbox, hogy elfogadja a felt\u00e9teleket illetve egy Sign in felirat\u00fa gomb, ami elk\u00fcldi az \u0171rlapot. Az inputok l\u00e9trehoz\u00e1s\u00e1n\u00e1l \u00fcgyeljen mindig a megfelel\u0151 t\u00edpus haszn\u00e1lat\u00e1ra. A sz\u00f6vegdobozokba tegyen placeholder sz\u00f6veget is. Az al\u00e1bbi k\u00e9pen l\u00e1that\u00f3 elrendez\u00e9st val\u00f3s\u00edtja meg. Ellen\u0151rizze, hogy az oldal kis k\u00e9perny\u0151 m\u00e9reten az al\u00e1bbi elrendez\u00e9sben jelenik-e meg. Ha nem, akkor jav\u00edtsa a k\u00f3dot, hogy az al\u00e1bbi kin\u00e9zetet kapja. BEADAND\u00d3 (1.5 pont) Illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet az elk\u00e9sz\u00edtett oldalr\u00f3l kicsi ( f6.1.png ) \u00e9s magas ( f6.2.png ) felbont\u00e1son is.","title":"Feladat 6 - Regisztr\u00e1ci\u00f3s \u0171rlap l\u00e9trehoz\u00e1sa"},{"location":"laborok/10-bootstrap/#feladat-6-imsc-regisztracio-urlap-kozepre-igazitasa-es-placeholder-design","text":"Flexbox seg\u00edts\u00e9g\u00e9vel igaz\u00edtsa a regisztr\u00e1ci\u00f3s \u0171rlapot f\u00fcgg\u0151legesen k\u00f6z\u00e9pre. Defini\u00e1lja fel\u00fcl a placeholder sz\u00f6vegek megjelen\u00edt\u00e9s\u00e9t is. Legyen piros d\u0151lt bet\u0171 a placeholder mindenhol. Tipp: ::placeholder iMSc BEADAND\u00d3 (0.5 iMSc pont) Illesszen be az elk\u00e9sz\u00edtett teljes oldalr\u00f3l egy k\u00e9perny\u0151k\u00e9pet, ahol a placeholderek is l\u00e1that\u00f3ak. ( f6.imsc.png )","title":"Feladat 6 iMSc - Regisztr\u00e1ci\u00f3 \u0171rlap k\u00f6z\u00e9pre igaz\u00edt\u00e1sa \u00e9s placeholder design"},{"location":"laborok/11-js/","text":"Labor 11 - JavaScript alapok \u00b6 Bevezet\u00e9s \u00b6 A laborok sor\u00e1n a hallgat\u00f3k laborvezet\u0151i seg\u00edts\u00e9ggel, majd \u00f6n\u00e1ll\u00f3an v\u00e9geznek feladatokat a webes technol\u00f3gi\u00e1k gyakorlati megismer\u00e9se \u00e9rdek\u00e9ben. A feladatok megold\u00e1sa sor\u00e1n ne felejtsd el k\u00f6vetni a feladat bead\u00e1s folyamat\u00e1t TODO LINK. Git repository l\u00e9trehoz\u00e1sa \u00e9s projekt ind\u00edt\u00e1sa \u00b6 Moodle-ben keresd meg a laborhoz tartoz\u00f3 megh\u00edv\u00f3 URL-j\u00e9t \u00e9s annak seg\u00edts\u00e9g\u00e9vel hozd l\u00e9tre a saj\u00e1t repository-dat. V\u00e1rd meg, m\u00edg elk\u00e9sz\u00fcl a repository, majd checkout-old ki. Egyetemi laborokban, ha a checkout sor\u00e1n nem k\u00e9r a rendszer felhaszn\u00e1l\u00f3nevet \u00e9s jelsz\u00f3t, \u00e9s nem siker\u00fcl a checkout, akkor val\u00f3sz\u00edn\u0171leg a g\u00e9pen kor\u00e1bban megjegyzett felhaszn\u00e1l\u00f3n\u00e9vvel pr\u00f3b\u00e1lkozott a rendszer. El\u0151sz\u00f6r t\u00f6r\u00f6ld ki a mentett bel\u00e9p\u00e9si adatokat (l\u00e1sd itt), \u00e9s pr\u00f3b\u00e1ld \u00fajra. Hozz l\u00e9tre egy \u00faj \u00e1gat megoldas n\u00e9ven, \u00e9s ezen az \u00e1gon dolgozz. A neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dodat. A f\u00e1jlban semmi m\u00e1s ne szerepeljen, csak egyetlen sorban a Neptun k\u00f3d 6 karaktere. Nyissuk meg a Visual Studio Code-dal a l\u00e9trehozott k\u00f6nyvt\u00e1rat (File -> Open Folder)! Ind\u00edtsuk el a Terminal ( Ctrl+\u00f6 vagy View > Integrated Terminal ) ablakb\u00f3l a http-server-t: http-server Ellen\u0151rizz\u00fck, hogy a megfelel\u0151 k\u00f6nyvt\u00e1rban ind\u00edtottuk-e el a szervert! A JavaScriptr\u0151l di\u00f3h\u00e9jban A kor\u00e1bban megismert HTML \u00e9s CSS adj\u00e1k a weboldalunk v\u00e1z\u00e1t, alapm\u0171k\u00f6d\u00e9s\u00e9t \u00e9s kin\u00e9zet\u00e9t, viszont a korai dokumentum-alap\u00fa weboldalakt\u00f3l \u00e1tt\u00e9rt\u00fcnk a dinamikus weboldalakra, melyek fut\u00e1s id\u0151ben m\u00f3dos\u00edtj\u00e1k az aktu\u00e1lis dokumentumot (a DOM-ot), \u00edgy interakci\u00f3t kezelhet\u00fcnk, \u00e9s a weboldalunkra (a kliens oldalra) \u00f6n\u00e1ll\u00f3 alkalmaz\u00e1sk\u00e9nt tekint\u00fcnk. Az alkalmaz\u00e1sainkhoz dinamizmust (id\u0151beni v\u00e1ltoz\u00e1st) szkriptel\u00e9ssel rendel\u00fcnk, erre JavaScriptet haszn\u00e1lunk. A JavaScript egy dinamikusan t\u00edpusos, interpret\u00e1lt szkriptnyelv, a hozz\u00e1 tartoz\u00f3 futtat\u00f3k\u00f6rnyezetek v\u00e9grehajt\u00f3 egys\u00e9gei pedig alapvet\u0151en egysz\u00e1l\u00faak, \u00edgy nincsen k\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1si probl\u00e9m\u00e1nk. \u00c9rdemes tov\u00e1bb\u00e1 megeml\u00edteni a felhaszn\u00e1land\u00f3 t\u00edpusokat ( function , object , string , number , undefined , boolean , symbol ), az ezek k\u00f6z\u00f6tti szabad konverzi\u00f3t \u00e9s a JavaScript esem\u00e9nyhurkot ( event loop ). Az event loop a JavaScriptet folyamatosan befejez\u0151d\u00e9sig futtatja ( \"Run-to-completion\" ), am\u00edg a fut\u00e1s be nem fejez\u0151dik, majd aszinkron esem\u00e9nyre v\u00e1r. Az esem\u00e9nyek bek\u00f6vetkezt\u00e9vel az esem\u00e9nyhez regisztr\u00e1lt esem\u00e9nykezel\u0151k lefutnak. Az esem\u00e9nyek lehetnek: felhaszn\u00e1l\u00f3i interakci\u00f3, id\u0151z\u00edt\u00e9s, IO m\u0171veletek eredm\u00e9nye (pl. AJAX, Websocket). A fontosabb kulcsgondolatok teh\u00e1t r\u00f6viden interpret\u00e1lt futtat\u00e1s, DOM dinamikus manipul\u00e1ci\u00f3ja, dinamikus t\u00edpusoss\u00e1g \u00e9s t\u00edpuskonverzi\u00f3, egysz\u00e1l\u00fas\u00e1g, event loop \u00e9s aszinkronit\u00e1s. Eml\u00edt\u00e9sre m\u00e9lt\u00f3 m\u00e9g, hogy a JavaScript (klasszikus \u00e9rtelemben v\u00e9ve) nem objektum-orient\u00e1lt, az oszt\u00e1lyok koncepci\u00f3ja a nyelvben k\u00e9s\u0151bb jelent meg; a nyelv a prototipikus \u00f6r\u00f6kl\u00e9s m\u00f3dszer\u00e9t alkalmazza az objektumorient\u00e1lt megk\u00f6zel\u00edt\u00e9shez. Ezen k\u00edv\u00fcl k\u00fcl\u00f6n\u00f6s saj\u00e1toss\u00e1gai vannak, a this kulcssz\u00f3 pl. nem az aktu\u00e1lis objektumra , hanem az aktu\u00e1lis f\u00fcggv\u00e9nyre mutat (kiv\u00e9tel az arrow syntax , ami a this -t az eredeti \u00e9rt\u00e9ken hagyja). Note Az Internet Explorer elh\u00edres\u00fclt arr\u00f3l, hogy a fejleszt\u00e9s r\u00e1 jelent\u0151sen neh\u00e9zkesebb, mint b\u00e1rmely alternat\u00edv\u00e1ra. Ma m\u00e1r a Microsoft is hivatalosan is az \u00faj, Chromium alap\u00fa Edge b\u00f6ng\u00e9sz\u0151t t\u00e1mogatja, amely - a m\u00e1r nem is t\u00e1mogatott - Windows 7 OS-en is m\u0171k\u00f6dik, \u00edgy \u00faj weboldalakat Internet Explorer t\u00e1mogat\u00e1ssal m\u00e1r nem kell k\u00e9sz\u00edten\u00fcnk. Feladat 1 - Egyszer\u0171 esem\u00e9nykezel\u00e9s \u00b6 A laboron egy egyszer\u0171 \"offline\" To-Do alkalmaz\u00e1st k\u00e9sz\u00edt\u00fcnk. Az alkalmaz\u00e1s alapjak\u00e9nt egy egyszer\u0171 HTML oldal szolg\u00e1l, amihez a saj\u00e1t JavaScript\u00fcnket \u00edrjuk. A JS k\u00f3dot HTML-ben is elhelyezhetn\u00e9nk, viszont az nem karbantarthat\u00f3 \u00e9s alapvet\u0151en nem best practice, \u00fagyhogy a saj\u00e1t todo.js f\u00e1jlba fogjuk tenni a k\u00f3dot, amit behivatkozunk. A st\u00edlusoz\u00e1st Bootstrappel oldjuk meg. Warning A b\u00f6ng\u00e9sz\u0151 k\u00fcl\u00f6nb\u00f6z\u0151 k\u00f6r\u00fclm\u00e9nyek f\u00fcggv\u00e9ny\u00e9ben cache-elheti a f\u00e1jljainkat , ez\u00e9rt a friss\u00edt\u00e9st ilyenkor k\u00e9zzel kell megoldanunk. Ne felejts\u00fck el menteni a f\u00e1jlt, ezut\u00e1n a b\u00f6ng\u00e9sz\u0151ben \u00e1ll\u00edtsuk be az F12 Developer Tools-ban a Network f\u00fcl\u00f6n az \"Always refresh from server\"/\"Disable cache\" vagy hasonl\u00f3 elnevez\u00e9s\u0171 be\u00e1ll\u00edt\u00e1st! L\u00e1thatjuk, hogy a statikus oldal az al\u00e1bbiakb\u00f3l tev\u0151dik \u00f6ssze: c\u00edm, f\u00fclek az \u00f6sszes, akt\u00edv, inakt\u00edv \u00e9s k\u00e9sz elemek sz\u0171r\u00e9s\u00e9re, a to-do elemek list\u00e1ja, az egyes elemek mellett az \u00e9rtelmezett m\u0171veletek, \u00faj elem hozz\u00e1ad\u00e1sa panel, melyen az \u00faj to-do bejegyz\u00e9s sz\u00f6veg\u00e9t kell megadnunk egy \u0171rlapon. A <body> v\u00e9g\u00e9n egy <script> a todo.js f\u00e1jlra hivatkozik! A szkript az oldal l\u00e9nyegi tartalm\u00e1nak bet\u00f6lt\u0151d\u00e9se ut\u00e1n fut le, \u00edgy nem kell majd v\u00e1rakoznunk a dokumentum teljes bet\u00f6lt\u0151d\u00e9s\u00e9re (a gyakorlatban ez azt jelenti, hogy a szkript fut\u00e1s\u00e1nak kezdet\u00e9n a DOM a HTML-nek megfelel\u0151 \u00e1llapotban m\u00e1r l\u00e9trej\u00f6tt). A gyakorlatban ez v\u00e1ltoz\u00f3, szok\u00e1s a <head> elemben in bet\u00f6lteni JS f\u00e1jlokat amikor kritikus, viszont az g\u00e1tolja a HTML megjelen\u00e9s\u00e9t, am\u00edg a JS f\u00e1jl le nem t\u00f6lt\u0151dik. Az egyes to-do-k modellj\u00e9re \u00e9rdemes saj\u00e1t oszt\u00e1lyt defini\u00e1lnunk. Tip Modern (ES6/ES2015 \u00e9s magasabb) JavaScriptben konstruktor f\u00fcggv\u00e9ny helyett haszn\u00e1lhatunk val\u00f3s oszt\u00e1lyokat is, a gyakorlaton ezt fogjuk l\u00e1tni. JavaScriptben egy (nem oszt\u00e1ly) f\u00fcggv\u00e9ny konstruktorf\u00fcggv\u00e9ny, ha a this v\u00e1ltoz\u00f3n tulajdons\u00e1gokat helyez el \u00e9s nem t\u00e9r vissza semmivel. Ekkor a new kulcssz\u00f3val megh\u00edvva a f\u00fcggv\u00e9nyt az konstruktork\u00e9nt funkcion\u00e1l \u00e9s a this (tulajdons\u00e1gokkal \"felaggatott\") \u00e9rt\u00e9k\u00e9t kapjuk vissza. Ezen fel\u00fcl az instanceof kulcssz\u00f3val megvizsg\u00e1lhatjuk, hogy egy adott f\u00fcggv\u00e9ny konstruktora \u00e1ltal k\u00e9sz\u00edtett objektumr\u00f3l van-e sz\u00f3, teh\u00e1t szinte m\u00e1r oszt\u00e1lyp\u00e9ld\u00e1nyk\u00e9nt kezelhetj\u00fck az objektumot. A f\u00fclek lehets\u00e9ges \u00e1llapotai az \"all\", \"active\", \"inactive\" \u00e9s \"done\", az \"all\" kiv\u00e9tel\u00e9vel ezeket az \u00e1llapotokat veheti fel egy to-do elem is. A todo.js elej\u00e9re vegy\u00fck fel a Todo oszt\u00e1lyt, annak konstruktorf\u00fcggv\u00e9ny\u00e9t \u00e9s a konkr\u00e9t p\u00e9ld\u00e1nyokat t\u00e1rol\u00f3 (\u00fcres) t\u00f6mb\u00f6t, valamint a lehets\u00e9ges \u00e1llapotokat: class Todo { constructor ( name , state ) { this . name = name ; this . state = state ; } } const todos = []; const states = [ \"active\" , \"inactive\" , \"done\" ]; const tabs = [ \"all\" ]. concat ( states ); console . log ( tabs ); JavaScript v\u00e1ltoz\u00f3k JavaScriptben h\u00e1rom kulcssz\u00f3val deklar\u00e1lhatunk lok\u00e1lis v\u00e1ltoz\u00f3t: var : az \"eredeti\" m\u00f3dja a v\u00e1ltoz\u00f3 deklar\u00e1ci\u00f3j\u00e1nak, modern JS-ben \u00e9rdemes ker\u00fclni. Engedi ugyanazon v\u00e1ltoz\u00f3 \u00fajradeklar\u00e1ci\u00f3j\u00e1t, s\u0151t, nem k\u00f6ti scope-hoz a v\u00e1ltoz\u00f3t. let : scope-hoz k\u00f6ti a v\u00e1ltoz\u00f3t, ez\u00e9rt nem deklar\u00e1lhat\u00f3 \u00fajra \u00e9s nem is \"sziv\u00e1rog\" \u00e1t a scope-ok k\u00f6z\u00f6tt. const : konstans \u00e9rt\u00e9k\u0171/referenci\u00e1j\u00fa \"v\u00e1ltoz\u00f3t\" (\u00e9rdekes v\u00e1ltoz\u00f3nak nevezni, ha nem v\u00e1ltozhat) t\u00e1rol. A v\u00e1ltoz\u00f3 nem kaphat \u00faj \u00e9rt\u00e9ket (teh\u00e1t ha referenciat\u00edpus, pl. objektum vagy t\u00f6mb, akkor nem lehet \u00faj objektumot/\u00e9rt\u00e9ket adni a v\u00e1ltoz\u00f3nak), de ha objektumot t\u00e1rol, annak tagjai (vagy a t\u00f6mb elemei) \u00e9rtelemszer\u0171en v\u00e1ltozhatnak. A legnyilv\u00e1nval\u00f3bb (ha nem is a legrobusztusabb) m\u00f3dja a hibakeres\u00e9snek az, ha a konzolra \u00edrunk. Az F12 seg\u00edts\u00e9g\u00e9vel a Console f\u00fcl\u00f6n l\u00e1thatjuk a kimenetet. Iratkozzunk fel a form submit esem\u00e9ny\u00e9re \u00e9s kezelj\u00fck az \u00faj to-do elem l\u00e9trehoz\u00e1s\u00e1t! A feliratkoz\u00e1st megtehetj\u00fck HTML-b\u0151l \u00e9s JavaScriptb\u0151l is, most az ut\u00f3bbit alkalmazzuk! Illessz\u00fck be az al\u00e1bbi k\u00f3dr\u00e9szletet a kor\u00e1bbi k\u00f3dr\u00e9szletek ut\u00e1n! const form = document . getElementById ( \"new-todo-form\" ); const input = document . getElementById ( \"new-todo-title\" ); form . onsubmit = event => { event . preventDefault (); // megg\u00e1toljuk az alap\u00e9rtelmezett m\u0171k\u00f6d\u00e9st, ami friss\u00edten\u00e9 az oldalt if ( input ? . value ? . length ) { // ha \u00e9rv\u00e9nyes \u00e9rt\u00e9k van benne -- ekvivalens ezzel: if (input && input.value && input.value.length) vagy if (input != null && input.value != null && input.value.length > 0) todos . push ( new Todo ( input . value , \"active\" )); // \u00faj to-do-t akt\u00edv \u00e1llapotban hozunk l\u00e9tre input . value = \"\" ; // ki\u00fcr\u00edtj\u00fck az inputot // TODO: \u00fajrarajzolni a list\u00e1t } } Defini\u00e1lnunk kell m\u00e9g a gombokat, amiket a Todo-hoz fogunk rendelni. Nem volna sz\u00fcks\u00e9g a modellek defini\u00e1l\u00e1s\u00e1ra, elv\u00e9gre is a JS egy dinamikus nyelv, de strukt\u00far\u00e1t ad a k\u00f3dnak, objektum-orient\u00e1ltabban kezelhet\u0151. Info A VS Code-ban val\u00f3sz\u00edn\u0171leg az IntelliSense nyom\u00e1ra tudunk bukkanni a JS k\u00f3d \u00edr\u00e1sa k\u00f6zben. Ennek az oka nem a JavaScript, hanem a h\u00e1tt\u00e9rben fut\u00f3 TypeScript ford\u00edt\u00f3. Mivel minden JavaScript egyben TypeScript k\u00f3d is, ez\u00e9rt a t\u00edpusinform\u00e1ci\u00f3k kinyerhet\u0151k a k\u00f3db\u00f3l. Ez a TypeScript nagy el\u0151nye a JS-sel szemben. Ford\u00edt\u00e1si hib\u00e1ink nem lesznek JavaScriptben, de az IntelliSense seg\u00edts\u00e9g\u00e9t ki lehet \u00edgy haszn\u00e1lni. class Button { constructor ( action , icon , type , title ) { this . action = action ; // a m\u0171velet, amit a gomb v\u00e9gez this . icon = icon ; // a FontAwesome ikon neve (class=\"fas fa-*\") this . type = type ; // a gomb Bootstrapbeni t\u00edpusa (\"secondary\", \"danger\" stb.) this . title = title ; // a gomb tooltip sz\u00f6vege } } const buttons = [ // a gombokat reprezent\u00e1l\u00f3 modell objektumok t\u00f6mbje new Button ( \"done\" , \"check\" , \"success\" , \"Mark as done\" ), new Button ( \"active\" , \"plus\" , \"secondary\" , \"Mark as active\" ), // az objektumot dinamikusan is kezelhetj\u00fck, ekkor nem a konstruktorral p\u00e9ld\u00e1nyos\u00edtjuk: { action : \"inactive\" , icon : \"minus\" , type : \"secondary\" , title : \"Mark as inactive\" }, new Button ( \"remove\" , \"trash\" , \"danger\" , \"Remove\" ), ]; \u00cdgy m\u00e1r gyakorlatilag fel tudunk venni \u00faj elemet, viszont ez nem l\u00e1tszik a fel\u00fcleten, ugyanis csak mem\u00f3ri\u00e1ban dolgoztunk, \u00e9s nem m\u00f3dos\u00edtottuk megfelel\u0151en a DOM-ot. \u00cdrjunk egy f\u00fcggv\u00e9nyt, ami az \u00f6sszes to-do elemet kirajzolja a fel\u00fcletre! A jelenlegi sablon alapj\u00e1n k\u00f3db\u00f3l \u00f6ssze\u00e1ll\u00edtjuk a DOM-r\u00e9szletet. El\u0151sz\u00f6ris k\u00e9sz\u00edts\u00fcnk egy seg\u00e9df\u00fcggv\u00e9nyt, aminek \u00e1tadhatunk tetsz\u0151leges HTML stringet, \u00e9s \u0151 elk\u00e9sz\u00edt nek\u00fcnk mem\u00f3ri\u00e1ban egy virtu\u00e1lis DOM elemet: function createElementFromHTML ( html ) { const virtualElement = document . createElement ( \"div\" ); virtualElement . innerHTML = html ; return virtualElement . childElementCount == 1 ? virtualElement . firstChild : virtualElement . children ; } Erre az\u00e9rt van sz\u00fcks\u00e9g, mert nincs arra nat\u00edv JavaScript API (jelenleg), hogy stringb\u0151l HTML elemet hozzunk l\u00e9tre, viszont b\u00e1rmely (ak\u00e1r virtu\u00e1lis, teh\u00e1t az aktu\u00e1lis DOM-ban nem, de mem\u00f3ri\u00e1ban l\u00e9tez\u0151) DOM elem innerHTML-j\u00e9nek be\u00e1ll\u00edt\u00e1s\u00e1val a DOM elem(ek) t\u00e9nylegesen l\u00e9trej\u00f6n/nek. Alternat\u00edv megold\u00e1sk\u00e9nt megtehetn\u00e9nk, hogy l\u00e9trehozzuk a createElement seg\u00edts\u00e9g\u00e9vel az elemet, majd egyes\u00e9vel be\u00e1ll\u00edtjuk az attrib\u00fatumait, de az j\u00f3val k\u00f6r\u00fclm\u00e9nyesebb, k\u00f3dol\u00f3sabb megold\u00e1st eredm\u00e9nyez. function renderTodos () { const todoList = document . getElementById ( \"todo-list\" ); // megkeress\u00fck a kont\u00e9nert, ahov\u00e1 az elemeket tessz\u00fck todoList . innerHTML = \"\" ; // a jelenleg a DOM-ban lev\u0151 to-do elemeket t\u00f6r\u00f6lj\u00fck todos . forEach ( todo => { // bej\u00e1rjuk a jelenlegi todo elemeket (alternat\u00edv, funkcion\u00e1lis bej\u00e1r\u00e1ssal) const row = createElementFromHTML ( `<div class=\"row\"> <div class=\"col d-flex p-0\"> <a class=\"list-group-item flex-grow-1\" href=\"#\"> ${ todo . name } </a> <div class=\"btn-group action-buttons\"></div> </div> </div>` ); buttons . forEach ( button => { // a gomb modellek alapj\u00e1n legy\u00e1rtjuk a DOM gombokat const btn = createElementFromHTML ( `<button class=\"btn btn-outline- ${ button . type } fas fa- ${ button . icon } \" title=\" ${ button . title } \"></button>` ); if ( todo . state === button . action ) // azt a gombot letiljuk, amilyen \u00e1llapotban van egy elem btn . disabled = true ; // TODO: a gomb klikk esem\u00e9ny\u00e9nek kezel\u00e9se row . querySelector ( \".action-buttons\" ). appendChild ( btn ); // a virtu\u00e1lis elem gomb kont\u00e9ner\u00e9be beletessz\u00fck a gombot }); todoList . appendChild ( row ); // az \u00f6ssze\u00e1ll\u00edtott HTML-t a DOM-ban lev\u0151 #todo-list elemhez f\u0171zz\u00fck }); } renderTodos (); // kezdeti \u00e1llapot kirajzol\u00e1sa Tip A querySelector()/querySelectorAll() API-kkal egy CSS szelektort adhatunk meg a document-en vagy egy elemen, \u00e9s az illeszked\u0151 els\u0151/\u00f6sszes elemet kapjuk vissza. Most m\u00e1r l\u00e1tjuk, hogy mi fog ker\u00fclni a // TODO komment hely\u00e9re a form elk\u00fcld\u00e9sekor: renderTodos (); Warning Ha abba a hib\u00e1ba esn\u00e9nk, hogy a DOM elemeket egyes\u00e9vel szeretn\u00e9nk elt\u00e1vol\u00edtani a DOM-b\u00f3l a #todo-list elem children tulajdons\u00e1g\u00e1nak seg\u00edts\u00e9g\u00e9vel, vigy\u00e1znunk kell, ugyanis ez egy \"\u00e9l\u0151\" kollekci\u00f3: mik\u00f6zben az elemeket t\u00f6r\u00f6lj\u00fck, a kollekci\u00f3 length tulajdons\u00e1ga is v\u00e1ltozik! Persze egy egyszer\u0171 for ciklussal megoldhat\u00f3, de mindenk\u00e9ppen a v\u00e9g\u00e9t\u0151l indulva j\u00e1rjuk be a kollekci\u00f3t, am\u00edg az ki nem \u00fcr\u00fcl! BEADAND\u00d3 (1 pont) Illesszen be egy k\u00e9perny\u0151k\u00e9pet n\u00e9h\u00e1ny hozz\u00e1adott tennival\u00f3r\u00f3l! ( f1.png ) Feladat 2 - \u00c1llapotok \u00b6 A DOM elemekre kattintva be tudjuk \u00e1ll\u00edtani az aktu\u00e1lis \u00e1llapotot, ezt a DOM elemhez esem\u00e9nykezel\u0151 rendel\u00e9s\u00e9vel tehetj\u00fck meg. Esem\u00e9nykezel\u0151t a HTML-ben az on\\* attrib\u00fatumok megad\u00e1s\u00e1val tudunk k\u00f6tni, JavaScriptben a DOM API-t haszn\u00e1lva pl. az elem referenci\u00e1j\u00e1t megszerezve az .addEventListener(\"esem\u00e9nyn\u00e9v\", callbackF\u00fcggv\u00e9ny) f\u00fcggv\u00e9ny megh\u00edv\u00e1s\u00e1val vagy a megfelel\u0151 feliratkoztat\u00f3 f\u00fcggv\u00e9ny be\u00e1ll\u00edt\u00e1s\u00e1val (pl. onclick = callbackF\u00fcggv\u00e9ny ). A JS k\u00f3dot az al\u00e1bbival eg\u00e9sz\u00edts\u00fck ki: let currentTab ; // a jelenleg kiv\u00e1lasztott f\u00fcl function selectTab ( type ) { currentTab = type ; // elt\u00e1roljuk a jelenlegi f\u00fcl \u00e9rt\u00e9ket for ( let tab of document . getElementsByClassName ( \"todo-tab\" )) { tab . classList . remove ( \"active\" ); // az \u00f6sszes f\u00fclr\u0151l levessz\u00fck az .active oszt\u00e1lyt if ( tab . getAttribute ( \"data-tab-name\" ) == type ) // ha ez a f\u00fcl van \u00e9pp kiv\u00e1lasztva tab . classList . add ( \"active\" ); // erre az egyre visszatessz\u00fck az .active oszt\u00e1lyt } renderTodos (); // \u00fajrarajzolunk mindent } selectTab ( \"all\" ); // app indul\u00e1sakor kiv\u00e1lasztjuk az \"all\" f\u00fclet self-invoking function declaration A fenti minta, amikor egy f\u00fcggv\u00e9nyt a defini\u00e1l\u00e1sa ut\u00e1n k\u00f6zvetlen\u00fcl megh\u00edvunk, egy \"cs\u00fany\u00e1bb\", de elterjedt alternat\u00edv\u00e1val szokt\u00e1k alkalmazni, ez az \u00fan. self-invoking function declaration , aminek sok v\u00e1ltozata ismeretes, ez az egyik: ( const selectTab = function ( type ) { /* ... */ })( \"all\" ); A selectTab f\u00fcggv\u00e9ny h\u00edv\u00e1s\u00e1t a HTML-b\u0151l k\u00f6ss\u00fck a klikk esem\u00e9nyre (megtehetn\u00e9nk k\u00f3db\u00f3l is, de l\u00e1ssunk erre is p\u00e9ld\u00e1t), cser\u00e9lj\u00fck le a tabok tartalm\u00e1t: < li class = \"nav-item\" > < a class = \"todo-tab nav-link\" data-tab-name = \"all\" href = \"#all\" onclick = \"selectTab('all')\" > All < span class = \"badge bg-secondary\" > 1 </ span > </ a > </ li > < li class = \"nav-item\" > < a class = \"todo-tab nav-link\" data-tab-name = \"active\" href = \"#active\" onclick = \"selectTab('active')\" > Active < span class = \"badge bg-secondary\" > 1 </ span > </ a > </ li > < li class = \"nav-item\" > < a class = \"todo-tab nav-link\" data-tab-name = \"inactive\" href = \"#inactive\" onclick = \"selectTab('inactive')\" > Inactive < span class = \"badge bg-secondary\" ></ span > </ a > </ li > < li class = \"nav-item\" > < a class = \"todo-tab nav-link\" data-tab-name = \"done\" href = \"#done\" onclick = \"selectTab('done')\" > Done < span class = \"badge bg-secondary\" ></ span > </ a > </ li > Az elemhez adatt\u00e1rol\u00f3 attrib\u00fatumot is rendelt\u00fcnk, ezt az attrib\u00fatumot a data- el\u0151taggal l\u00e1ttuk el jelezv\u00e9n, hogy az attrib\u00fatum kiz\u00e1r\u00f3lag adathordoz\u00e1sra szolg\u00e1l. Az elemek \u00e1llapot\u00e1nak v\u00e1ltoz\u00e1s\u00e1t hasonl\u00f3k\u00e9ppen kezelhetj\u00fck, amikor a gombokat gy\u00e1rtjuk a renderTodos() f\u00fcggv\u00e9nyben, az esem\u00e9nykezel\u0151ket ott helyben fel tudjuk regisztr\u00e1lni (a // TODO komment hely\u00e9re ker\u00fclj\u00f6n): btn . onclick = () => { // klikk esem\u00e9nyre if ( button . action === \"remove\" ) { // ha t\u00f6rl\u00e9s if ( confirm ( \"Are you sure you want to delete the todo titled '\" + todo . name + \"'?\" )) { // meger\u0151s\u00edt\u00e9s ut\u00e1n todos . splice ( todos . indexOf ( todo ), 1 ); // kivesz\u00fcnk a 'todo'-adik elemt\u0151l 1 elemet a todos t\u00f6mbb\u0151l renderTodos (); } } else { // ha nem t\u00f6rl\u00e9s todo . state = button . action ; // \u00e1t\u00e1ll\u00edtjuk a kiv\u00e1lasztott todo \u00e1llapot\u00e1t a gomb \u00e1llapot\u00e1ra renderTodos (); } } Tip \u00c9rdekess\u00e9g a confirm() f\u00fcggv\u00e9ny, amely b\u00f6ng\u00e9sz\u0151ben nat\u00edvan implement\u00e1lt: a felhaszn\u00e1l\u00f3nak egy egyszer\u0171 meger\u0151s\u00edt\u0151 ablakot dob fel a megadott sz\u00f6veggel, \u00e9s blokkolva v\u00e1rakozik a v\u00e1laszra. A v\u00e1lasz egy boolean \u00e9rt\u00e9k, \u00edgy az if t\u00f6rzse csak akkor fut le, ha a felhaszn\u00e1l\u00f3 OK-val v\u00e1laszol. Hasonl\u00f3 az alert() , az viszont csak egy OK-zhat\u00f3 figyelmeztet\u00e9st dob fel, ami nem t\u00e9r vissza semmivel, ill. a prompt() , amivel stringet k\u00e9rhet\u00fcnk be. Ezeket ritk\u00e1n, lehet\u0151leg soha nem haszn\u00e1ljuk, helyett\u00fck nem blokkol\u00f3, aszinkron egyedi megold\u00e1st k\u00e9sz\u00edt\u00fcnk. Ha for (var ... in ...) ciklust \u00e9s function -t haszn\u00e1ln\u00e1nk a buttons \u00e9s todos t\u00f6mb\u00f6k\u00f6n, akkor a klikk esem\u00e9nykezel\u0151 ebben a form\u00e1ban hib\u00e1s lesz, mert az iter\u00e1ci\u00f3k \u00fajrahasznos\u00edtan\u00e1k a todo \u00e9s button v\u00e1ltoz\u00f3kat. Az arrow function viszont ezeket a v\u00e1ltoz\u00f3kat \u00fan. \"closure\"-be helyezi, technikailag a v\u00e1ltoz\u00f3kb\u00f3l egy lok\u00e1lis m\u00e1solat k\u00e9sz\u00fcl, \u00edgy a f\u00fcggv\u00e9ny helyesen fog lefutni. Eg\u00e9sz\u00edts\u00fck ki a renderTodos() f\u00fcggv\u00e9nyt, hogy friss\u00edtse a f\u00fclek mellett tal\u00e1lhat\u00f3 badge-ben megjelen\u0151 sz\u00e1m\u00e9rt\u00e9keket: document . querySelector ( \".todo-tab[data-tab-name='all'] .badge\" ). innerHTML = todos . length || \"\" ; for ( let state of states ) document . querySelector ( `.todo-tab[data-tab-name=' ${ state } '] .badge` ). innerHTML = todos . filter ( t => t . state === state ). length || \"\" ; Info A filter() f\u00fcggv\u00e9nynek egy callbacket adunk \u00e1t, ez fog ki\u00e9rt\u00e9kel\u0151dni minden elemre: ha a felt\u00e9tel igaz, akkor az elemet visszakapjuk, k\u00fcl\u00f6nben nem. Magyarul: azokra az elemekre sz\u0171r\u00fcnk, amelyek \u00e1llapota az aktu\u00e1lisan bej\u00e1rt \u00e1llapot (\"active\", \"inactive\", \"done\"), teh\u00e1t megsz\u00e1moljuk, h\u00e1ny elem van az adott st\u00e1tuszban. Ezen fel\u00fcl, ha az \u00e9rt\u00e9k falsey , teh\u00e1t eset\u00fcnkben 0, helyette \u00fcres stringet adunk vissza, \u00edgy nem fog megjelenni a badge. Utols\u00f3 l\u00e9p\u00e9sk\u00e9nt logikus, hogy az aktu\u00e1lis f\u00fcl alapj\u00e1n sz\u0171rj\u00fck le az elemeket, ne mindig az \u00f6sszes l\u00e1tsz\u00f3djon. Ezt a renderTodos() apr\u00f3 m\u00f3dos\u00edt\u00e1s\u00e1val tudjuk megtenni, a todos.forEach(todo => helyett \u00edrjuk az al\u00e1bbit: todos . filter ( todo => [ \"all\" , todo . state ]. includes ( currentTab )). forEach ( todo => { Tip Kicsit b\u0151besz\u00e9d\u0171bb, de ekvivalens megold\u00e1s az al\u00e1bbi: const filtered = todos . filter ( function ( todo ){ return todo . state === currentTab || currentTab === \"all\" ; }); filtered . forEach ( function ( todo ) { // ... Teh\u00e1t az eredeti todos t\u00f6mb\u00f6t a filter seg\u00edts\u00e9g\u00e9vel sz\u0171rj\u00fck \u00fagy, hogy csak azok az elemek maradjanak a sz\u0171rt t\u00f6mbben, ami az aktu\u00e1lis f\u00fclnek megfelel VAGY az \"all\" f\u00fcl\u00f6n gyunk (teh\u00e1t l\u00e1tsz\u00f3djon minden). Szint\u00e9n alternat\u00edv megold\u00e1sk\u00e9nt, valamivel optim\u00e1lisabban fut\u00f3, a f\u00fcl vizsg\u00e1latot kiszervezhetj\u00fck: ( currentTab === 'all' ? todos : todos . filter ( todo => todo . state === currentTab )). forEach ( todo => { BEADAND\u00d3 (1 pont) Illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet ( f2.1.png , f2.2.png , f2.3.png ) a tennival\u00f3k \u00e1llapotainak v\u00e1ltoztat\u00e1s\u00e1r\u00f3l, a k\u00fcl\u00f6nb\u00f6z\u0151 oldalakon t\u00f6rt\u00e9n\u0151 megjelen\u00e9s\u00fckr\u0151l! Feladat 3 (\u00d6n\u00e1ll\u00f3) - Sorrendez\u00e9s \u00b6 Legyenek fel-le mozgathat\u00f3k a to-do elemek az all list\u00e1ban! Hozzon l\u00e9tre k\u00e9t \u00faj gombot, amely a felfel\u00e9 \u00e9s lefel\u00e9 mozgat\u00e1st jelzik az elemn\u00e9l! Haszn\u00e1lja a fas fa-arrow-up \u00e9s fas fa-arrow-down oszt\u00e1lyokat az ikonokhoz! A gombok csak az all f\u00fcl\u00f6n legyenek l\u00e1that\u00f3k! A gomb legyen letiltva, ha nem mozgathat\u00f3 a megadott ir\u00e1nyba az elem! A gombra kattintva az elem ker\u00fclj\u00f6n el\u0151r\u00e9bb/h\u00e1tr\u00e9bb az elemek list\u00e1j\u00e1ban! BEADAND\u00d3 (1.5 pont) Illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet n\u00e9h\u00e1ny tennival\u00f3r\u00f3l sorrendez\u00e9s el\u0151tt \u00e9s ut\u00e1n! ( f3.1.png , f3.2.png ) Feladat 4 (\u00d6n\u00e1ll\u00f3) - Perziszt\u00e1l\u00e1s \u00b6 Egy to-do list\u00e1nak nem sok \u00e9rtelme van, ha nem menthet\u0151k el az adataink. A ment\u00e9sre egy\u00e9rtelm\u0171 lehet\u0151s\u00e9get biztos\u00edt a localStorage \u00e9s a sessionStorage . Mindkett\u0151 kulcs-\u00e9rt\u00e9k t\u00e1rol\u00f3, a kulcsok \u00e9s \u00e9rt\u00e9kek egyar\u00e1nt string t\u00edpus\u00faak. A k\u00fcl\u00f6nbs\u00e9g a kett\u0151 k\u00f6z\u00f6tt az \u00e9lettartamuk: m\u00edg a localStorage - b\u00e1r korl\u00e1tos m\u00e9ret\u0171 - a b\u00f6ng\u00e9sz\u0151t \u00fajraind\u00edtva is megtartja \u00e1llapot\u00e1t, a sessionStorage a b\u00f6ng\u00e9sz\u0151t/f\u00fclet bez\u00e1rva elv\u00e9sz. A sessionStorage adatokat mem\u00f3ri\u00e1ban, a localStorage adatokat viszont perzisztensen, f\u00e1jlban t\u00e1rolja a b\u00f6ng\u00e9sz\u0151. A t\u00e1rol\u00e1shoz minden renderel\u00e9si ciklus elej\u00e9n volna \u00e9rdemes menten\u00fcnk. B\u00e1r az alkalmaz\u00e1sunk renderTodos() f\u00fcggv\u00e9nye nev\u00e9b\u0151l fakad\u00f3an a DOM-ot manipul\u00e1lja, ez az a pont, ahol b\u00e1rmilyen v\u00e1ltoz\u00e1sr\u00f3l \u00e9rtes\u00fcl\u00fcnk. Fontos, hogy tartsuk be a separation of concerns elvet: mindenki a saj\u00e1t feladat\u00e1val foglalkozzon! Ez\u00e9rt ne itt val\u00f3s\u00edtsuk meg a perziszt\u00e1l\u00e1st, hanem egy saj\u00e1t f\u00fcggv\u00e9nyben, amit megh\u00edvunk minden v\u00e1ltoz\u00e1st induk\u00e1l\u00f3 ponton a k\u00f3dban: elem \u00e1llapot\u00e1nak v\u00e1ltoz\u00e1sa, elem l\u00e9trehoz\u00e1sa, elem t\u00f6rl\u00e9se. ! note V\u00e1ltoz\u00e1sdetekt\u00e1l\u00e1s Komplexebb alkalmaz\u00e1sfejleszt\u0151 keretrendszerekben is probl\u00e9m\u00e1t okoz a v\u00e1ltoz\u00e1sokr\u00f3l t\u00f6rt\u00e9n\u0151 \u00e9rtes\u00fcl\u00e9s, a React, az AngularJS \u00e9s az Angular mind m\u00e1s \u00e9s m\u00e1s m\u00f3dszereket alkalmaznak a v\u00e1ltoz\u00e1sok detekt\u00e1l\u00e1s\u00e1ra. A t\u00e1rol\u00e1shoz a localStorage.setItem(key, value) f\u00fcggv\u00e9nyt haszn\u00e1ljuk. A soros\u00edtand\u00f3 objektumot egyszer\u0171en JSON-be soros\u00edthatjuk: JSON.stringify(object) , illetve visszafejthetj\u00fck: JSON.parse(string) . Objektum soros\u00edt\u00e1s Fontos, hogy a JSON.parse() \u00e1ltal visszafejtett objektumok egyszer\u0171 objektumok, ha a forr\u00e1s objektumunkon pl. f\u00fcggv\u00e9nyek is szerepeltek, azok a deszerializ\u00e1lt objektumon nem lesznek el\u00e9rhet\u0151k! A r\u00e9szfeladatok teh\u00e1t: k\u00e9sz\u00edtsen egy f\u00fcggv\u00e9nyt, ami elmenti a teljes todos t\u00f6mb tartalm\u00e1t localStorage -ba, b\u00e1rmilyen v\u00e1ltoz\u00e1s hat\u00e1s\u00e1ra (elem \u00e1llapotv\u00e1ltoz\u00e1sa, l\u00e9trej\u00f6tte, t\u00f6rl\u00e9se) mentse el a f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9vel az elemeket, alkalmaz\u00e1s indul\u00e1sakor egyetlen alkalommal t\u00f6ltse vissza az \u00f6sszes elt\u00e1rolt todo elemet, \u00e9s ez legyen a todos v\u00e1ltoz\u00f3 kiindul\u00f3 tartalma! Storage debuggol\u00e1s A storage tartalm\u00e1t b\u00f6ng\u00e9sz\u0151t\u0151l f\u00fcgg\u0151en k\u00fcl\u00f6nb\u00f6z\u0151 helyen tudjuk megvizsg\u00e1lni, jellemz\u0151en a Storage vagy Debugger f\u00fcl\u00f6n tal\u00e1lhat\u00f3. BEADAND\u00d3 (1.5 pont) Illesszen be egy k\u00e9perny\u0151k\u00e9pet a lok\u00e1lis t\u00e1rol\u00f3ban (localStorage) tal\u00e1lhat\u00f3 perziszt\u00e1lt to-do elemekr\u0151l! ( f4.png )","title":"Labor 11 - JavaScript alapok"},{"location":"laborok/11-js/#labor-11-javascript-alapok","text":"","title":"Labor 11 - JavaScript alapok"},{"location":"laborok/11-js/#bevezetes","text":"A laborok sor\u00e1n a hallgat\u00f3k laborvezet\u0151i seg\u00edts\u00e9ggel, majd \u00f6n\u00e1ll\u00f3an v\u00e9geznek feladatokat a webes technol\u00f3gi\u00e1k gyakorlati megismer\u00e9se \u00e9rdek\u00e9ben. A feladatok megold\u00e1sa sor\u00e1n ne felejtsd el k\u00f6vetni a feladat bead\u00e1s folyamat\u00e1t TODO LINK.","title":"Bevezet\u00e9s"},{"location":"laborok/11-js/#git-repository-letrehozasa-es-projekt-inditasa","text":"Moodle-ben keresd meg a laborhoz tartoz\u00f3 megh\u00edv\u00f3 URL-j\u00e9t \u00e9s annak seg\u00edts\u00e9g\u00e9vel hozd l\u00e9tre a saj\u00e1t repository-dat. V\u00e1rd meg, m\u00edg elk\u00e9sz\u00fcl a repository, majd checkout-old ki. Egyetemi laborokban, ha a checkout sor\u00e1n nem k\u00e9r a rendszer felhaszn\u00e1l\u00f3nevet \u00e9s jelsz\u00f3t, \u00e9s nem siker\u00fcl a checkout, akkor val\u00f3sz\u00edn\u0171leg a g\u00e9pen kor\u00e1bban megjegyzett felhaszn\u00e1l\u00f3n\u00e9vvel pr\u00f3b\u00e1lkozott a rendszer. El\u0151sz\u00f6r t\u00f6r\u00f6ld ki a mentett bel\u00e9p\u00e9si adatokat (l\u00e1sd itt), \u00e9s pr\u00f3b\u00e1ld \u00fajra. Hozz l\u00e9tre egy \u00faj \u00e1gat megoldas n\u00e9ven, \u00e9s ezen az \u00e1gon dolgozz. A neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dodat. A f\u00e1jlban semmi m\u00e1s ne szerepeljen, csak egyetlen sorban a Neptun k\u00f3d 6 karaktere. Nyissuk meg a Visual Studio Code-dal a l\u00e9trehozott k\u00f6nyvt\u00e1rat (File -> Open Folder)! Ind\u00edtsuk el a Terminal ( Ctrl+\u00f6 vagy View > Integrated Terminal ) ablakb\u00f3l a http-server-t: http-server Ellen\u0151rizz\u00fck, hogy a megfelel\u0151 k\u00f6nyvt\u00e1rban ind\u00edtottuk-e el a szervert! A JavaScriptr\u0151l di\u00f3h\u00e9jban A kor\u00e1bban megismert HTML \u00e9s CSS adj\u00e1k a weboldalunk v\u00e1z\u00e1t, alapm\u0171k\u00f6d\u00e9s\u00e9t \u00e9s kin\u00e9zet\u00e9t, viszont a korai dokumentum-alap\u00fa weboldalakt\u00f3l \u00e1tt\u00e9rt\u00fcnk a dinamikus weboldalakra, melyek fut\u00e1s id\u0151ben m\u00f3dos\u00edtj\u00e1k az aktu\u00e1lis dokumentumot (a DOM-ot), \u00edgy interakci\u00f3t kezelhet\u00fcnk, \u00e9s a weboldalunkra (a kliens oldalra) \u00f6n\u00e1ll\u00f3 alkalmaz\u00e1sk\u00e9nt tekint\u00fcnk. Az alkalmaz\u00e1sainkhoz dinamizmust (id\u0151beni v\u00e1ltoz\u00e1st) szkriptel\u00e9ssel rendel\u00fcnk, erre JavaScriptet haszn\u00e1lunk. A JavaScript egy dinamikusan t\u00edpusos, interpret\u00e1lt szkriptnyelv, a hozz\u00e1 tartoz\u00f3 futtat\u00f3k\u00f6rnyezetek v\u00e9grehajt\u00f3 egys\u00e9gei pedig alapvet\u0151en egysz\u00e1l\u00faak, \u00edgy nincsen k\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1si probl\u00e9m\u00e1nk. \u00c9rdemes tov\u00e1bb\u00e1 megeml\u00edteni a felhaszn\u00e1land\u00f3 t\u00edpusokat ( function , object , string , number , undefined , boolean , symbol ), az ezek k\u00f6z\u00f6tti szabad konverzi\u00f3t \u00e9s a JavaScript esem\u00e9nyhurkot ( event loop ). Az event loop a JavaScriptet folyamatosan befejez\u0151d\u00e9sig futtatja ( \"Run-to-completion\" ), am\u00edg a fut\u00e1s be nem fejez\u0151dik, majd aszinkron esem\u00e9nyre v\u00e1r. Az esem\u00e9nyek bek\u00f6vetkezt\u00e9vel az esem\u00e9nyhez regisztr\u00e1lt esem\u00e9nykezel\u0151k lefutnak. Az esem\u00e9nyek lehetnek: felhaszn\u00e1l\u00f3i interakci\u00f3, id\u0151z\u00edt\u00e9s, IO m\u0171veletek eredm\u00e9nye (pl. AJAX, Websocket). A fontosabb kulcsgondolatok teh\u00e1t r\u00f6viden interpret\u00e1lt futtat\u00e1s, DOM dinamikus manipul\u00e1ci\u00f3ja, dinamikus t\u00edpusoss\u00e1g \u00e9s t\u00edpuskonverzi\u00f3, egysz\u00e1l\u00fas\u00e1g, event loop \u00e9s aszinkronit\u00e1s. Eml\u00edt\u00e9sre m\u00e9lt\u00f3 m\u00e9g, hogy a JavaScript (klasszikus \u00e9rtelemben v\u00e9ve) nem objektum-orient\u00e1lt, az oszt\u00e1lyok koncepci\u00f3ja a nyelvben k\u00e9s\u0151bb jelent meg; a nyelv a prototipikus \u00f6r\u00f6kl\u00e9s m\u00f3dszer\u00e9t alkalmazza az objektumorient\u00e1lt megk\u00f6zel\u00edt\u00e9shez. Ezen k\u00edv\u00fcl k\u00fcl\u00f6n\u00f6s saj\u00e1toss\u00e1gai vannak, a this kulcssz\u00f3 pl. nem az aktu\u00e1lis objektumra , hanem az aktu\u00e1lis f\u00fcggv\u00e9nyre mutat (kiv\u00e9tel az arrow syntax , ami a this -t az eredeti \u00e9rt\u00e9ken hagyja). Note Az Internet Explorer elh\u00edres\u00fclt arr\u00f3l, hogy a fejleszt\u00e9s r\u00e1 jelent\u0151sen neh\u00e9zkesebb, mint b\u00e1rmely alternat\u00edv\u00e1ra. Ma m\u00e1r a Microsoft is hivatalosan is az \u00faj, Chromium alap\u00fa Edge b\u00f6ng\u00e9sz\u0151t t\u00e1mogatja, amely - a m\u00e1r nem is t\u00e1mogatott - Windows 7 OS-en is m\u0171k\u00f6dik, \u00edgy \u00faj weboldalakat Internet Explorer t\u00e1mogat\u00e1ssal m\u00e1r nem kell k\u00e9sz\u00edten\u00fcnk.","title":"Git repository l\u00e9trehoz\u00e1sa \u00e9s projekt ind\u00edt\u00e1sa"},{"location":"laborok/11-js/#feladat-1-egyszeru-esemenykezeles","text":"A laboron egy egyszer\u0171 \"offline\" To-Do alkalmaz\u00e1st k\u00e9sz\u00edt\u00fcnk. Az alkalmaz\u00e1s alapjak\u00e9nt egy egyszer\u0171 HTML oldal szolg\u00e1l, amihez a saj\u00e1t JavaScript\u00fcnket \u00edrjuk. A JS k\u00f3dot HTML-ben is elhelyezhetn\u00e9nk, viszont az nem karbantarthat\u00f3 \u00e9s alapvet\u0151en nem best practice, \u00fagyhogy a saj\u00e1t todo.js f\u00e1jlba fogjuk tenni a k\u00f3dot, amit behivatkozunk. A st\u00edlusoz\u00e1st Bootstrappel oldjuk meg. Warning A b\u00f6ng\u00e9sz\u0151 k\u00fcl\u00f6nb\u00f6z\u0151 k\u00f6r\u00fclm\u00e9nyek f\u00fcggv\u00e9ny\u00e9ben cache-elheti a f\u00e1jljainkat , ez\u00e9rt a friss\u00edt\u00e9st ilyenkor k\u00e9zzel kell megoldanunk. Ne felejts\u00fck el menteni a f\u00e1jlt, ezut\u00e1n a b\u00f6ng\u00e9sz\u0151ben \u00e1ll\u00edtsuk be az F12 Developer Tools-ban a Network f\u00fcl\u00f6n az \"Always refresh from server\"/\"Disable cache\" vagy hasonl\u00f3 elnevez\u00e9s\u0171 be\u00e1ll\u00edt\u00e1st! L\u00e1thatjuk, hogy a statikus oldal az al\u00e1bbiakb\u00f3l tev\u0151dik \u00f6ssze: c\u00edm, f\u00fclek az \u00f6sszes, akt\u00edv, inakt\u00edv \u00e9s k\u00e9sz elemek sz\u0171r\u00e9s\u00e9re, a to-do elemek list\u00e1ja, az egyes elemek mellett az \u00e9rtelmezett m\u0171veletek, \u00faj elem hozz\u00e1ad\u00e1sa panel, melyen az \u00faj to-do bejegyz\u00e9s sz\u00f6veg\u00e9t kell megadnunk egy \u0171rlapon. A <body> v\u00e9g\u00e9n egy <script> a todo.js f\u00e1jlra hivatkozik! A szkript az oldal l\u00e9nyegi tartalm\u00e1nak bet\u00f6lt\u0151d\u00e9se ut\u00e1n fut le, \u00edgy nem kell majd v\u00e1rakoznunk a dokumentum teljes bet\u00f6lt\u0151d\u00e9s\u00e9re (a gyakorlatban ez azt jelenti, hogy a szkript fut\u00e1s\u00e1nak kezdet\u00e9n a DOM a HTML-nek megfelel\u0151 \u00e1llapotban m\u00e1r l\u00e9trej\u00f6tt). A gyakorlatban ez v\u00e1ltoz\u00f3, szok\u00e1s a <head> elemben in bet\u00f6lteni JS f\u00e1jlokat amikor kritikus, viszont az g\u00e1tolja a HTML megjelen\u00e9s\u00e9t, am\u00edg a JS f\u00e1jl le nem t\u00f6lt\u0151dik. Az egyes to-do-k modellj\u00e9re \u00e9rdemes saj\u00e1t oszt\u00e1lyt defini\u00e1lnunk. Tip Modern (ES6/ES2015 \u00e9s magasabb) JavaScriptben konstruktor f\u00fcggv\u00e9ny helyett haszn\u00e1lhatunk val\u00f3s oszt\u00e1lyokat is, a gyakorlaton ezt fogjuk l\u00e1tni. JavaScriptben egy (nem oszt\u00e1ly) f\u00fcggv\u00e9ny konstruktorf\u00fcggv\u00e9ny, ha a this v\u00e1ltoz\u00f3n tulajdons\u00e1gokat helyez el \u00e9s nem t\u00e9r vissza semmivel. Ekkor a new kulcssz\u00f3val megh\u00edvva a f\u00fcggv\u00e9nyt az konstruktork\u00e9nt funkcion\u00e1l \u00e9s a this (tulajdons\u00e1gokkal \"felaggatott\") \u00e9rt\u00e9k\u00e9t kapjuk vissza. Ezen fel\u00fcl az instanceof kulcssz\u00f3val megvizsg\u00e1lhatjuk, hogy egy adott f\u00fcggv\u00e9ny konstruktora \u00e1ltal k\u00e9sz\u00edtett objektumr\u00f3l van-e sz\u00f3, teh\u00e1t szinte m\u00e1r oszt\u00e1lyp\u00e9ld\u00e1nyk\u00e9nt kezelhetj\u00fck az objektumot. A f\u00fclek lehets\u00e9ges \u00e1llapotai az \"all\", \"active\", \"inactive\" \u00e9s \"done\", az \"all\" kiv\u00e9tel\u00e9vel ezeket az \u00e1llapotokat veheti fel egy to-do elem is. A todo.js elej\u00e9re vegy\u00fck fel a Todo oszt\u00e1lyt, annak konstruktorf\u00fcggv\u00e9ny\u00e9t \u00e9s a konkr\u00e9t p\u00e9ld\u00e1nyokat t\u00e1rol\u00f3 (\u00fcres) t\u00f6mb\u00f6t, valamint a lehets\u00e9ges \u00e1llapotokat: class Todo { constructor ( name , state ) { this . name = name ; this . state = state ; } } const todos = []; const states = [ \"active\" , \"inactive\" , \"done\" ]; const tabs = [ \"all\" ]. concat ( states ); console . log ( tabs ); JavaScript v\u00e1ltoz\u00f3k JavaScriptben h\u00e1rom kulcssz\u00f3val deklar\u00e1lhatunk lok\u00e1lis v\u00e1ltoz\u00f3t: var : az \"eredeti\" m\u00f3dja a v\u00e1ltoz\u00f3 deklar\u00e1ci\u00f3j\u00e1nak, modern JS-ben \u00e9rdemes ker\u00fclni. Engedi ugyanazon v\u00e1ltoz\u00f3 \u00fajradeklar\u00e1ci\u00f3j\u00e1t, s\u0151t, nem k\u00f6ti scope-hoz a v\u00e1ltoz\u00f3t. let : scope-hoz k\u00f6ti a v\u00e1ltoz\u00f3t, ez\u00e9rt nem deklar\u00e1lhat\u00f3 \u00fajra \u00e9s nem is \"sziv\u00e1rog\" \u00e1t a scope-ok k\u00f6z\u00f6tt. const : konstans \u00e9rt\u00e9k\u0171/referenci\u00e1j\u00fa \"v\u00e1ltoz\u00f3t\" (\u00e9rdekes v\u00e1ltoz\u00f3nak nevezni, ha nem v\u00e1ltozhat) t\u00e1rol. A v\u00e1ltoz\u00f3 nem kaphat \u00faj \u00e9rt\u00e9ket (teh\u00e1t ha referenciat\u00edpus, pl. objektum vagy t\u00f6mb, akkor nem lehet \u00faj objektumot/\u00e9rt\u00e9ket adni a v\u00e1ltoz\u00f3nak), de ha objektumot t\u00e1rol, annak tagjai (vagy a t\u00f6mb elemei) \u00e9rtelemszer\u0171en v\u00e1ltozhatnak. A legnyilv\u00e1nval\u00f3bb (ha nem is a legrobusztusabb) m\u00f3dja a hibakeres\u00e9snek az, ha a konzolra \u00edrunk. Az F12 seg\u00edts\u00e9g\u00e9vel a Console f\u00fcl\u00f6n l\u00e1thatjuk a kimenetet. Iratkozzunk fel a form submit esem\u00e9ny\u00e9re \u00e9s kezelj\u00fck az \u00faj to-do elem l\u00e9trehoz\u00e1s\u00e1t! A feliratkoz\u00e1st megtehetj\u00fck HTML-b\u0151l \u00e9s JavaScriptb\u0151l is, most az ut\u00f3bbit alkalmazzuk! Illessz\u00fck be az al\u00e1bbi k\u00f3dr\u00e9szletet a kor\u00e1bbi k\u00f3dr\u00e9szletek ut\u00e1n! const form = document . getElementById ( \"new-todo-form\" ); const input = document . getElementById ( \"new-todo-title\" ); form . onsubmit = event => { event . preventDefault (); // megg\u00e1toljuk az alap\u00e9rtelmezett m\u0171k\u00f6d\u00e9st, ami friss\u00edten\u00e9 az oldalt if ( input ? . value ? . length ) { // ha \u00e9rv\u00e9nyes \u00e9rt\u00e9k van benne -- ekvivalens ezzel: if (input && input.value && input.value.length) vagy if (input != null && input.value != null && input.value.length > 0) todos . push ( new Todo ( input . value , \"active\" )); // \u00faj to-do-t akt\u00edv \u00e1llapotban hozunk l\u00e9tre input . value = \"\" ; // ki\u00fcr\u00edtj\u00fck az inputot // TODO: \u00fajrarajzolni a list\u00e1t } } Defini\u00e1lnunk kell m\u00e9g a gombokat, amiket a Todo-hoz fogunk rendelni. Nem volna sz\u00fcks\u00e9g a modellek defini\u00e1l\u00e1s\u00e1ra, elv\u00e9gre is a JS egy dinamikus nyelv, de strukt\u00far\u00e1t ad a k\u00f3dnak, objektum-orient\u00e1ltabban kezelhet\u0151. Info A VS Code-ban val\u00f3sz\u00edn\u0171leg az IntelliSense nyom\u00e1ra tudunk bukkanni a JS k\u00f3d \u00edr\u00e1sa k\u00f6zben. Ennek az oka nem a JavaScript, hanem a h\u00e1tt\u00e9rben fut\u00f3 TypeScript ford\u00edt\u00f3. Mivel minden JavaScript egyben TypeScript k\u00f3d is, ez\u00e9rt a t\u00edpusinform\u00e1ci\u00f3k kinyerhet\u0151k a k\u00f3db\u00f3l. Ez a TypeScript nagy el\u0151nye a JS-sel szemben. Ford\u00edt\u00e1si hib\u00e1ink nem lesznek JavaScriptben, de az IntelliSense seg\u00edts\u00e9g\u00e9t ki lehet \u00edgy haszn\u00e1lni. class Button { constructor ( action , icon , type , title ) { this . action = action ; // a m\u0171velet, amit a gomb v\u00e9gez this . icon = icon ; // a FontAwesome ikon neve (class=\"fas fa-*\") this . type = type ; // a gomb Bootstrapbeni t\u00edpusa (\"secondary\", \"danger\" stb.) this . title = title ; // a gomb tooltip sz\u00f6vege } } const buttons = [ // a gombokat reprezent\u00e1l\u00f3 modell objektumok t\u00f6mbje new Button ( \"done\" , \"check\" , \"success\" , \"Mark as done\" ), new Button ( \"active\" , \"plus\" , \"secondary\" , \"Mark as active\" ), // az objektumot dinamikusan is kezelhetj\u00fck, ekkor nem a konstruktorral p\u00e9ld\u00e1nyos\u00edtjuk: { action : \"inactive\" , icon : \"minus\" , type : \"secondary\" , title : \"Mark as inactive\" }, new Button ( \"remove\" , \"trash\" , \"danger\" , \"Remove\" ), ]; \u00cdgy m\u00e1r gyakorlatilag fel tudunk venni \u00faj elemet, viszont ez nem l\u00e1tszik a fel\u00fcleten, ugyanis csak mem\u00f3ri\u00e1ban dolgoztunk, \u00e9s nem m\u00f3dos\u00edtottuk megfelel\u0151en a DOM-ot. \u00cdrjunk egy f\u00fcggv\u00e9nyt, ami az \u00f6sszes to-do elemet kirajzolja a fel\u00fcletre! A jelenlegi sablon alapj\u00e1n k\u00f3db\u00f3l \u00f6ssze\u00e1ll\u00edtjuk a DOM-r\u00e9szletet. El\u0151sz\u00f6ris k\u00e9sz\u00edts\u00fcnk egy seg\u00e9df\u00fcggv\u00e9nyt, aminek \u00e1tadhatunk tetsz\u0151leges HTML stringet, \u00e9s \u0151 elk\u00e9sz\u00edt nek\u00fcnk mem\u00f3ri\u00e1ban egy virtu\u00e1lis DOM elemet: function createElementFromHTML ( html ) { const virtualElement = document . createElement ( \"div\" ); virtualElement . innerHTML = html ; return virtualElement . childElementCount == 1 ? virtualElement . firstChild : virtualElement . children ; } Erre az\u00e9rt van sz\u00fcks\u00e9g, mert nincs arra nat\u00edv JavaScript API (jelenleg), hogy stringb\u0151l HTML elemet hozzunk l\u00e9tre, viszont b\u00e1rmely (ak\u00e1r virtu\u00e1lis, teh\u00e1t az aktu\u00e1lis DOM-ban nem, de mem\u00f3ri\u00e1ban l\u00e9tez\u0151) DOM elem innerHTML-j\u00e9nek be\u00e1ll\u00edt\u00e1s\u00e1val a DOM elem(ek) t\u00e9nylegesen l\u00e9trej\u00f6n/nek. Alternat\u00edv megold\u00e1sk\u00e9nt megtehetn\u00e9nk, hogy l\u00e9trehozzuk a createElement seg\u00edts\u00e9g\u00e9vel az elemet, majd egyes\u00e9vel be\u00e1ll\u00edtjuk az attrib\u00fatumait, de az j\u00f3val k\u00f6r\u00fclm\u00e9nyesebb, k\u00f3dol\u00f3sabb megold\u00e1st eredm\u00e9nyez. function renderTodos () { const todoList = document . getElementById ( \"todo-list\" ); // megkeress\u00fck a kont\u00e9nert, ahov\u00e1 az elemeket tessz\u00fck todoList . innerHTML = \"\" ; // a jelenleg a DOM-ban lev\u0151 to-do elemeket t\u00f6r\u00f6lj\u00fck todos . forEach ( todo => { // bej\u00e1rjuk a jelenlegi todo elemeket (alternat\u00edv, funkcion\u00e1lis bej\u00e1r\u00e1ssal) const row = createElementFromHTML ( `<div class=\"row\"> <div class=\"col d-flex p-0\"> <a class=\"list-group-item flex-grow-1\" href=\"#\"> ${ todo . name } </a> <div class=\"btn-group action-buttons\"></div> </div> </div>` ); buttons . forEach ( button => { // a gomb modellek alapj\u00e1n legy\u00e1rtjuk a DOM gombokat const btn = createElementFromHTML ( `<button class=\"btn btn-outline- ${ button . type } fas fa- ${ button . icon } \" title=\" ${ button . title } \"></button>` ); if ( todo . state === button . action ) // azt a gombot letiljuk, amilyen \u00e1llapotban van egy elem btn . disabled = true ; // TODO: a gomb klikk esem\u00e9ny\u00e9nek kezel\u00e9se row . querySelector ( \".action-buttons\" ). appendChild ( btn ); // a virtu\u00e1lis elem gomb kont\u00e9ner\u00e9be beletessz\u00fck a gombot }); todoList . appendChild ( row ); // az \u00f6ssze\u00e1ll\u00edtott HTML-t a DOM-ban lev\u0151 #todo-list elemhez f\u0171zz\u00fck }); } renderTodos (); // kezdeti \u00e1llapot kirajzol\u00e1sa Tip A querySelector()/querySelectorAll() API-kkal egy CSS szelektort adhatunk meg a document-en vagy egy elemen, \u00e9s az illeszked\u0151 els\u0151/\u00f6sszes elemet kapjuk vissza. Most m\u00e1r l\u00e1tjuk, hogy mi fog ker\u00fclni a // TODO komment hely\u00e9re a form elk\u00fcld\u00e9sekor: renderTodos (); Warning Ha abba a hib\u00e1ba esn\u00e9nk, hogy a DOM elemeket egyes\u00e9vel szeretn\u00e9nk elt\u00e1vol\u00edtani a DOM-b\u00f3l a #todo-list elem children tulajdons\u00e1g\u00e1nak seg\u00edts\u00e9g\u00e9vel, vigy\u00e1znunk kell, ugyanis ez egy \"\u00e9l\u0151\" kollekci\u00f3: mik\u00f6zben az elemeket t\u00f6r\u00f6lj\u00fck, a kollekci\u00f3 length tulajdons\u00e1ga is v\u00e1ltozik! Persze egy egyszer\u0171 for ciklussal megoldhat\u00f3, de mindenk\u00e9ppen a v\u00e9g\u00e9t\u0151l indulva j\u00e1rjuk be a kollekci\u00f3t, am\u00edg az ki nem \u00fcr\u00fcl! BEADAND\u00d3 (1 pont) Illesszen be egy k\u00e9perny\u0151k\u00e9pet n\u00e9h\u00e1ny hozz\u00e1adott tennival\u00f3r\u00f3l! ( f1.png )","title":"Feladat 1 - Egyszer\u0171 esem\u00e9nykezel\u00e9s"},{"location":"laborok/11-js/#feladat-2-allapotok","text":"A DOM elemekre kattintva be tudjuk \u00e1ll\u00edtani az aktu\u00e1lis \u00e1llapotot, ezt a DOM elemhez esem\u00e9nykezel\u0151 rendel\u00e9s\u00e9vel tehetj\u00fck meg. Esem\u00e9nykezel\u0151t a HTML-ben az on\\* attrib\u00fatumok megad\u00e1s\u00e1val tudunk k\u00f6tni, JavaScriptben a DOM API-t haszn\u00e1lva pl. az elem referenci\u00e1j\u00e1t megszerezve az .addEventListener(\"esem\u00e9nyn\u00e9v\", callbackF\u00fcggv\u00e9ny) f\u00fcggv\u00e9ny megh\u00edv\u00e1s\u00e1val vagy a megfelel\u0151 feliratkoztat\u00f3 f\u00fcggv\u00e9ny be\u00e1ll\u00edt\u00e1s\u00e1val (pl. onclick = callbackF\u00fcggv\u00e9ny ). A JS k\u00f3dot az al\u00e1bbival eg\u00e9sz\u00edts\u00fck ki: let currentTab ; // a jelenleg kiv\u00e1lasztott f\u00fcl function selectTab ( type ) { currentTab = type ; // elt\u00e1roljuk a jelenlegi f\u00fcl \u00e9rt\u00e9ket for ( let tab of document . getElementsByClassName ( \"todo-tab\" )) { tab . classList . remove ( \"active\" ); // az \u00f6sszes f\u00fclr\u0151l levessz\u00fck az .active oszt\u00e1lyt if ( tab . getAttribute ( \"data-tab-name\" ) == type ) // ha ez a f\u00fcl van \u00e9pp kiv\u00e1lasztva tab . classList . add ( \"active\" ); // erre az egyre visszatessz\u00fck az .active oszt\u00e1lyt } renderTodos (); // \u00fajrarajzolunk mindent } selectTab ( \"all\" ); // app indul\u00e1sakor kiv\u00e1lasztjuk az \"all\" f\u00fclet self-invoking function declaration A fenti minta, amikor egy f\u00fcggv\u00e9nyt a defini\u00e1l\u00e1sa ut\u00e1n k\u00f6zvetlen\u00fcl megh\u00edvunk, egy \"cs\u00fany\u00e1bb\", de elterjedt alternat\u00edv\u00e1val szokt\u00e1k alkalmazni, ez az \u00fan. self-invoking function declaration , aminek sok v\u00e1ltozata ismeretes, ez az egyik: ( const selectTab = function ( type ) { /* ... */ })( \"all\" ); A selectTab f\u00fcggv\u00e9ny h\u00edv\u00e1s\u00e1t a HTML-b\u0151l k\u00f6ss\u00fck a klikk esem\u00e9nyre (megtehetn\u00e9nk k\u00f3db\u00f3l is, de l\u00e1ssunk erre is p\u00e9ld\u00e1t), cser\u00e9lj\u00fck le a tabok tartalm\u00e1t: < li class = \"nav-item\" > < a class = \"todo-tab nav-link\" data-tab-name = \"all\" href = \"#all\" onclick = \"selectTab('all')\" > All < span class = \"badge bg-secondary\" > 1 </ span > </ a > </ li > < li class = \"nav-item\" > < a class = \"todo-tab nav-link\" data-tab-name = \"active\" href = \"#active\" onclick = \"selectTab('active')\" > Active < span class = \"badge bg-secondary\" > 1 </ span > </ a > </ li > < li class = \"nav-item\" > < a class = \"todo-tab nav-link\" data-tab-name = \"inactive\" href = \"#inactive\" onclick = \"selectTab('inactive')\" > Inactive < span class = \"badge bg-secondary\" ></ span > </ a > </ li > < li class = \"nav-item\" > < a class = \"todo-tab nav-link\" data-tab-name = \"done\" href = \"#done\" onclick = \"selectTab('done')\" > Done < span class = \"badge bg-secondary\" ></ span > </ a > </ li > Az elemhez adatt\u00e1rol\u00f3 attrib\u00fatumot is rendelt\u00fcnk, ezt az attrib\u00fatumot a data- el\u0151taggal l\u00e1ttuk el jelezv\u00e9n, hogy az attrib\u00fatum kiz\u00e1r\u00f3lag adathordoz\u00e1sra szolg\u00e1l. Az elemek \u00e1llapot\u00e1nak v\u00e1ltoz\u00e1s\u00e1t hasonl\u00f3k\u00e9ppen kezelhetj\u00fck, amikor a gombokat gy\u00e1rtjuk a renderTodos() f\u00fcggv\u00e9nyben, az esem\u00e9nykezel\u0151ket ott helyben fel tudjuk regisztr\u00e1lni (a // TODO komment hely\u00e9re ker\u00fclj\u00f6n): btn . onclick = () => { // klikk esem\u00e9nyre if ( button . action === \"remove\" ) { // ha t\u00f6rl\u00e9s if ( confirm ( \"Are you sure you want to delete the todo titled '\" + todo . name + \"'?\" )) { // meger\u0151s\u00edt\u00e9s ut\u00e1n todos . splice ( todos . indexOf ( todo ), 1 ); // kivesz\u00fcnk a 'todo'-adik elemt\u0151l 1 elemet a todos t\u00f6mbb\u0151l renderTodos (); } } else { // ha nem t\u00f6rl\u00e9s todo . state = button . action ; // \u00e1t\u00e1ll\u00edtjuk a kiv\u00e1lasztott todo \u00e1llapot\u00e1t a gomb \u00e1llapot\u00e1ra renderTodos (); } } Tip \u00c9rdekess\u00e9g a confirm() f\u00fcggv\u00e9ny, amely b\u00f6ng\u00e9sz\u0151ben nat\u00edvan implement\u00e1lt: a felhaszn\u00e1l\u00f3nak egy egyszer\u0171 meger\u0151s\u00edt\u0151 ablakot dob fel a megadott sz\u00f6veggel, \u00e9s blokkolva v\u00e1rakozik a v\u00e1laszra. A v\u00e1lasz egy boolean \u00e9rt\u00e9k, \u00edgy az if t\u00f6rzse csak akkor fut le, ha a felhaszn\u00e1l\u00f3 OK-val v\u00e1laszol. Hasonl\u00f3 az alert() , az viszont csak egy OK-zhat\u00f3 figyelmeztet\u00e9st dob fel, ami nem t\u00e9r vissza semmivel, ill. a prompt() , amivel stringet k\u00e9rhet\u00fcnk be. Ezeket ritk\u00e1n, lehet\u0151leg soha nem haszn\u00e1ljuk, helyett\u00fck nem blokkol\u00f3, aszinkron egyedi megold\u00e1st k\u00e9sz\u00edt\u00fcnk. Ha for (var ... in ...) ciklust \u00e9s function -t haszn\u00e1ln\u00e1nk a buttons \u00e9s todos t\u00f6mb\u00f6k\u00f6n, akkor a klikk esem\u00e9nykezel\u0151 ebben a form\u00e1ban hib\u00e1s lesz, mert az iter\u00e1ci\u00f3k \u00fajrahasznos\u00edtan\u00e1k a todo \u00e9s button v\u00e1ltoz\u00f3kat. Az arrow function viszont ezeket a v\u00e1ltoz\u00f3kat \u00fan. \"closure\"-be helyezi, technikailag a v\u00e1ltoz\u00f3kb\u00f3l egy lok\u00e1lis m\u00e1solat k\u00e9sz\u00fcl, \u00edgy a f\u00fcggv\u00e9ny helyesen fog lefutni. Eg\u00e9sz\u00edts\u00fck ki a renderTodos() f\u00fcggv\u00e9nyt, hogy friss\u00edtse a f\u00fclek mellett tal\u00e1lhat\u00f3 badge-ben megjelen\u0151 sz\u00e1m\u00e9rt\u00e9keket: document . querySelector ( \".todo-tab[data-tab-name='all'] .badge\" ). innerHTML = todos . length || \"\" ; for ( let state of states ) document . querySelector ( `.todo-tab[data-tab-name=' ${ state } '] .badge` ). innerHTML = todos . filter ( t => t . state === state ). length || \"\" ; Info A filter() f\u00fcggv\u00e9nynek egy callbacket adunk \u00e1t, ez fog ki\u00e9rt\u00e9kel\u0151dni minden elemre: ha a felt\u00e9tel igaz, akkor az elemet visszakapjuk, k\u00fcl\u00f6nben nem. Magyarul: azokra az elemekre sz\u0171r\u00fcnk, amelyek \u00e1llapota az aktu\u00e1lisan bej\u00e1rt \u00e1llapot (\"active\", \"inactive\", \"done\"), teh\u00e1t megsz\u00e1moljuk, h\u00e1ny elem van az adott st\u00e1tuszban. Ezen fel\u00fcl, ha az \u00e9rt\u00e9k falsey , teh\u00e1t eset\u00fcnkben 0, helyette \u00fcres stringet adunk vissza, \u00edgy nem fog megjelenni a badge. Utols\u00f3 l\u00e9p\u00e9sk\u00e9nt logikus, hogy az aktu\u00e1lis f\u00fcl alapj\u00e1n sz\u0171rj\u00fck le az elemeket, ne mindig az \u00f6sszes l\u00e1tsz\u00f3djon. Ezt a renderTodos() apr\u00f3 m\u00f3dos\u00edt\u00e1s\u00e1val tudjuk megtenni, a todos.forEach(todo => helyett \u00edrjuk az al\u00e1bbit: todos . filter ( todo => [ \"all\" , todo . state ]. includes ( currentTab )). forEach ( todo => { Tip Kicsit b\u0151besz\u00e9d\u0171bb, de ekvivalens megold\u00e1s az al\u00e1bbi: const filtered = todos . filter ( function ( todo ){ return todo . state === currentTab || currentTab === \"all\" ; }); filtered . forEach ( function ( todo ) { // ... Teh\u00e1t az eredeti todos t\u00f6mb\u00f6t a filter seg\u00edts\u00e9g\u00e9vel sz\u0171rj\u00fck \u00fagy, hogy csak azok az elemek maradjanak a sz\u0171rt t\u00f6mbben, ami az aktu\u00e1lis f\u00fclnek megfelel VAGY az \"all\" f\u00fcl\u00f6n gyunk (teh\u00e1t l\u00e1tsz\u00f3djon minden). Szint\u00e9n alternat\u00edv megold\u00e1sk\u00e9nt, valamivel optim\u00e1lisabban fut\u00f3, a f\u00fcl vizsg\u00e1latot kiszervezhetj\u00fck: ( currentTab === 'all' ? todos : todos . filter ( todo => todo . state === currentTab )). forEach ( todo => { BEADAND\u00d3 (1 pont) Illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet ( f2.1.png , f2.2.png , f2.3.png ) a tennival\u00f3k \u00e1llapotainak v\u00e1ltoztat\u00e1s\u00e1r\u00f3l, a k\u00fcl\u00f6nb\u00f6z\u0151 oldalakon t\u00f6rt\u00e9n\u0151 megjelen\u00e9s\u00fckr\u0151l!","title":"Feladat 2 - \u00c1llapotok"},{"location":"laborok/11-js/#feladat-3-onallo-sorrendezes","text":"Legyenek fel-le mozgathat\u00f3k a to-do elemek az all list\u00e1ban! Hozzon l\u00e9tre k\u00e9t \u00faj gombot, amely a felfel\u00e9 \u00e9s lefel\u00e9 mozgat\u00e1st jelzik az elemn\u00e9l! Haszn\u00e1lja a fas fa-arrow-up \u00e9s fas fa-arrow-down oszt\u00e1lyokat az ikonokhoz! A gombok csak az all f\u00fcl\u00f6n legyenek l\u00e1that\u00f3k! A gomb legyen letiltva, ha nem mozgathat\u00f3 a megadott ir\u00e1nyba az elem! A gombra kattintva az elem ker\u00fclj\u00f6n el\u0151r\u00e9bb/h\u00e1tr\u00e9bb az elemek list\u00e1j\u00e1ban! BEADAND\u00d3 (1.5 pont) Illesszen be egy-egy k\u00e9perny\u0151k\u00e9pet n\u00e9h\u00e1ny tennival\u00f3r\u00f3l sorrendez\u00e9s el\u0151tt \u00e9s ut\u00e1n! ( f3.1.png , f3.2.png )","title":"Feladat 3 (\u00d6n\u00e1ll\u00f3) - Sorrendez\u00e9s"},{"location":"laborok/11-js/#feladat-4-onallo-perzisztalas","text":"Egy to-do list\u00e1nak nem sok \u00e9rtelme van, ha nem menthet\u0151k el az adataink. A ment\u00e9sre egy\u00e9rtelm\u0171 lehet\u0151s\u00e9get biztos\u00edt a localStorage \u00e9s a sessionStorage . Mindkett\u0151 kulcs-\u00e9rt\u00e9k t\u00e1rol\u00f3, a kulcsok \u00e9s \u00e9rt\u00e9kek egyar\u00e1nt string t\u00edpus\u00faak. A k\u00fcl\u00f6nbs\u00e9g a kett\u0151 k\u00f6z\u00f6tt az \u00e9lettartamuk: m\u00edg a localStorage - b\u00e1r korl\u00e1tos m\u00e9ret\u0171 - a b\u00f6ng\u00e9sz\u0151t \u00fajraind\u00edtva is megtartja \u00e1llapot\u00e1t, a sessionStorage a b\u00f6ng\u00e9sz\u0151t/f\u00fclet bez\u00e1rva elv\u00e9sz. A sessionStorage adatokat mem\u00f3ri\u00e1ban, a localStorage adatokat viszont perzisztensen, f\u00e1jlban t\u00e1rolja a b\u00f6ng\u00e9sz\u0151. A t\u00e1rol\u00e1shoz minden renderel\u00e9si ciklus elej\u00e9n volna \u00e9rdemes menten\u00fcnk. B\u00e1r az alkalmaz\u00e1sunk renderTodos() f\u00fcggv\u00e9nye nev\u00e9b\u0151l fakad\u00f3an a DOM-ot manipul\u00e1lja, ez az a pont, ahol b\u00e1rmilyen v\u00e1ltoz\u00e1sr\u00f3l \u00e9rtes\u00fcl\u00fcnk. Fontos, hogy tartsuk be a separation of concerns elvet: mindenki a saj\u00e1t feladat\u00e1val foglalkozzon! Ez\u00e9rt ne itt val\u00f3s\u00edtsuk meg a perziszt\u00e1l\u00e1st, hanem egy saj\u00e1t f\u00fcggv\u00e9nyben, amit megh\u00edvunk minden v\u00e1ltoz\u00e1st induk\u00e1l\u00f3 ponton a k\u00f3dban: elem \u00e1llapot\u00e1nak v\u00e1ltoz\u00e1sa, elem l\u00e9trehoz\u00e1sa, elem t\u00f6rl\u00e9se. ! note V\u00e1ltoz\u00e1sdetekt\u00e1l\u00e1s Komplexebb alkalmaz\u00e1sfejleszt\u0151 keretrendszerekben is probl\u00e9m\u00e1t okoz a v\u00e1ltoz\u00e1sokr\u00f3l t\u00f6rt\u00e9n\u0151 \u00e9rtes\u00fcl\u00e9s, a React, az AngularJS \u00e9s az Angular mind m\u00e1s \u00e9s m\u00e1s m\u00f3dszereket alkalmaznak a v\u00e1ltoz\u00e1sok detekt\u00e1l\u00e1s\u00e1ra. A t\u00e1rol\u00e1shoz a localStorage.setItem(key, value) f\u00fcggv\u00e9nyt haszn\u00e1ljuk. A soros\u00edtand\u00f3 objektumot egyszer\u0171en JSON-be soros\u00edthatjuk: JSON.stringify(object) , illetve visszafejthetj\u00fck: JSON.parse(string) . Objektum soros\u00edt\u00e1s Fontos, hogy a JSON.parse() \u00e1ltal visszafejtett objektumok egyszer\u0171 objektumok, ha a forr\u00e1s objektumunkon pl. f\u00fcggv\u00e9nyek is szerepeltek, azok a deszerializ\u00e1lt objektumon nem lesznek el\u00e9rhet\u0151k! A r\u00e9szfeladatok teh\u00e1t: k\u00e9sz\u00edtsen egy f\u00fcggv\u00e9nyt, ami elmenti a teljes todos t\u00f6mb tartalm\u00e1t localStorage -ba, b\u00e1rmilyen v\u00e1ltoz\u00e1s hat\u00e1s\u00e1ra (elem \u00e1llapotv\u00e1ltoz\u00e1sa, l\u00e9trej\u00f6tte, t\u00f6rl\u00e9se) mentse el a f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9vel az elemeket, alkalmaz\u00e1s indul\u00e1sakor egyetlen alkalommal t\u00f6ltse vissza az \u00f6sszes elt\u00e1rolt todo elemet, \u00e9s ez legyen a todos v\u00e1ltoz\u00f3 kiindul\u00f3 tartalma! Storage debuggol\u00e1s A storage tartalm\u00e1t b\u00f6ng\u00e9sz\u0151t\u0151l f\u00fcgg\u0151en k\u00fcl\u00f6nb\u00f6z\u0151 helyen tudjuk megvizsg\u00e1lni, jellemz\u0151en a Storage vagy Debugger f\u00fcl\u00f6n tal\u00e1lhat\u00f3. BEADAND\u00d3 (1.5 pont) Illesszen be egy k\u00e9perny\u0151k\u00e9pet a lok\u00e1lis t\u00e1rol\u00f3ban (localStorage) tal\u00e1lhat\u00f3 perziszt\u00e1lt to-do elemekr\u0151l! ( f4.png )","title":"Feladat 4 (\u00d6n\u00e1ll\u00f3) - Perziszt\u00e1l\u00e1s"},{"location":"laborok/12-jquery/","text":"Labor 12 - jQuery \u00b6 Bevezet\u00e9s \u00b6 A laborok sor\u00e1n a hallgat\u00f3k laborvezet\u0151i seg\u00edts\u00e9ggel, majd \u00f6n\u00e1ll\u00f3an v\u00e9geznek feladatokat a webes technol\u00f3gi\u00e1k gyakorlati megismer\u00e9se \u00e9rdek\u00e9ben. A feladatok megold\u00e1sa sor\u00e1n ne felejtsd el k\u00f6vetni a feladat bead\u00e1s folyamat\u00e1t TODO LINK. Git repository l\u00e9trehoz\u00e1sa \u00e9s projekt ind\u00edt\u00e1sa \u00b6 Moodle-ben keresd meg a laborhoz tartoz\u00f3 megh\u00edv\u00f3 URL-j\u00e9t \u00e9s annak seg\u00edts\u00e9g\u00e9vel hozd l\u00e9tre a saj\u00e1t repository-dat. V\u00e1rd meg, m\u00edg elk\u00e9sz\u00fcl a repository, majd checkout-old ki. Egyetemi laborokban, ha a checkout sor\u00e1n nem k\u00e9r a rendszer felhaszn\u00e1l\u00f3nevet \u00e9s jelsz\u00f3t, \u00e9s nem siker\u00fcl a checkout, akkor val\u00f3sz\u00edn\u0171leg a g\u00e9pen kor\u00e1bban megjegyzett felhaszn\u00e1l\u00f3n\u00e9vvel pr\u00f3b\u00e1lkozott a rendszer. El\u0151sz\u00f6r t\u00f6r\u00f6ld ki a mentett bel\u00e9p\u00e9si adatokat (l\u00e1sd itt), \u00e9s pr\u00f3b\u00e1ld \u00fajra. Hozz l\u00e9tre egy \u00faj \u00e1gat megoldas n\u00e9ven, \u00e9s ezen az \u00e1gon dolgozz. A neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dodat. A f\u00e1jlban semmi m\u00e1s ne szerepeljen, csak egyetlen sorban a Neptun k\u00f3d 6 karaktere. Nyissuk meg a Visual Studio Code-dal a l\u00e9trehozott k\u00f6nyvt\u00e1rat (File -> Open Folder)! Az alkalmaz\u00e1s futtat\u00e1s\u00e1hoz adjuk ki a Terminalban (Ctrl+\u00f6) az al\u00e1bbi parancsot: http-server (\u00fcgyelj\u00fcnk arra, hogy a helyes \u00fatvonalon adjuk ki a parancsot, ahov\u00e1 a kiindul\u00f3 projektet csomagoltuk ki), vagy haszn\u00e1ljuk a VS Code Live Servert a megszokott m\u00f3don (Go Live lehet\u0151s\u00e9g a jobb als\u00f3 sarokban az index.html megnyit\u00e1sa ut\u00e1n, vagy F1 > \"Live Server: Open with Live Server\")! Ellen\u0151rizz\u00fck, hogy a megfelel\u0151 k\u00f6nyvt\u00e1rban ind\u00edtottuk-e el a szervert! Eml\u00e9keztet\u0151k\u00e9nt n\u00e9h\u00e1ny gondolat a jQuery-r\u0151l A jQuery \u00b6 A jQuery egy \"sv\u00e1jcibicska-szer\u0171\" JavaScript library. Jelent\u0151s\u00e9ge napjainkban az alkalmaz\u00e1sfejleszt\u0151 keretrendszerek jav\u00e1ra egyre cs\u00f6kken, viszont az alapkoncepci\u00f3k meg\u00e9rt\u00e9s\u00e9re tov\u00e1bbra is hasznos eszk\u00f6z. Els\u0151sorban kieg\u00e9sz\u00edt\u00e9sk\u00e9ppen haszn\u00e1lj\u00e1k k\u00fcl\u00f6nf\u00e9le dinamikusan gener\u00e1lt HTML tartalmakhoz t\u00f6rt\u00e9n\u0151 dinamizmus hozz\u00e1rendel\u00e9s\u00e9vel, nem pedig teljes, \u00f6n\u00e1ll\u00f3, kliensoldali alkalmaz\u00e1s fejleszt\u00e9s\u00e9re (de ut\u00f3bbira is haszn\u00e1lhat\u00f3). A jQuery API a $ (\u00e9s ritk\u00e1bban a jQuery ) glob\u00e1lis v\u00e1ltoz\u00f3n kereszt\u00fcl \u00e9rhet\u0151 el, alapvet\u0151en az al\u00e1bbi m\u00f3dokon: const elements = $('ul li.active') : a megadott CSS selectornak megfelel\u0151 DOM elemeket v\u00e1lasztja ki, \u00e9s visszaadja egy jQuery objektumban . A b\u00e1rmilyen m\u00f3don szerzett jQuery objektum hivatkoz\u00e1sokon az al\u00e1bbihoz hasonl\u00f3 lehet\u0151s\u00e9geink vannak: A jQuery objektum p\u00e9ld\u00e1nyai egyben t\u00f6mb\u00f6k, amik tartalmazz\u00e1k a megtal\u00e1lt nat\u00edv DOM elemeket (teh\u00e1t iter\u00e1lhatunk rajta), ill. a jQuery p\u00e9ld\u00e1nyf\u00fcggv\u00e9nyeit tartalmazz\u00e1k, amelyek el\u00e9rik az illesztett DOM elemeket. .show() , .hide() , .toggle() : az illesztett elemeket megjelen\u00edti vagy elrejti az\u00e1ltal, hogy az elemre inline display: none st\u00edlust helyezi, .append(e) , .appendTo(e) , .before(e) , .after(e) , az elemhez/el\u00e9/ut\u00e1n sz\u00far be \u00fajabb elemeket (jQuery szelektorral el\u00e9rt elemeket, DOM elemeket vagy HTML tartalmat), .attr() : gyakori, hogy egy f\u00fcggv\u00e9ny getter-setterk\u00e9nt m\u0171k\u00f6dik, ilyen az attr is. Ha egy param\u00e9tert adunk \u00e1t, az adott attrib\u00fatum \u00e9rt\u00e9k\u00e9t kapjuk vissza, ha kett\u0151t, a m\u00e1sodik param\u00e9ter az els\u0151 n\u00e9ven adott attrib\u00fatum \u00e9rt\u00e9ke lesz (minden illesztett elemre). .on() : esem\u00e9nykezel\u0151 feliratkoztat\u00e1sa az adott n\u00e9vvel. K\u00e9t param\u00e9ter eset\u00e9n ha a m\u00e1sodik param\u00e9ter a callback, \u00fagy az h\u00edv\u00f3dik meg az adott elemen; ha a callback el\u0151tt egy szelektort is megadunk, az \"\u00e9l\u0151\" feliratkoz\u00e1s lesz az illesztett elemen bel\u00fcli lesz\u00e1rmazott gyerekekre. P\u00e1rja az .off() , amellyel esem\u00e9nykezel\u0151t iratkoztathatunk le, ez\u00e1ltal elker\u00fclve az esetleges mem\u00f3riasziv\u00e1rg\u00e1st. .click() , .submit() stb.: az adott JavaScript esem\u00e9nyek els\u00fct\u00e9se (param\u00e9ter n\u00e9lk\u00fcl) vagy feliratkoz\u00e1s az esem\u00e9nyre (callback megad\u00e1s\u00e1val) az illesztett elemeken. Elavult, ehelyett a fentebb le\u00edrt .on() -t haszn\u00e1ljuk feliratkoz\u00e1sra, a .trigger() -t pedig els\u00fct\u00e9sre. .data(name) : a DOM elem data-{name} attrib\u00fatum\u00e1ban szerepl\u0151 \u00e9rt\u00e9k be\u00e1ll\u00edt\u00e1s\u00e1ra \u00e9s lek\u00e9rdez\u00e9s\u00e9re haszn\u00e1lhatjuk. A lek\u00e9rdez\u00e9s gyakorlatilag ekvivalens azzal, mintha az al\u00e1bbit haszn\u00e1ln\u00e1nk: .attr(\"data-name\").val() . Eml\u00e9keztet\u0151k\u00e9nt, a CSS-ben attrib\u00fatum alapj\u00e1n lek\u00e9rdezni elemet az al\u00e1bbi m\u00f3don tudunk: $(\"elem[data-my-value='value']\") . A data- attrib\u00fatumok tetsz\u0151leges kulcs-\u00e9rt\u00e9k p\u00e1rok t\u00e1rol\u00e1s\u00e1ra szolg\u00e1lnak a DOM-ban. Nagyon gyakori, hogy az egyes elemeken v\u00e9gzett m\u0171veleteket l\u00e1ncoljuk az al\u00e1bbihoz hasonl\u00f3 m\u00f3don: $(\".button\").before(spinner).attr(\"disabled\", true) . $(function () { /*...*/ }) : az \u00edgy megadott f\u00fcggv\u00e9ny a dokumentum bet\u00f6lt\u0151d\u00e9s\u00e9t k\u00f6vet\u0151en fut le. Ekvivalens a $(document).ready(function () { /*...*/} ) h\u00edv\u00e1ssal. $.ajax() , $.get() , $.post() stb.: a glob\u00e1lis jQuery objektumon el\u00e9rhet\u0151 statikus f\u00fcggv\u00e9nyek f\u00fcggetlenek az egyes DOM elemekt\u0151l, ezek pl. aszinkron AJAX k\u00e9r\u00e9sek v\u00e9grehajt\u00e1s\u00e1ra haszn\u00e1lhat\u00f3k. jQuery pluginek \u00b6 A jQuery kieg\u00e9sz\u00edt\u00e9sek\u00e9ppen egyszer\u0171bb \u00e9s bonyolultabb plugineket haszn\u00e1lhatunk. Ezek a pluginek jellemz\u0151en a jQuery objektumra \u00fajabb f\u00fcggv\u00e9nyeket helyeznek el, amelyek seg\u00edts\u00e9g\u00e9vel a kieg\u00e9sz\u00edt\u0151 funkcionalit\u00e1s el\u00e9rhet\u0151. A Boostrap k\u00e9tf\u00e9le m\u00f3don teszi el\u00e9rhet\u0151v\u00e9 a plugineket: data-attib\u00fatumok form\u00e1j\u00e1ban \u00e9s a jQuery API-n kereszt\u00fcl. A fontosabbak pl.: .modal() .dropdown() , .tooltip() , .alert() , .collapse() . B\u0151vebben a Bootstrap jQuery pluginekr\u0151l itt olvashat. Gyakran haszn\u00e1lt pluginokat ad m\u00e9g pl. a jQuery UI , amiben d\u00e1tum- \u00e9s id\u0151v\u00e1laszt\u00f3, dial\u00f3gusablak, progressbar stb. \"widgetek\" tal\u00e1lhat\u00f3k. Kiindul\u00f3 \u00e1ttekint\u00e9se \u00b6 A laboron k\u00e9sz\u00fcl\u0151 alkalmaz\u00e1s egy egyszer\u0171 kv\u00edzj\u00e1t\u00e9k, amely az Open Trivia Database publikus, ingyenesen el\u00e9rhet\u0151 API-j\u00e1t haszn\u00e1lja. A j\u00e1t\u00e9k menete az al\u00e1bbi lesz: A j\u00e1t\u00e9k opci\u00f3inak megad\u00e1sa a Let's play! gombra kattintva lehets\u00e9ges. Az opci\u00f3kn\u00e1l megadhat\u00f3 a k\u00e9rd\u00e9sek sz\u00e1ma (1 \u00e9s 50 k\u00f6z\u00f6tt), a k\u00e9rd\u00e9s kateg\u00f3ri\u00e1ja \u00e9s neh\u00e9zs\u00e9ge. Ezt k\u00f6vet\u0151en a j\u00e1t\u00e9k a Go! felirat\u00fa gombra kattintva ind\u00edthat\u00f3. A j\u00e1t\u00e9k sor\u00e1n a t\u00e1voli API-t\u00f3l lek\u00e9rdezett k\u00e9rd\u00e9sek fognak k\u00f6vetkezni. Az aktu\u00e1lis k\u00e9rd\u00e9s sorsz\u00e1ma \u00e9s az \u00f6sszes k\u00e9rd\u00e9s sz\u00e1ma l\u00e1that\u00f3 a k\u00e9rd\u00e9s oldal\u00e1n, a k\u00e9rd\u00e9s kateg\u00f3ri\u00e1ja, a k\u00e9rd\u00e9s sz\u00f6vege, valamint a 4 v\u00e1laszlehet\u0151s\u00e9g, amelyek k\u00f6z\u00fcl mindig pontosan egy lesz helyes. A 4 v\u00e1laszlehet\u0151s\u00e9g egyik\u00e9re kattintva visszajelz\u00e9s \u00e9rkezik a v\u00e1lasz helyess\u00e9g\u00e9r\u0151l. Ha a v\u00e1lasz helytelen volt, a helyes v\u00e1laszt is jelzi az alkalmaz\u00e1s. A k\u00e9rd\u00e9sek v\u00e9g\u00e9re \u00e9rve az alkalmaz\u00e1s jelzi, h\u00e1ny pontot \u00e9rt\u00fcnk el a maximumb\u00f3l, majd \u00faj j\u00e1t\u00e9k ind\u00edt\u00e1s\u00e1ra van lehet\u0151s\u00e9g. Eml\u00edt\u00e9sre m\u00e9lt\u00f3 m\u00e9g, hogy TypeScript t\u00e1mogat\u00e1ssal a JavaScript k\u00f3dunkban IntelliSense-t fogunk kapni (Visual Studio Code vagy Visual Studio haszn\u00e1lat\u00e1val) a jQuery k\u00f6nyvt\u00e1rhoz is! Az alkalmaz\u00e1s kiindul\u00f3 k\u00f3dj\u00e1t megvizsg\u00e1lva az al\u00e1bbi f\u00e1jlokat tal\u00e1ljuk: index.html : a kiindul\u00f3 HTML. A f\u00e1jlt a feladatok megold\u00e1s\u00e1hoz nem sz\u00fcks\u00e9ges m\u00f3dos\u00edtani. Ha a f\u00e1jlban m\u00f3dos\u00edt, dokument\u00e1lja a m\u00f3dos\u00edt\u00e1s\u00e1t! node_modules mappa : az npm csomagkezel\u0151vel let\u00f6lt\u00f6tt jQuery t\u00edpusdefin\u00edci\u00f3s f\u00e1jlok JavaScript (TypeScript) IntelliSense t\u00e1mogat\u00e1shoz tal\u00e1lhat\u00f3k itt. triviaut.js : egy \u00fcres JavaScript f\u00e1jl, amely az index.html <head> r\u00e9sz\u00e9ben ker\u00fclt hivatkoz\u00e1sra. Az alkalmaz\u00e1s forr\u00e1sk\u00f3dj\u00e1t ebbe a f\u00e1jlba sz\u00fcks\u00e9ges helyezni. start-game-form-contents.html : egy r\u00e9szleges HTML f\u00e1jl, amelyben a j\u00e1t\u00e9k ind\u00edt\u00e1s\u00e1hoz sz\u00fcks\u00e9ges opci\u00f3k le\u00edr\u00e1sa tal\u00e1lhat\u00f3. opentriviadb-logo.png : \u00e9rtelemszer\u0171en a fentebb hivatkozott API log\u00f3ja. node_modules A node_modules mapp\u00e1t nem szok\u00e1s felcommitolni a repositoryba mert tipikusan nagyon nagyra n\u0151het. Most csak az\u00e9rt ker\u00fclt bele a kiindul\u00f3 projektbe, hogy ne az \u00f3r\u00e1n kelljen az npm install parancsot kiadni. Vizsg\u00e1ljuk meg az index.html tartalm\u00e1t! A f\u00e1jlban l\u00e1that\u00f3, hogy be vannak hivatkozva az al\u00e1bbiak: a saj\u00e1t JavaScript f\u00e1jlunk, a triviaut.js , a Bootstrap CSS \u00e9s JavaScript f\u00e1jljai, a FontAwesome ikonk\u00e9szlet CSS f\u00e1jlja, a jQuery oszt\u00e1lyk\u00f6nyvt\u00e1r JS f\u00e1jlja. Fontos, hogy a JavaScript f\u00e1jl bet\u00f6lt\u0151d\u00e9sekor az addig a pontig elk\u00e9sz\u00fclt DOM-on k\u00e9pes manipul\u00e1ci\u00f3t v\u00e9gezni. Ezen k\u00edv\u00fcl l\u00e1thatjuk, hogy a HTML f\u00e1jlunkban egy <header> \u00e9s egy <main> elem tal\u00e1lhat\u00f3. A <header> tartalma sz\u00e1munkra statikus. A <main> -ben h\u00e1rom db <section> elemet l\u00e1thatunk az al\u00e1bbi ID-kkal ell\u00e1tva: lets-play-section : a j\u00e1t\u00e9k ind\u00edt\u00e1s\u00e1ra (az opci\u00f3k megjelen\u00edt\u00e9s\u00e9re) sz\u00e1nt gomb, start-game-form-section : a j\u00e1t\u00e9k opci\u00f3it tartalmaz\u00f3 <form> , amely a Loading... sz\u00f6veget tartalmazza - egyel\u0151re el van rejtve a style attrib\u00fatum display: none \u00e9rt\u00e9ke alapj\u00e1n, game-section : maga a j\u00e1t\u00e9kt\u00e9r, ahol a k\u00e9rd\u00e9sek tal\u00e1lhat\u00f3k, szint\u00e9n elrejtve tal\u00e1lhat\u00f3 a DOM-ban. Feladat 1 - J\u00e1t\u00e9k ind\u00edt\u00e1sa \u00b6 jQuery \u00e9s AJAX kipr\u00f3b\u00e1l\u00e1sa \u00b6 Pr\u00f3b\u00e1ljuk ki a jQuery k\u00f6nyvt\u00e1rat az al\u00e1bbi m\u00f3don: a szerver ind\u00edt\u00e1s\u00e1t k\u00f6vet\u0151en navig\u00e1ljunk a b\u00f6ng\u00e9sz\u0151ben az oldalra! Az F12 eszk\u00f6zt\u00e1ron nyissuk meg a Console-t, \u00e9s futtassuk az al\u00e1bbi parancsokat egyes\u00e9vel, sorrendben (k\u00f6zben figyelj\u00fck, mi t\u00f6rt\u00e9nik a fel\u00fcleten): $ ( \"#lets-play-section\" ). hide (); $ ( \"#start-game-form-section\" ). show (); $ ( \"#start-game-form-section, #game-section\" ). toggle (); L\u00e1thatjuk, hogy a .hide() , .show() \u00e9s .toggle() f\u00fcggv\u00e9nyek \u00e9rtelemszer\u0171en a CSS selector \u00e1ltal illesztett \u00f6sszes DOM elem display: none CSS tulajdons\u00e1g\u00e1t teszik fel a DOM elemre, vagy veszik azt le r\u00f3la. Tesztelj\u00fck a t\u00e1voli API-t! A triviaut.js f\u00e1jlba \u00edrjuk az al\u00e1bbi k\u00f3dot: $ . get ( \"https://opentdb.com/api.php?amount=10\" ). then ( function ( q ) { console . log ( q ); $ ( \"body\" ). text ( JSON . stringify ( q , '\\n' )); }); Ha mindent j\u00f3l csin\u00e1ltunk, az al\u00e1bbi (vagy nagyon hasonl\u00f3) hib\u00e1t l\u00e1tjuk a konzolon az oldal bet\u00f6lt\u0151d\u00e9s\u00e9t k\u00f6vet\u0151en: Uncaught ReferenceError: $ is not defined A JavaScript f\u00e1jlok bet\u00f6lt\u00e9si sorrendje kiemelten fontos! A bet\u00f6lt\u0151d\u00e9s sorrendje implik\u00e1lja a f\u00fcgg\u0151s\u00e9gi sorrendet is, ugyanis v\u00e9grehajt\u00e1suk a b\u00f6ng\u00e9sz\u0151ben alap\u00e9rtelmezetten az import\u00e1l\u00e1s sorrendj\u00e9vel megegyezik. Ha a saj\u00e1t f\u00e1jlunkat el\u0151bb hivatkozzuk, mint a jQuery-t, \u00fagy az ott fut\u00f3 k\u00f3d $ v\u00e1ltoz\u00f3ra t\u00f6rt\u00e9n\u0151 (szinkron) hivatkoz\u00e1sa hib\u00e1t dob (mert ekkor m\u00e9g nem futott le a jQuery $ objektumot defini\u00e1l\u00f3 k\u00f3d). A megold\u00e1s, hogy \u00e1t kell mozgatnunk a saj\u00e1t JS f\u00e1jlunk hivatkoz\u00e1s\u00e1t a HTML <head> elemben a jQuery hivatkoz\u00e1s ut\u00e1n (\u00e9rdemes minden k\u00fcls\u0151 f\u00fcgg\u0151s\u00e9g hivatkoz\u00e1sa ut\u00e1nra, teh\u00e1t a <head> v\u00e9g\u00e9re tenni). A $.get statikus f\u00fcggv\u00e9ny a $.ajax h\u00edv\u00e1s r\u00f6vid\u00edt\u00e9se, ahol a HTTP ige fixen a HTTP GET. Visszat\u00e9r\u00e9se egy Promise objektum, melyre a .then h\u00edv\u00e1ssal iratkozunk fel, ami 3 callback param\u00e9tert v\u00e1r (mindh\u00e1rom opcion\u00e1lis): a sikeres teljes\u00fcl\u00e9st, a hiba\u00e1gat, \u00e9s mindet. A fenti h\u00edv\u00e1s teh\u00e1t beh\u00edv a megadott URL-re, a kapott v\u00e1laszt a konzolon megjelen\u00edti, majd a <body> elem tartalm\u00e1t sz\u00f6vegesen lecser\u00e9li a kapott tartalmat string form\u00e1ra konvert\u00e1lva (a v\u00e1lasz ugyanis egy JSON objektum). Az al\u00e1bbi form\u00e1tum\u00fa v\u00e1lasz \u00e9rkezik a t\u00e1voli API-t\u00f3l: { \"response_code\" : 0 , \"results\" : [ { \"category\" : \"Entertainment: Film\" , \"type\" : \"multiple\" , \"difficulty\" : \"hard\" , \"question\" : \"In the 1976 film 'Taxi Driver', how many guns did Travis buy from the salesman?\" , \"correct_answer\" : \"4\" , \"incorrect_answers\" : [ \"2\" , \"6\" , \"1\" ] }, ... ] } J\u00e1t\u00e9k ind\u00edt\u00e1s logika \u00b6 Ind\u00edtsuk el a j\u00e1t\u00e9kot! A triviaut.js f\u00e1jl tartalm\u00e1t cser\u00e9lj\u00fck le az al\u00e1bbira: $ ( \"#lets-play-button\" ). on ( \"click\" , function ( e ) { $ ( e . target ). toggle (); $ ( \"#start-game-form\" ). toggle (); }); A fenti k\u00f3dr\u00e9szlettel elvileg a gombra kattintva elrejtj\u00fck a gombot \u00e9s megjelen\u00edtj\u00fck a j\u00e1t\u00e9k opci\u00f3s \u0171rlapj\u00e1t. A k\u00f3d viszont nem m\u0171k\u00f6dik. Ha ut\u00e1naj\u00e1runk, \u00fagy t\u0171nik, hogy nem t\u00f6rt\u00e9nik feliratkoz\u00e1s. Futtassuk le el\u0151tte az al\u00e1bbi k\u00f3dot is (a JS f\u00e1jl elej\u00e9n): console . log ( $ ( \"#lets-play-button\" ). length ); A konzolon a 0 \u00e9rt\u00e9k jelenik meg, teh\u00e1t ilyen nincsen a DOM-ban. A probl\u00e9ma, hogy a JS f\u00e1jlunk kor\u00e1bban fut, mint a DOM bet\u00f6lt\u0151dne! Fontos teh\u00e1t megv\u00e1rnunk, am\u00edg ez megt\u00f6rt\u00e9nik. A klasszikus m\u00f3dja ennek az al\u00e1bbi megad\u00e1s: $ ( document ). ready ( function () { // itt m\u00e1r elk\u00e9sz\u00fclt a DOM! }) A fenti teh\u00e1t kiv\u00e1lasztja a document elemet a DOM-b\u00f3l, teh\u00e1t a teljes DOM gy\u00f6ker\u00e9t, aminek feliratkozik a ready pszeudo-esem\u00e9ny\u00e9re (ilyen konkr\u00e9t DOM esem\u00e9ny ugyanis nincsen). A fentivel ekvivalens megad\u00e1s az al\u00e1bbi, ahol arrow function -t haszn\u00e1lunk: $ (() => { // itt m\u00e1r elk\u00e9sz\u00fclt a DOM! }); Arrow function A fenti szintaxisban a () => {} k\u00f3dr\u00e9szlet szint\u00e9n egy f\u00fcggv\u00e9ny deklar\u00e1ci\u00f3ja, melynek neve arrow function . Az arrow function szintaxis t\u00f6m\u00f6rebb, szint\u00e9n param\u00e9terezhet\u0151 ( a => a + 10 vagy (a, b) => { return a * b + 2; } ). Tov\u00e1bbi \u00e9rdekess\u00e9ge, hogy a function kulcssz\u00f3val megadott f\u00fcggv\u00e9nyekkel ellent\u00e9tben nem v\u00e1ltoztatja meg a this v\u00e1ltoz\u00f3 \u00e1ltal reprezent\u00e1lt f\u00fcggv\u00e9nyt (objektumot) sem. A kezdeti m\u0171k\u00f6d\u00e9s\u00fcnket teh\u00e1t el\u00e9rhetj\u00fck az al\u00e1bbi m\u00f3don: $ (() => { $ ( \"#lets-play-button\" ). on ( \"click\" , () => { $ ( \"#lets-play-section, #start-game-form-section\" ). toggle (); }); }); Teh\u00e1t a gombot tartalmaz\u00f3 \u00e9s a j\u00e1t\u00e9k opci\u00f3kat tartalmaz\u00f3 szekci\u00f3kat megjelen\u00edtj\u00fck/elrejtj\u00fck. Eg\u00e9sz\u00edts\u00fck ki tov\u00e1bb\u00e1 a fenti k\u00f3dot (a megfelel\u0151 helyen) azzal, hogy a formot reprezent\u00e1l\u00f3 HTML r\u00e9szletet let\u00f6ltj\u00fck a szervert\u0151l \u00e9s a megfelel\u0151 helyre sz\u00farjuk a DOM-ban: $ . get ( \"start-game-form-contents.html\" ) . then ( html => $ ( \"#start-game-form\" ). html ( html )); BEADAND\u00d3 (2 pont) M\u00e1soljon be egy teljes k\u00e9perny\u0151s k\u00e9perny\u0151k\u00e9pet az opci\u00f3k kezdeti \u00e1llapot\u00e1r\u00f3l, ahol el van rejtve az ind\u00edt\u00e1sra szolg\u00e1l\u00f3 gomb! ( f1.png ) Feladat 2 - Szerveroldali API haszn\u00e1lata \u00b6 T\u00f6lts\u00fck le a param\u00e9tereknek megfelel\u0151 elemeket a t\u00e1voli API-r\u00f3l! Ehhez szint\u00e9n a $.get f\u00fcggv\u00e9nyt tudjuk haszn\u00e1lni: // a glob\u00e1lis n\u00e9vt\u00e9rben deklar\u00e1ljuk az al\u00e1bbi v\u00e1ltoz\u00f3kat \u00e9s f\u00fcggv\u00e9nyt: let remainingQuestions , totalQuestions , currentQuestion , correctAnswerIndex ; function getNextQuestion () { } //... $ . get ( \"start-game-form-contents.html\" ). then ( html => $ ( \"#start-game-form\" ). html ( html ) . on ( \"submit\" , e => { // k\u00f6zvetlen\u00fcl a HTML besz\u00far\u00e1sa ut\u00e1n l\u00e1colhatjuk a 'submit' esem\u00e9nyre t\u00f6rt\u00e9n\u0151 feliratkoz\u00e1st e . preventDefault (); // a b\u00f6ng\u00e9sz\u0151 alap\u00e9rtelmezett m\u0171k\u00f6d\u00e9s\u00e9t meg\u00e1ll\u00edtjuk, amivel \u00fajrat\u00f6lten\u00e9 az oldalt $ ( \"#start-game-form button[type='submit']\" ). attr ( \"disabled\" , true ); // a Go! gombot letiltjuk, hogy ne lehessen \u00fajra API k\u00e9r\u00e9st ind\u00edtani, am\u00edg meg nem \u00e9rkezett a v\u00e1lasz $ . get ( \"https://opentdb.com/api.php?type=multiple&encode=base64&amount=\" + $ ( \"[name='trivia_amount']\" ). val ()). then ( data => { remainingQuestions = data . results ; console . log ( remainingQuestions ); currentQuestion = 0 ; totalQuestions = remainingQuestions . length ; $ ( \"#total-questions\" ). text ( totalQuestions ); $ ( \"#start-game-form button[type='submit']\" ). removeAttr ( \"disabled\" ); getNextQuestion (); }); })); BEADAND\u00d3 (0.5 pont) K\u00e9sz\u00edtsen k\u00e9perny\u0151k\u00e9pet a konzolon l\u00e1that\u00f3 \u00e9rkezett v\u00e1laszokr\u00f3l! ( f2.png ) Legyen l\u00e1that\u00f3, hogy h\u00e1ny v\u00e1lasz \u00e9rkezett, \u00e9s ez a sz\u00e1m ne az alap\u00e9rtelmezett 10 legyen! Feladat 3 (\u00d6n\u00e1ll\u00f3) - Difficulty \u00e9s Category \u00b6 K\u00e9sz\u00edtse el a marad\u00e9k k\u00e9t param\u00e9ter elk\u00fcld\u00e9s\u00e9t is a difficulty \u00e9s category relev\u00e1ns \u00e9rt\u00e9keinek megad\u00e1s\u00e1val! Haszn\u00e1lhatja a $().serializeArray() f\u00fcggv\u00e9nyt is! BEADAND\u00d3 (0.5 pont) Az \u00e9rkez\u0151 v\u00e1laszr\u00f3l a konzolon k\u00e9sz\u00edtsen k\u00e9perny\u0151k\u00e9pet! ( f3.png ) Feladat 4 - A j\u00e1t\u00e9k menete \u00b6 A meg\u00e9rkezett v\u00e1lasz kezel\u00e9s\u00e9hez a megfelel\u0151 mez\u0151ket ki kell t\u00f6lten\u00fcnk a HTML dokumentumban. A getNextQuestion() f\u00fcggv\u00e9ny k\u00f3dj\u00e1nak kezdem\u00e9nye az al\u00e1bbi lehet: currentQuestion ++ ; const question = remainingQuestions . pop (); if ( question === undefined ) { // TODO: nincs t\u00f6bb k\u00e9rd\u00e9s! return ; } correctAnswerIndex = Math . floor ( Math . random () * 4 ); const answers = question . incorrect_answers . slice (); answers . splice ( correctAnswerIndex , 0 , question . correct_answer ); $ ( \".answer .correct, .answer .incorrect, #next-question\" ). hide (); A f\u00fcggv\u00e9ny tov\u00e1bbi r\u00e9sz\u00e9t az al\u00e1bbi m\u00f3don implement\u00e1lja: rejtse el az opci\u00f3s \u0171rlapot, jelen\u00edtse meg a j\u00e1t\u00e9kteret, t\u00f6ltse ki a jelenlegi j\u00e1t\u00e9k sz\u00e1ml\u00e1l\u00f3j\u00e1t, t\u00f6ltse ki a k\u00e9rd\u00e9s kateg\u00f3ri\u00e1j\u00e1t ( atob(question.category) ), t\u00f6ltse ki a k\u00e9rd\u00e9s sz\u00f6veg\u00e9t (szint\u00e9n haszn\u00e1lja az atob() f\u00fcggv\u00e9nyt a base64 sz\u00f6veg dek\u00f3dol\u00e1s\u00e1hoz), vegye le az \u00f6sszes v\u00e1laszlehet\u0151s\u00e9gr\u0151l ( .answer ) a disabled attrib\u00fatumot (tipp: $().removeAttr() ), minden v\u00e1laszlehet\u0151s\u00e9g sz\u00f6veg\u00e9nek hely\u0151rz\u0151j\u00e9ben helyezze el a v\u00e1lasz sz\u00f6veg\u00e9t (\u00fcgyeljen r\u00e1, hogy ne t\u00f6r\u00f6lje ki a helyes/helytelen ikonokat, \u00e9s itt is haszn\u00e1lja az atob() konverzi\u00f3t)! BEADAND\u00d3 (1 pont) K\u00e9sz\u00edtsen k\u00e9perny\u0151k\u00e9pet a j\u00e1t\u00e9kt\u00e9ren megjelen\u0151 k\u00e9rd\u00e9sr\u0151l, v\u00e1laszlehet\u0151s\u00e9gekr\u0151l! ( f4.png ) Feladat 5 (\u00d6n\u00e1ll\u00f3) - Tov\u00e1bbi j\u00e1t\u00e9klogika \u00b6 A tanultak gyakorl\u00e1sak\u00e9pp k\u00e9sz\u00edtse el az al\u00e1bbi funkci\u00f3kat: A v\u00e1laszlehet\u0151s\u00e9gre kattintva a rendszer a v\u00e1lasz mellett tal\u00e1lhat\u00f3 pipa ikonnal jelzi, hogy helyes v\u00e1lasz \u00e9rkezett, vagy x-szel, ha helytelen. Ut\u00f3bbi esetben a helyes v\u00e1lasz mellett egy pipa is megjelenik. A feliratkoz\u00e1shoz haszn\u00e1lja az $(\".answer\").on(\"click\", e => { /* */ }) kezel\u0151t! A helyes v\u00e1laszok sz\u00e1m\u00e1t tartsa nyilv\u00e1n! Jelen\u00edtse meg a tov\u00e1bbl\u00e9p\u00e9shez haszn\u00e1lt gombot, ha a felhaszn\u00e1l\u00f3 v\u00e1laszt adott! Arra kattintva jelenjen meg a k\u00f6vetkez\u0151 k\u00e9rd\u00e9s! A j\u00e1t\u00e9k befejezt\u00e9vel, amikor elfogynak az aktu\u00e1lis k\u00e9rd\u00e9sek, jelen\u00edtse meg, h\u00e1ny pontot \u00e9rt el a felhaszn\u00e1l\u00f3 a maximumb\u00f3l! A j\u00e1t\u00e9k befejezt\u00e9vel lehessen \u00fajrat\u00f6lt\u00e9s (F5) n\u00e9lk\u00fcl \u00faj j\u00e1t\u00e9kot ind\u00edtani! Hozhat l\u00e9tre \u00faj gombot, vagy \u00e1t\u00edrhatja a k\u00f6vetkez\u0151 k\u00e9rd\u00e9sre szolg\u00e1l\u00f3 gomb sz\u00f6veg\u00e9t (ekkor viszont \u00fcgyeljen r\u00e1, hogy ezt k\u00f6vet\u0151en ne felejtse vissza\u00e1ll\u00edtani azt)! A legfelhaszn\u00e1l\u00f3bar\u00e1tabb \u00e9lm\u00e9ny\u00e9rt haszn\u00e1lhatja a Bootstrap modal megold\u00e1st is! BEADAND\u00d3 (1 pont) K\u00e9perny\u0151k\u00e9pekkel \u00e9s a relev\u00e1ns k\u00f3dr\u00e9szletekkel demonstr\u00e1lja az al\u00e1bbi eseteket: a j\u00e1t\u00e9kos helyesen v\u00e1laszolt a k\u00e9rd\u00e9sre, ( f5.1.png ) a j\u00e1t\u00e9kos helytelen\u00fcl v\u00e1laszolt a k\u00e9rd\u00e9sre, ( f5.2.png ) a v\u00e1laszad\u00e1s el\u0151tt nem, ut\u00e1na l\u00e1that\u00f3 a tov\u00e1bbl\u00e9p\u00e9shez haszn\u00e1lt gomb, ( f5.3.png ) az aktu\u00e1lis k\u00e9rd\u00e9s sz\u00e1ml\u00e1l\u00f3ja n\u00f6vekszik, ( f5.4.png ) megjelenik a felhaszn\u00e1l\u00f3 \u00e1ltal el\u00e9rt pontsz\u00e1m! ( f5.5.png )","title":"Labor 12 - jQuery"},{"location":"laborok/12-jquery/#labor-12-jquery","text":"","title":"Labor 12 - jQuery"},{"location":"laborok/12-jquery/#bevezetes","text":"A laborok sor\u00e1n a hallgat\u00f3k laborvezet\u0151i seg\u00edts\u00e9ggel, majd \u00f6n\u00e1ll\u00f3an v\u00e9geznek feladatokat a webes technol\u00f3gi\u00e1k gyakorlati megismer\u00e9se \u00e9rdek\u00e9ben. A feladatok megold\u00e1sa sor\u00e1n ne felejtsd el k\u00f6vetni a feladat bead\u00e1s folyamat\u00e1t TODO LINK.","title":"Bevezet\u00e9s"},{"location":"laborok/12-jquery/#git-repository-letrehozasa-es-projekt-inditasa","text":"Moodle-ben keresd meg a laborhoz tartoz\u00f3 megh\u00edv\u00f3 URL-j\u00e9t \u00e9s annak seg\u00edts\u00e9g\u00e9vel hozd l\u00e9tre a saj\u00e1t repository-dat. V\u00e1rd meg, m\u00edg elk\u00e9sz\u00fcl a repository, majd checkout-old ki. Egyetemi laborokban, ha a checkout sor\u00e1n nem k\u00e9r a rendszer felhaszn\u00e1l\u00f3nevet \u00e9s jelsz\u00f3t, \u00e9s nem siker\u00fcl a checkout, akkor val\u00f3sz\u00edn\u0171leg a g\u00e9pen kor\u00e1bban megjegyzett felhaszn\u00e1l\u00f3n\u00e9vvel pr\u00f3b\u00e1lkozott a rendszer. El\u0151sz\u00f6r t\u00f6r\u00f6ld ki a mentett bel\u00e9p\u00e9si adatokat (l\u00e1sd itt), \u00e9s pr\u00f3b\u00e1ld \u00fajra. Hozz l\u00e9tre egy \u00faj \u00e1gat megoldas n\u00e9ven, \u00e9s ezen az \u00e1gon dolgozz. A neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dodat. A f\u00e1jlban semmi m\u00e1s ne szerepeljen, csak egyetlen sorban a Neptun k\u00f3d 6 karaktere. Nyissuk meg a Visual Studio Code-dal a l\u00e9trehozott k\u00f6nyvt\u00e1rat (File -> Open Folder)! Az alkalmaz\u00e1s futtat\u00e1s\u00e1hoz adjuk ki a Terminalban (Ctrl+\u00f6) az al\u00e1bbi parancsot: http-server (\u00fcgyelj\u00fcnk arra, hogy a helyes \u00fatvonalon adjuk ki a parancsot, ahov\u00e1 a kiindul\u00f3 projektet csomagoltuk ki), vagy haszn\u00e1ljuk a VS Code Live Servert a megszokott m\u00f3don (Go Live lehet\u0151s\u00e9g a jobb als\u00f3 sarokban az index.html megnyit\u00e1sa ut\u00e1n, vagy F1 > \"Live Server: Open with Live Server\")! Ellen\u0151rizz\u00fck, hogy a megfelel\u0151 k\u00f6nyvt\u00e1rban ind\u00edtottuk-e el a szervert! Eml\u00e9keztet\u0151k\u00e9nt n\u00e9h\u00e1ny gondolat a jQuery-r\u0151l","title":"Git repository l\u00e9trehoz\u00e1sa \u00e9s projekt ind\u00edt\u00e1sa"},{"location":"laborok/12-jquery/#a-jquery","text":"A jQuery egy \"sv\u00e1jcibicska-szer\u0171\" JavaScript library. Jelent\u0151s\u00e9ge napjainkban az alkalmaz\u00e1sfejleszt\u0151 keretrendszerek jav\u00e1ra egyre cs\u00f6kken, viszont az alapkoncepci\u00f3k meg\u00e9rt\u00e9s\u00e9re tov\u00e1bbra is hasznos eszk\u00f6z. Els\u0151sorban kieg\u00e9sz\u00edt\u00e9sk\u00e9ppen haszn\u00e1lj\u00e1k k\u00fcl\u00f6nf\u00e9le dinamikusan gener\u00e1lt HTML tartalmakhoz t\u00f6rt\u00e9n\u0151 dinamizmus hozz\u00e1rendel\u00e9s\u00e9vel, nem pedig teljes, \u00f6n\u00e1ll\u00f3, kliensoldali alkalmaz\u00e1s fejleszt\u00e9s\u00e9re (de ut\u00f3bbira is haszn\u00e1lhat\u00f3). A jQuery API a $ (\u00e9s ritk\u00e1bban a jQuery ) glob\u00e1lis v\u00e1ltoz\u00f3n kereszt\u00fcl \u00e9rhet\u0151 el, alapvet\u0151en az al\u00e1bbi m\u00f3dokon: const elements = $('ul li.active') : a megadott CSS selectornak megfelel\u0151 DOM elemeket v\u00e1lasztja ki, \u00e9s visszaadja egy jQuery objektumban . A b\u00e1rmilyen m\u00f3don szerzett jQuery objektum hivatkoz\u00e1sokon az al\u00e1bbihoz hasonl\u00f3 lehet\u0151s\u00e9geink vannak: A jQuery objektum p\u00e9ld\u00e1nyai egyben t\u00f6mb\u00f6k, amik tartalmazz\u00e1k a megtal\u00e1lt nat\u00edv DOM elemeket (teh\u00e1t iter\u00e1lhatunk rajta), ill. a jQuery p\u00e9ld\u00e1nyf\u00fcggv\u00e9nyeit tartalmazz\u00e1k, amelyek el\u00e9rik az illesztett DOM elemeket. .show() , .hide() , .toggle() : az illesztett elemeket megjelen\u00edti vagy elrejti az\u00e1ltal, hogy az elemre inline display: none st\u00edlust helyezi, .append(e) , .appendTo(e) , .before(e) , .after(e) , az elemhez/el\u00e9/ut\u00e1n sz\u00far be \u00fajabb elemeket (jQuery szelektorral el\u00e9rt elemeket, DOM elemeket vagy HTML tartalmat), .attr() : gyakori, hogy egy f\u00fcggv\u00e9ny getter-setterk\u00e9nt m\u0171k\u00f6dik, ilyen az attr is. Ha egy param\u00e9tert adunk \u00e1t, az adott attrib\u00fatum \u00e9rt\u00e9k\u00e9t kapjuk vissza, ha kett\u0151t, a m\u00e1sodik param\u00e9ter az els\u0151 n\u00e9ven adott attrib\u00fatum \u00e9rt\u00e9ke lesz (minden illesztett elemre). .on() : esem\u00e9nykezel\u0151 feliratkoztat\u00e1sa az adott n\u00e9vvel. K\u00e9t param\u00e9ter eset\u00e9n ha a m\u00e1sodik param\u00e9ter a callback, \u00fagy az h\u00edv\u00f3dik meg az adott elemen; ha a callback el\u0151tt egy szelektort is megadunk, az \"\u00e9l\u0151\" feliratkoz\u00e1s lesz az illesztett elemen bel\u00fcli lesz\u00e1rmazott gyerekekre. P\u00e1rja az .off() , amellyel esem\u00e9nykezel\u0151t iratkoztathatunk le, ez\u00e1ltal elker\u00fclve az esetleges mem\u00f3riasziv\u00e1rg\u00e1st. .click() , .submit() stb.: az adott JavaScript esem\u00e9nyek els\u00fct\u00e9se (param\u00e9ter n\u00e9lk\u00fcl) vagy feliratkoz\u00e1s az esem\u00e9nyre (callback megad\u00e1s\u00e1val) az illesztett elemeken. Elavult, ehelyett a fentebb le\u00edrt .on() -t haszn\u00e1ljuk feliratkoz\u00e1sra, a .trigger() -t pedig els\u00fct\u00e9sre. .data(name) : a DOM elem data-{name} attrib\u00fatum\u00e1ban szerepl\u0151 \u00e9rt\u00e9k be\u00e1ll\u00edt\u00e1s\u00e1ra \u00e9s lek\u00e9rdez\u00e9s\u00e9re haszn\u00e1lhatjuk. A lek\u00e9rdez\u00e9s gyakorlatilag ekvivalens azzal, mintha az al\u00e1bbit haszn\u00e1ln\u00e1nk: .attr(\"data-name\").val() . Eml\u00e9keztet\u0151k\u00e9nt, a CSS-ben attrib\u00fatum alapj\u00e1n lek\u00e9rdezni elemet az al\u00e1bbi m\u00f3don tudunk: $(\"elem[data-my-value='value']\") . A data- attrib\u00fatumok tetsz\u0151leges kulcs-\u00e9rt\u00e9k p\u00e1rok t\u00e1rol\u00e1s\u00e1ra szolg\u00e1lnak a DOM-ban. Nagyon gyakori, hogy az egyes elemeken v\u00e9gzett m\u0171veleteket l\u00e1ncoljuk az al\u00e1bbihoz hasonl\u00f3 m\u00f3don: $(\".button\").before(spinner).attr(\"disabled\", true) . $(function () { /*...*/ }) : az \u00edgy megadott f\u00fcggv\u00e9ny a dokumentum bet\u00f6lt\u0151d\u00e9s\u00e9t k\u00f6vet\u0151en fut le. Ekvivalens a $(document).ready(function () { /*...*/} ) h\u00edv\u00e1ssal. $.ajax() , $.get() , $.post() stb.: a glob\u00e1lis jQuery objektumon el\u00e9rhet\u0151 statikus f\u00fcggv\u00e9nyek f\u00fcggetlenek az egyes DOM elemekt\u0151l, ezek pl. aszinkron AJAX k\u00e9r\u00e9sek v\u00e9grehajt\u00e1s\u00e1ra haszn\u00e1lhat\u00f3k.","title":"A jQuery"},{"location":"laborok/12-jquery/#jquery-pluginek","text":"A jQuery kieg\u00e9sz\u00edt\u00e9sek\u00e9ppen egyszer\u0171bb \u00e9s bonyolultabb plugineket haszn\u00e1lhatunk. Ezek a pluginek jellemz\u0151en a jQuery objektumra \u00fajabb f\u00fcggv\u00e9nyeket helyeznek el, amelyek seg\u00edts\u00e9g\u00e9vel a kieg\u00e9sz\u00edt\u0151 funkcionalit\u00e1s el\u00e9rhet\u0151. A Boostrap k\u00e9tf\u00e9le m\u00f3don teszi el\u00e9rhet\u0151v\u00e9 a plugineket: data-attib\u00fatumok form\u00e1j\u00e1ban \u00e9s a jQuery API-n kereszt\u00fcl. A fontosabbak pl.: .modal() .dropdown() , .tooltip() , .alert() , .collapse() . B\u0151vebben a Bootstrap jQuery pluginekr\u0151l itt olvashat. Gyakran haszn\u00e1lt pluginokat ad m\u00e9g pl. a jQuery UI , amiben d\u00e1tum- \u00e9s id\u0151v\u00e1laszt\u00f3, dial\u00f3gusablak, progressbar stb. \"widgetek\" tal\u00e1lhat\u00f3k.","title":"jQuery pluginek"},{"location":"laborok/12-jquery/#kiindulo-attekintese","text":"A laboron k\u00e9sz\u00fcl\u0151 alkalmaz\u00e1s egy egyszer\u0171 kv\u00edzj\u00e1t\u00e9k, amely az Open Trivia Database publikus, ingyenesen el\u00e9rhet\u0151 API-j\u00e1t haszn\u00e1lja. A j\u00e1t\u00e9k menete az al\u00e1bbi lesz: A j\u00e1t\u00e9k opci\u00f3inak megad\u00e1sa a Let's play! gombra kattintva lehets\u00e9ges. Az opci\u00f3kn\u00e1l megadhat\u00f3 a k\u00e9rd\u00e9sek sz\u00e1ma (1 \u00e9s 50 k\u00f6z\u00f6tt), a k\u00e9rd\u00e9s kateg\u00f3ri\u00e1ja \u00e9s neh\u00e9zs\u00e9ge. Ezt k\u00f6vet\u0151en a j\u00e1t\u00e9k a Go! felirat\u00fa gombra kattintva ind\u00edthat\u00f3. A j\u00e1t\u00e9k sor\u00e1n a t\u00e1voli API-t\u00f3l lek\u00e9rdezett k\u00e9rd\u00e9sek fognak k\u00f6vetkezni. Az aktu\u00e1lis k\u00e9rd\u00e9s sorsz\u00e1ma \u00e9s az \u00f6sszes k\u00e9rd\u00e9s sz\u00e1ma l\u00e1that\u00f3 a k\u00e9rd\u00e9s oldal\u00e1n, a k\u00e9rd\u00e9s kateg\u00f3ri\u00e1ja, a k\u00e9rd\u00e9s sz\u00f6vege, valamint a 4 v\u00e1laszlehet\u0151s\u00e9g, amelyek k\u00f6z\u00fcl mindig pontosan egy lesz helyes. A 4 v\u00e1laszlehet\u0151s\u00e9g egyik\u00e9re kattintva visszajelz\u00e9s \u00e9rkezik a v\u00e1lasz helyess\u00e9g\u00e9r\u0151l. Ha a v\u00e1lasz helytelen volt, a helyes v\u00e1laszt is jelzi az alkalmaz\u00e1s. A k\u00e9rd\u00e9sek v\u00e9g\u00e9re \u00e9rve az alkalmaz\u00e1s jelzi, h\u00e1ny pontot \u00e9rt\u00fcnk el a maximumb\u00f3l, majd \u00faj j\u00e1t\u00e9k ind\u00edt\u00e1s\u00e1ra van lehet\u0151s\u00e9g. Eml\u00edt\u00e9sre m\u00e9lt\u00f3 m\u00e9g, hogy TypeScript t\u00e1mogat\u00e1ssal a JavaScript k\u00f3dunkban IntelliSense-t fogunk kapni (Visual Studio Code vagy Visual Studio haszn\u00e1lat\u00e1val) a jQuery k\u00f6nyvt\u00e1rhoz is! Az alkalmaz\u00e1s kiindul\u00f3 k\u00f3dj\u00e1t megvizsg\u00e1lva az al\u00e1bbi f\u00e1jlokat tal\u00e1ljuk: index.html : a kiindul\u00f3 HTML. A f\u00e1jlt a feladatok megold\u00e1s\u00e1hoz nem sz\u00fcks\u00e9ges m\u00f3dos\u00edtani. Ha a f\u00e1jlban m\u00f3dos\u00edt, dokument\u00e1lja a m\u00f3dos\u00edt\u00e1s\u00e1t! node_modules mappa : az npm csomagkezel\u0151vel let\u00f6lt\u00f6tt jQuery t\u00edpusdefin\u00edci\u00f3s f\u00e1jlok JavaScript (TypeScript) IntelliSense t\u00e1mogat\u00e1shoz tal\u00e1lhat\u00f3k itt. triviaut.js : egy \u00fcres JavaScript f\u00e1jl, amely az index.html <head> r\u00e9sz\u00e9ben ker\u00fclt hivatkoz\u00e1sra. Az alkalmaz\u00e1s forr\u00e1sk\u00f3dj\u00e1t ebbe a f\u00e1jlba sz\u00fcks\u00e9ges helyezni. start-game-form-contents.html : egy r\u00e9szleges HTML f\u00e1jl, amelyben a j\u00e1t\u00e9k ind\u00edt\u00e1s\u00e1hoz sz\u00fcks\u00e9ges opci\u00f3k le\u00edr\u00e1sa tal\u00e1lhat\u00f3. opentriviadb-logo.png : \u00e9rtelemszer\u0171en a fentebb hivatkozott API log\u00f3ja. node_modules A node_modules mapp\u00e1t nem szok\u00e1s felcommitolni a repositoryba mert tipikusan nagyon nagyra n\u0151het. Most csak az\u00e9rt ker\u00fclt bele a kiindul\u00f3 projektbe, hogy ne az \u00f3r\u00e1n kelljen az npm install parancsot kiadni. Vizsg\u00e1ljuk meg az index.html tartalm\u00e1t! A f\u00e1jlban l\u00e1that\u00f3, hogy be vannak hivatkozva az al\u00e1bbiak: a saj\u00e1t JavaScript f\u00e1jlunk, a triviaut.js , a Bootstrap CSS \u00e9s JavaScript f\u00e1jljai, a FontAwesome ikonk\u00e9szlet CSS f\u00e1jlja, a jQuery oszt\u00e1lyk\u00f6nyvt\u00e1r JS f\u00e1jlja. Fontos, hogy a JavaScript f\u00e1jl bet\u00f6lt\u0151d\u00e9sekor az addig a pontig elk\u00e9sz\u00fclt DOM-on k\u00e9pes manipul\u00e1ci\u00f3t v\u00e9gezni. Ezen k\u00edv\u00fcl l\u00e1thatjuk, hogy a HTML f\u00e1jlunkban egy <header> \u00e9s egy <main> elem tal\u00e1lhat\u00f3. A <header> tartalma sz\u00e1munkra statikus. A <main> -ben h\u00e1rom db <section> elemet l\u00e1thatunk az al\u00e1bbi ID-kkal ell\u00e1tva: lets-play-section : a j\u00e1t\u00e9k ind\u00edt\u00e1s\u00e1ra (az opci\u00f3k megjelen\u00edt\u00e9s\u00e9re) sz\u00e1nt gomb, start-game-form-section : a j\u00e1t\u00e9k opci\u00f3it tartalmaz\u00f3 <form> , amely a Loading... sz\u00f6veget tartalmazza - egyel\u0151re el van rejtve a style attrib\u00fatum display: none \u00e9rt\u00e9ke alapj\u00e1n, game-section : maga a j\u00e1t\u00e9kt\u00e9r, ahol a k\u00e9rd\u00e9sek tal\u00e1lhat\u00f3k, szint\u00e9n elrejtve tal\u00e1lhat\u00f3 a DOM-ban.","title":"Kiindul\u00f3 \u00e1ttekint\u00e9se"},{"location":"laborok/12-jquery/#feladat-1-jatek-inditasa","text":"","title":"Feladat 1 - J\u00e1t\u00e9k ind\u00edt\u00e1sa"},{"location":"laborok/12-jquery/#jquery-es-ajax-kiprobalasa","text":"Pr\u00f3b\u00e1ljuk ki a jQuery k\u00f6nyvt\u00e1rat az al\u00e1bbi m\u00f3don: a szerver ind\u00edt\u00e1s\u00e1t k\u00f6vet\u0151en navig\u00e1ljunk a b\u00f6ng\u00e9sz\u0151ben az oldalra! Az F12 eszk\u00f6zt\u00e1ron nyissuk meg a Console-t, \u00e9s futtassuk az al\u00e1bbi parancsokat egyes\u00e9vel, sorrendben (k\u00f6zben figyelj\u00fck, mi t\u00f6rt\u00e9nik a fel\u00fcleten): $ ( \"#lets-play-section\" ). hide (); $ ( \"#start-game-form-section\" ). show (); $ ( \"#start-game-form-section, #game-section\" ). toggle (); L\u00e1thatjuk, hogy a .hide() , .show() \u00e9s .toggle() f\u00fcggv\u00e9nyek \u00e9rtelemszer\u0171en a CSS selector \u00e1ltal illesztett \u00f6sszes DOM elem display: none CSS tulajdons\u00e1g\u00e1t teszik fel a DOM elemre, vagy veszik azt le r\u00f3la. Tesztelj\u00fck a t\u00e1voli API-t! A triviaut.js f\u00e1jlba \u00edrjuk az al\u00e1bbi k\u00f3dot: $ . get ( \"https://opentdb.com/api.php?amount=10\" ). then ( function ( q ) { console . log ( q ); $ ( \"body\" ). text ( JSON . stringify ( q , '\\n' )); }); Ha mindent j\u00f3l csin\u00e1ltunk, az al\u00e1bbi (vagy nagyon hasonl\u00f3) hib\u00e1t l\u00e1tjuk a konzolon az oldal bet\u00f6lt\u0151d\u00e9s\u00e9t k\u00f6vet\u0151en: Uncaught ReferenceError: $ is not defined A JavaScript f\u00e1jlok bet\u00f6lt\u00e9si sorrendje kiemelten fontos! A bet\u00f6lt\u0151d\u00e9s sorrendje implik\u00e1lja a f\u00fcgg\u0151s\u00e9gi sorrendet is, ugyanis v\u00e9grehajt\u00e1suk a b\u00f6ng\u00e9sz\u0151ben alap\u00e9rtelmezetten az import\u00e1l\u00e1s sorrendj\u00e9vel megegyezik. Ha a saj\u00e1t f\u00e1jlunkat el\u0151bb hivatkozzuk, mint a jQuery-t, \u00fagy az ott fut\u00f3 k\u00f3d $ v\u00e1ltoz\u00f3ra t\u00f6rt\u00e9n\u0151 (szinkron) hivatkoz\u00e1sa hib\u00e1t dob (mert ekkor m\u00e9g nem futott le a jQuery $ objektumot defini\u00e1l\u00f3 k\u00f3d). A megold\u00e1s, hogy \u00e1t kell mozgatnunk a saj\u00e1t JS f\u00e1jlunk hivatkoz\u00e1s\u00e1t a HTML <head> elemben a jQuery hivatkoz\u00e1s ut\u00e1n (\u00e9rdemes minden k\u00fcls\u0151 f\u00fcgg\u0151s\u00e9g hivatkoz\u00e1sa ut\u00e1nra, teh\u00e1t a <head> v\u00e9g\u00e9re tenni). A $.get statikus f\u00fcggv\u00e9ny a $.ajax h\u00edv\u00e1s r\u00f6vid\u00edt\u00e9se, ahol a HTTP ige fixen a HTTP GET. Visszat\u00e9r\u00e9se egy Promise objektum, melyre a .then h\u00edv\u00e1ssal iratkozunk fel, ami 3 callback param\u00e9tert v\u00e1r (mindh\u00e1rom opcion\u00e1lis): a sikeres teljes\u00fcl\u00e9st, a hiba\u00e1gat, \u00e9s mindet. A fenti h\u00edv\u00e1s teh\u00e1t beh\u00edv a megadott URL-re, a kapott v\u00e1laszt a konzolon megjelen\u00edti, majd a <body> elem tartalm\u00e1t sz\u00f6vegesen lecser\u00e9li a kapott tartalmat string form\u00e1ra konvert\u00e1lva (a v\u00e1lasz ugyanis egy JSON objektum). Az al\u00e1bbi form\u00e1tum\u00fa v\u00e1lasz \u00e9rkezik a t\u00e1voli API-t\u00f3l: { \"response_code\" : 0 , \"results\" : [ { \"category\" : \"Entertainment: Film\" , \"type\" : \"multiple\" , \"difficulty\" : \"hard\" , \"question\" : \"In the 1976 film 'Taxi Driver', how many guns did Travis buy from the salesman?\" , \"correct_answer\" : \"4\" , \"incorrect_answers\" : [ \"2\" , \"6\" , \"1\" ] }, ... ] }","title":"jQuery \u00e9s AJAX kipr\u00f3b\u00e1l\u00e1sa"},{"location":"laborok/12-jquery/#jatek-inditas-logika","text":"Ind\u00edtsuk el a j\u00e1t\u00e9kot! A triviaut.js f\u00e1jl tartalm\u00e1t cser\u00e9lj\u00fck le az al\u00e1bbira: $ ( \"#lets-play-button\" ). on ( \"click\" , function ( e ) { $ ( e . target ). toggle (); $ ( \"#start-game-form\" ). toggle (); }); A fenti k\u00f3dr\u00e9szlettel elvileg a gombra kattintva elrejtj\u00fck a gombot \u00e9s megjelen\u00edtj\u00fck a j\u00e1t\u00e9k opci\u00f3s \u0171rlapj\u00e1t. A k\u00f3d viszont nem m\u0171k\u00f6dik. Ha ut\u00e1naj\u00e1runk, \u00fagy t\u0171nik, hogy nem t\u00f6rt\u00e9nik feliratkoz\u00e1s. Futtassuk le el\u0151tte az al\u00e1bbi k\u00f3dot is (a JS f\u00e1jl elej\u00e9n): console . log ( $ ( \"#lets-play-button\" ). length ); A konzolon a 0 \u00e9rt\u00e9k jelenik meg, teh\u00e1t ilyen nincsen a DOM-ban. A probl\u00e9ma, hogy a JS f\u00e1jlunk kor\u00e1bban fut, mint a DOM bet\u00f6lt\u0151dne! Fontos teh\u00e1t megv\u00e1rnunk, am\u00edg ez megt\u00f6rt\u00e9nik. A klasszikus m\u00f3dja ennek az al\u00e1bbi megad\u00e1s: $ ( document ). ready ( function () { // itt m\u00e1r elk\u00e9sz\u00fclt a DOM! }) A fenti teh\u00e1t kiv\u00e1lasztja a document elemet a DOM-b\u00f3l, teh\u00e1t a teljes DOM gy\u00f6ker\u00e9t, aminek feliratkozik a ready pszeudo-esem\u00e9ny\u00e9re (ilyen konkr\u00e9t DOM esem\u00e9ny ugyanis nincsen). A fentivel ekvivalens megad\u00e1s az al\u00e1bbi, ahol arrow function -t haszn\u00e1lunk: $ (() => { // itt m\u00e1r elk\u00e9sz\u00fclt a DOM! }); Arrow function A fenti szintaxisban a () => {} k\u00f3dr\u00e9szlet szint\u00e9n egy f\u00fcggv\u00e9ny deklar\u00e1ci\u00f3ja, melynek neve arrow function . Az arrow function szintaxis t\u00f6m\u00f6rebb, szint\u00e9n param\u00e9terezhet\u0151 ( a => a + 10 vagy (a, b) => { return a * b + 2; } ). Tov\u00e1bbi \u00e9rdekess\u00e9ge, hogy a function kulcssz\u00f3val megadott f\u00fcggv\u00e9nyekkel ellent\u00e9tben nem v\u00e1ltoztatja meg a this v\u00e1ltoz\u00f3 \u00e1ltal reprezent\u00e1lt f\u00fcggv\u00e9nyt (objektumot) sem. A kezdeti m\u0171k\u00f6d\u00e9s\u00fcnket teh\u00e1t el\u00e9rhetj\u00fck az al\u00e1bbi m\u00f3don: $ (() => { $ ( \"#lets-play-button\" ). on ( \"click\" , () => { $ ( \"#lets-play-section, #start-game-form-section\" ). toggle (); }); }); Teh\u00e1t a gombot tartalmaz\u00f3 \u00e9s a j\u00e1t\u00e9k opci\u00f3kat tartalmaz\u00f3 szekci\u00f3kat megjelen\u00edtj\u00fck/elrejtj\u00fck. Eg\u00e9sz\u00edts\u00fck ki tov\u00e1bb\u00e1 a fenti k\u00f3dot (a megfelel\u0151 helyen) azzal, hogy a formot reprezent\u00e1l\u00f3 HTML r\u00e9szletet let\u00f6ltj\u00fck a szervert\u0151l \u00e9s a megfelel\u0151 helyre sz\u00farjuk a DOM-ban: $ . get ( \"start-game-form-contents.html\" ) . then ( html => $ ( \"#start-game-form\" ). html ( html )); BEADAND\u00d3 (2 pont) M\u00e1soljon be egy teljes k\u00e9perny\u0151s k\u00e9perny\u0151k\u00e9pet az opci\u00f3k kezdeti \u00e1llapot\u00e1r\u00f3l, ahol el van rejtve az ind\u00edt\u00e1sra szolg\u00e1l\u00f3 gomb! ( f1.png )","title":"J\u00e1t\u00e9k ind\u00edt\u00e1s logika"},{"location":"laborok/12-jquery/#feladat-2-szerveroldali-api-hasznalata","text":"T\u00f6lts\u00fck le a param\u00e9tereknek megfelel\u0151 elemeket a t\u00e1voli API-r\u00f3l! Ehhez szint\u00e9n a $.get f\u00fcggv\u00e9nyt tudjuk haszn\u00e1lni: // a glob\u00e1lis n\u00e9vt\u00e9rben deklar\u00e1ljuk az al\u00e1bbi v\u00e1ltoz\u00f3kat \u00e9s f\u00fcggv\u00e9nyt: let remainingQuestions , totalQuestions , currentQuestion , correctAnswerIndex ; function getNextQuestion () { } //... $ . get ( \"start-game-form-contents.html\" ). then ( html => $ ( \"#start-game-form\" ). html ( html ) . on ( \"submit\" , e => { // k\u00f6zvetlen\u00fcl a HTML besz\u00far\u00e1sa ut\u00e1n l\u00e1colhatjuk a 'submit' esem\u00e9nyre t\u00f6rt\u00e9n\u0151 feliratkoz\u00e1st e . preventDefault (); // a b\u00f6ng\u00e9sz\u0151 alap\u00e9rtelmezett m\u0171k\u00f6d\u00e9s\u00e9t meg\u00e1ll\u00edtjuk, amivel \u00fajrat\u00f6lten\u00e9 az oldalt $ ( \"#start-game-form button[type='submit']\" ). attr ( \"disabled\" , true ); // a Go! gombot letiltjuk, hogy ne lehessen \u00fajra API k\u00e9r\u00e9st ind\u00edtani, am\u00edg meg nem \u00e9rkezett a v\u00e1lasz $ . get ( \"https://opentdb.com/api.php?type=multiple&encode=base64&amount=\" + $ ( \"[name='trivia_amount']\" ). val ()). then ( data => { remainingQuestions = data . results ; console . log ( remainingQuestions ); currentQuestion = 0 ; totalQuestions = remainingQuestions . length ; $ ( \"#total-questions\" ). text ( totalQuestions ); $ ( \"#start-game-form button[type='submit']\" ). removeAttr ( \"disabled\" ); getNextQuestion (); }); })); BEADAND\u00d3 (0.5 pont) K\u00e9sz\u00edtsen k\u00e9perny\u0151k\u00e9pet a konzolon l\u00e1that\u00f3 \u00e9rkezett v\u00e1laszokr\u00f3l! ( f2.png ) Legyen l\u00e1that\u00f3, hogy h\u00e1ny v\u00e1lasz \u00e9rkezett, \u00e9s ez a sz\u00e1m ne az alap\u00e9rtelmezett 10 legyen!","title":"Feladat 2 - Szerveroldali API haszn\u00e1lata"},{"location":"laborok/12-jquery/#feladat-3-onallo-difficulty-es-category","text":"K\u00e9sz\u00edtse el a marad\u00e9k k\u00e9t param\u00e9ter elk\u00fcld\u00e9s\u00e9t is a difficulty \u00e9s category relev\u00e1ns \u00e9rt\u00e9keinek megad\u00e1s\u00e1val! Haszn\u00e1lhatja a $().serializeArray() f\u00fcggv\u00e9nyt is! BEADAND\u00d3 (0.5 pont) Az \u00e9rkez\u0151 v\u00e1laszr\u00f3l a konzolon k\u00e9sz\u00edtsen k\u00e9perny\u0151k\u00e9pet! ( f3.png )","title":"Feladat 3 (\u00d6n\u00e1ll\u00f3) - Difficulty \u00e9s Category"},{"location":"laborok/12-jquery/#feladat-4-a-jatek-menete","text":"A meg\u00e9rkezett v\u00e1lasz kezel\u00e9s\u00e9hez a megfelel\u0151 mez\u0151ket ki kell t\u00f6lten\u00fcnk a HTML dokumentumban. A getNextQuestion() f\u00fcggv\u00e9ny k\u00f3dj\u00e1nak kezdem\u00e9nye az al\u00e1bbi lehet: currentQuestion ++ ; const question = remainingQuestions . pop (); if ( question === undefined ) { // TODO: nincs t\u00f6bb k\u00e9rd\u00e9s! return ; } correctAnswerIndex = Math . floor ( Math . random () * 4 ); const answers = question . incorrect_answers . slice (); answers . splice ( correctAnswerIndex , 0 , question . correct_answer ); $ ( \".answer .correct, .answer .incorrect, #next-question\" ). hide (); A f\u00fcggv\u00e9ny tov\u00e1bbi r\u00e9sz\u00e9t az al\u00e1bbi m\u00f3don implement\u00e1lja: rejtse el az opci\u00f3s \u0171rlapot, jelen\u00edtse meg a j\u00e1t\u00e9kteret, t\u00f6ltse ki a jelenlegi j\u00e1t\u00e9k sz\u00e1ml\u00e1l\u00f3j\u00e1t, t\u00f6ltse ki a k\u00e9rd\u00e9s kateg\u00f3ri\u00e1j\u00e1t ( atob(question.category) ), t\u00f6ltse ki a k\u00e9rd\u00e9s sz\u00f6veg\u00e9t (szint\u00e9n haszn\u00e1lja az atob() f\u00fcggv\u00e9nyt a base64 sz\u00f6veg dek\u00f3dol\u00e1s\u00e1hoz), vegye le az \u00f6sszes v\u00e1laszlehet\u0151s\u00e9gr\u0151l ( .answer ) a disabled attrib\u00fatumot (tipp: $().removeAttr() ), minden v\u00e1laszlehet\u0151s\u00e9g sz\u00f6veg\u00e9nek hely\u0151rz\u0151j\u00e9ben helyezze el a v\u00e1lasz sz\u00f6veg\u00e9t (\u00fcgyeljen r\u00e1, hogy ne t\u00f6r\u00f6lje ki a helyes/helytelen ikonokat, \u00e9s itt is haszn\u00e1lja az atob() konverzi\u00f3t)! BEADAND\u00d3 (1 pont) K\u00e9sz\u00edtsen k\u00e9perny\u0151k\u00e9pet a j\u00e1t\u00e9kt\u00e9ren megjelen\u0151 k\u00e9rd\u00e9sr\u0151l, v\u00e1laszlehet\u0151s\u00e9gekr\u0151l! ( f4.png )","title":"Feladat 4 - A j\u00e1t\u00e9k menete"},{"location":"laborok/12-jquery/#feladat-5-onallo-tovabbi-jateklogika","text":"A tanultak gyakorl\u00e1sak\u00e9pp k\u00e9sz\u00edtse el az al\u00e1bbi funkci\u00f3kat: A v\u00e1laszlehet\u0151s\u00e9gre kattintva a rendszer a v\u00e1lasz mellett tal\u00e1lhat\u00f3 pipa ikonnal jelzi, hogy helyes v\u00e1lasz \u00e9rkezett, vagy x-szel, ha helytelen. Ut\u00f3bbi esetben a helyes v\u00e1lasz mellett egy pipa is megjelenik. A feliratkoz\u00e1shoz haszn\u00e1lja az $(\".answer\").on(\"click\", e => { /* */ }) kezel\u0151t! A helyes v\u00e1laszok sz\u00e1m\u00e1t tartsa nyilv\u00e1n! Jelen\u00edtse meg a tov\u00e1bbl\u00e9p\u00e9shez haszn\u00e1lt gombot, ha a felhaszn\u00e1l\u00f3 v\u00e1laszt adott! Arra kattintva jelenjen meg a k\u00f6vetkez\u0151 k\u00e9rd\u00e9s! A j\u00e1t\u00e9k befejezt\u00e9vel, amikor elfogynak az aktu\u00e1lis k\u00e9rd\u00e9sek, jelen\u00edtse meg, h\u00e1ny pontot \u00e9rt el a felhaszn\u00e1l\u00f3 a maximumb\u00f3l! A j\u00e1t\u00e9k befejezt\u00e9vel lehessen \u00fajrat\u00f6lt\u00e9s (F5) n\u00e9lk\u00fcl \u00faj j\u00e1t\u00e9kot ind\u00edtani! Hozhat l\u00e9tre \u00faj gombot, vagy \u00e1t\u00edrhatja a k\u00f6vetkez\u0151 k\u00e9rd\u00e9sre szolg\u00e1l\u00f3 gomb sz\u00f6veg\u00e9t (ekkor viszont \u00fcgyeljen r\u00e1, hogy ezt k\u00f6vet\u0151en ne felejtse vissza\u00e1ll\u00edtani azt)! A legfelhaszn\u00e1l\u00f3bar\u00e1tabb \u00e9lm\u00e9ny\u00e9rt haszn\u00e1lhatja a Bootstrap modal megold\u00e1st is! BEADAND\u00d3 (1 pont) K\u00e9perny\u0151k\u00e9pekkel \u00e9s a relev\u00e1ns k\u00f3dr\u00e9szletekkel demonstr\u00e1lja az al\u00e1bbi eseteket: a j\u00e1t\u00e9kos helyesen v\u00e1laszolt a k\u00e9rd\u00e9sre, ( f5.1.png ) a j\u00e1t\u00e9kos helytelen\u00fcl v\u00e1laszolt a k\u00e9rd\u00e9sre, ( f5.2.png ) a v\u00e1laszad\u00e1s el\u0151tt nem, ut\u00e1na l\u00e1that\u00f3 a tov\u00e1bbl\u00e9p\u00e9shez haszn\u00e1lt gomb, ( f5.3.png ) az aktu\u00e1lis k\u00e9rd\u00e9s sz\u00e1ml\u00e1l\u00f3ja n\u00f6vekszik, ( f5.4.png ) megjelenik a felhaszn\u00e1l\u00f3 \u00e1ltal el\u00e9rt pontsz\u00e1m! ( f5.5.png )","title":"Feladat 5 (\u00d6n\u00e1ll\u00f3) - Tov\u00e1bbi j\u00e1t\u00e9klogika"},{"location":"laborok/13-js-advanced/","text":"Labor 13 - Halad\u00f3 JavaScript \u00b6 FONTOS INF\u00d3K 2021-22 \u0150SZRE! \u00b6 A laborg\u00e9peken a .NET 5 SDK v\u00e9gs\u0151 verzi\u00f3ja van telep\u00edtve; mert csak a f\u00e9l\u00e9v k\u00f6zben (2021. novemberben) jelent meg a .NET 6. A .NET 6-ban m\u00e1sk\u00e9ppen kezelend\u0151k az SPA alkalmaz\u00e1sok, amilyen technikailag jelen labor kliensalkalmaz\u00e1sa is, de az \u00faj m\u00f3dszer .NET 5 alatt nem t\u00e1mogatott. A kor\u00e1bbi megold\u00e1s integr\u00e1lhat\u00f3 volt a webpack egy kor\u00e1bbi verzi\u00f3j\u00e1val, \u00edgy ez a labor jelenleg ezt a verzi\u00f3t (\u00e9s a babel-b\u0151l is kor\u00e1bbi verzi\u00f3t) haszn\u00e1lja. Ez v\u00e9geredm\u00e9ny\u00e9ben azt jelenti, hogy n\u00e9h\u00e1ny \u00fajabb JavaScript funkci\u00f3, p\u00e9ld\u00e1ul a null-propag\u00e1tor oper\u00e1tor ( ?. ) nem fog m\u0171k\u00f6dni a webpack \u00e1ltal ford\u00edtott JavaScriptben. Az itt bemutatott JavaScript funkci\u00f3k mindegyike el\u00e9rhet\u0151 m\u00e1r a b\u00f6ng\u00e9sz\u0151ben, \u00edgy haszn\u00e1lhatjuk \u0151ket a webpack n\u00e9lk\u00fcl is, de erre az \u00fatmutat\u00f3 r\u00e9szletes utas\u00edt\u00e1st nem ad. Ha valaki webpack n\u00e9lk\u00fcl szeretn\u00e9 elk\u00e9sz\u00edteni a labort, \u00fagy: - a ClientApp helyett k\u00f6zvetlen\u00fcl a wwwroot -ba dolgozzon, - az import { X } from 'x' helyett minden\u00fctt import { X } from 'x.js' szintaxist haszn\u00e1ljon, - a Bootstrap belinkel\u00e9se t\u00f6rt\u00e9nhet k\u00f6zvetlen\u00fcl CDN-r\u0151l: <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"> , - a kiindul\u00f3 JavaScript f\u00e1jl a belinkelt guessgame.js lesz a client-start.js helyett (az ut\u00f3bbi f\u00e1jlra nem lesz sz\u00fcks\u00e9g), - a guessgame.js hivatkoz\u00e1sakor arra module -k\u00e9nt kell hivatkozni (k\u00fcl\u00f6nben az import utas\u00edt\u00e1sok nem fognak m\u0171k\u00f6dni), teh\u00e1t a kiindul\u00f3 <script> elem lecser\u00e9lend\u0151: <script src=\"guessgame.js\" type=\"module\"> . A m\u0171k\u00f6d\u00e9s ebben az esetben alapvet\u0151en m\u00e1s: a webpack seg\u00edts\u00e9g\u00e9vel az \u00f6sszes .js f\u00e1jlunkb\u00f3l egyetlen, \u00f6sszecsomagolt f\u00e1jl k\u00e9sz\u00fclne, a k\u00f6zvetlen modulbet\u00f6lt\u00e9ssel viszont minden hivatkozott .js f\u00e1jl k\u00fcl\u00f6n-k\u00fcl\u00f6n HTTP k\u00e9r\u00e9sekkel jut el a b\u00f6ng\u00e9sz\u0151be. Ez fejleszt\u00e9si id\u0151ben nem gond, de \u00e9les alkalmaz\u00e1sn\u00e1l mindenk\u00e9ppen valamif\u00e9le build folyamat, SPA CLI eszk\u00f6z vagy modulcsomagol\u00f3 haszn\u00e1lata javasolt. FONTOS! \u00b6 A labor v\u00e9g\u00e9n beadand\u00f3 a jegyz\u0151k\u00f6nyv PDF form\u00e1tumban! \u00dcgyeljen r\u00e1, hogy a ZIP f\u00e1jlba artifakt \u00e9s k\u00fcls\u0151 f\u00fcgg\u0151s\u00e9g ne ker\u00fclj\u00f6n (ford\u00edt\u00e1s eredm\u00e9nyek\u00e9ppen el\u0151\u00e1ll\u00f3 f\u00e1jlok, pl. a bin/obj \u00e9s node_modules mapp\u00e1k). A v\u00e9gs\u0151 ZIP f\u00e1jl v\u00e1rhat\u00f3 m\u00e9rete kb. 1-2 MB, az 5 MB-ot semmik\u00e9pp nem haladhatja meg! Bevezet\u00e9s \u00b6 A jelenlegi laborhoz telep\u00edtve kell lennie a .NET SDK legal\u00e1bb 5.0-s verzi\u00f3j\u00e1nak is a g\u00e9pre (ez Visual Studio 2019 16.8-as verzi\u00f3val is telep\u00fcl). Az aktu\u00e1lis laborhoz tartoz\u00f3 jegyz\u0151k\u00f6nyv sablonja DOCX form\u00e1tumban innen let\u00f6lthet\u0151. Modern JavaScript funkci\u00f3k \u00b6 A JavaScript nyelv napjainkban rohamosan (tal\u00e1n lassan cs\u00f6kken\u0151 \u00fctemben) fejl\u0151dik, de a b\u00f6ng\u00e9sz\u0151gy\u00e1rt\u00f3k lassan felvett\u00e9k az iramot ECMAScript szabv\u00e1nyos\u00edt\u00e1si folyamattal. A manaps\u00e1g t\u00e1mogatand\u00f3 b\u00f6ng\u00e9sz\u0151k legt\u00f6bbje szinte az \u00f6sszes ECMAScript 5 \u00e9s 6 funkci\u00f3t t\u00e1mogatja. Az Internet Explorer egy elavult, manaps\u00e1g ker\u00fclend\u0151 b\u00f6ng\u00e9sz\u0151, ami t\u00e1mogat bizonyos ES5 funkci\u00f3kat, de \u00faj funkci\u00f3friss\u00edt\u00e9seket nem kap. Kev\u00e9s \u00e9rv maradt a haszn\u00e1lata mellett, ugyanis a Microsoft az UWP alap\u00fa Edge b\u00f6ng\u00e9sz\u0151r\u0151l \u00e1tt\u00e9rt a Chromium motorra \u00e9p\u00fcl\u0151 Edge-re, ami m\u00e9g Windows 7 OS-en is el\u00e9rhet\u0151. Kir\u00edv\u00f3 eset gyakran n\u00e9h\u00e1ny kev\u00e9sb\u00e9 elterjedt mobil b\u00f6ng\u00e9sz\u0151 (pl. Opera Mini), valamint a Safari iOS \u00e9s Mac verzi\u00f3i is hagynak n\u00e9mi k\u00edv\u00e1nni val\u00f3t maguk ut\u00e1n (a k\u00fcl\u00f6nf\u00e9le JavaScript funkci\u00f3k t\u00e1mogat\u00e1sa ter\u00e9n). Ezzel azt mondhatjuk, hogy modern JavaScript alap\u00fa alkalmaz\u00e1sok fejleszt\u00e9sekor elegend\u0151 az \u00fan. \"\u00f6r\u00f6kz\u00f6ld\" b\u00f6ng\u00e9sz\u0151ket t\u00e1mogatnunk, amik naprak\u00e9szen tartj\u00e1k magukat folyamatos friss\u00edt\u00e9sekkel. Az \u00faj nyelvi funkci\u00f3k jelent\u0151s r\u00e9sze megfeleltethet\u0151 kor\u00e1bban alkalmazott programoz\u00e1si mint\u00e1knak, ez\u00e1ltal az \u00fajabb funkci\u00f3kat (\u00faj ECMAScript verzi\u00f3kban megjelen\u0151 szabv\u00e1nyos elemeket) leford\u00edthatjuk szabv\u00e1nyos kor\u00e1bbi ES verzi\u00f3ra (jellemz\u0151en ES5-re). A babel ford\u00edt\u00f3 a \"modern\" forr\u00e1sunkat k\u00e9pes \u00e1tford\u00edtani er\u0151sen kompatibilis JavaScriptt\u00e9. Eml\u00edt\u00e9sre m\u00e9lt\u00f3 m\u00e9g a TypeScript , ami a JavaScript nyelvre \u00e9p\u00fcl, kib\u0151v\u00edtve azt k\u00fcl\u00f6nf\u00e9le funkci\u00f3kkal, els\u0151sorban a t\u00edpusinform\u00e1ci\u00f3k rendszer\u00e9vel. Fontosabb modern JS k\u00e9pess\u00e9gek: - arrow function : function (param) { return param + 1; } helyett \u00edrhatjuk a r\u00f6videbb param => param + 1; k\u00f3dot. Ezen fel\u00fcl az arrow function nem rendel k\u00fcl\u00f6n \u00e9rt\u00e9ket a this v\u00e1ltoz\u00f3nak, \u00edgy a this ilyen esetekben a k\u00fcls\u0151 f\u00fcggv\u00e9nyre mutat (a f\u00fcggv\u00e9nyen bel\u00fcl ugyanaz a this , mint a h\u00edv\u00f3 f\u00e9l sz\u00e1m\u00e1ra). - string interpolation : a string interpol\u00e1ci\u00f3 sablonoz\u00e1st, \"template-ez\u00e9st\" jelent, a string-ben k\u00fcl\u00f6nb\u00f6z\u0151 hely\u0151rz\u0151ket helyezhet\u00fcnk el, amelyek ki\u00e9rt\u00e9kel\u0151dnek: `Hello, I'm ${ this . getName () } !` - const \u00e9s let : a var \"univerz\u00e1lis\" v\u00e1ltoz\u00f3deklar\u00e1ci\u00f3 helyett \u00e9rdemesebb haszn\u00e1lni a let \u00e9s const kulcsszavakat: el\u0151bbi v\u00e1ltoztathat \u00e9rt\u00e9ket, ut\u00f3bbi pedig nem. El\u0151ny\u00fck, hogy val\u00f3ban blokkszint\u0171ek, a var k\u00e9pes blokkok k\u00f6z\u00f6tt is \u00e9rv\u00e9nyes\u00fclni (sajnos). - class : haszn\u00e1lhatjuk az objektum-orient\u00e1lt class kulcssz\u00f3t, amelyet kor\u00e1bban c\u00edmk\u00e9zetlen, k\u00f6z\u00f6ns\u00e9ges konstruktorf\u00fcggv\u00e9nyekkel pr\u00f3b\u00e1ltunk k\u00f6r\u00fcl\u00edrni: class Dog { constructor ( name ) { this . getName = () => name ; } bark () { alert ( `Hello, I'm ${ this . getName () } !` ); } } const spot = new Dog ( \"Spot\" ); spot . bark (); import / export : f\u00e1jljainkban v\u00e1ltoz\u00f3kat, oszt\u00e1lyokat deklar\u00e1lhatunk, melyeket k\u00edv\u00fclr\u0151l haszn\u00e1lhatnak (kv\u00e1zi, mint a publikus l\u00e1that\u00f3s\u00e1g), ezeket az export kulcssz\u00f3val l\u00e1tjuk el. A m\u00e1sik oldalon, ahol haszn\u00e1lni szeretn\u00e9nk a f\u00e1jlb\u00f3l egy publik\u00e1lt szimb\u00f3lumot, az import kulcssz\u00f3val tehetj\u00fck ezt meg, a f\u00e1jl el\u00e9r\u00e9si \u00fatj\u00e1t megadva: dog . js : ------- export class Dog { bark () => console . log ( `Woof! I'm ${ this . name } !` ) } barks . js : --------- import { Dog } from './dog' ; export function makeNewDogAndBark ( name ) { const dog = new Dog ( name ); dog . bark (); return dog ; } A TypeScript nyelv a fenti ford\u00edt\u00e1si folyamatot annyival eg\u00e9sz\u00edti ki, hogy ford\u00edt\u00e1si id\u0151ben k\u00fcl\u00f6nf\u00e9le vizsg\u00e1latokat v\u00e9gez a k\u00f3don, \u00edgy a hib\u00e1ink ak\u00e1r m\u00e1r ford\u00edt\u00e1si id\u0151ben is kider\u00fclhetnek. Els\u0151sorban ehhez t\u00edpusvizsg\u00e1latokat \u00e9s statikus k\u00f3danal\u00edzist hajt v\u00e9gre. A VS Code az anal\u00edzist TypeScript seg\u00edts\u00e9g\u00e9vel a norm\u00e1l JavaScript f\u00e1jlokon is elv\u00e9gzi, ez\u00e9rt kapunk IntelliSense-t, s\u0151t, ez\u00e9rt jelennek meg esetenk\u00e9nt v\u00e1ltoz\u00f3k, param\u00e9terek t\u00edpusai is a seg\u00edts\u00e9gben. A Webpack egy \"modulcsomagol\u00f3\". A JavaScript f\u00e1jljainkat \u00e9rdemes k\u00fcl\u00f6n tartani, hogy ne t\u00f6bbt\u00edzezer soros k\u00f3df\u00e1jljaink legyenek, hanem minden a saj\u00e1t hely\u00e9n legyen - mivel a b\u00f6ng\u00e9sz\u0151ben sok f\u00e1jlt let\u00f6lteni pedig m\u00e9g HTTP/2-vel sem optim\u00e1lisabb, mintha egy nagy f\u00e1jlt t\u00f6lten\u00e9nk le. Webpack seg\u00edts\u00e9g\u00e9vel t\u00f6bbek k\u00f6z\u00f6tt a JS f\u00e1jljainkat minifik\u00e1lni tudjuk, \u00f6ssze tudjuk \u0151ket csomagolni kevesebb f\u00e1jll\u00e1, valamint k\u00fcl\u00f6nf\u00e9le plusz funkci\u00f3kat tudunk pluginekkel \u00e9s bet\u00f6lt\u0151kkel az alkalmaz\u00e1sunk terjeszt\u00e9si folyamat\u00e1ba \u00e9kelni, pl. source map f\u00e1jlokat, transpilereket vagy k\u00e9p-optimaliz\u00e1l\u00f3kat haszn\u00e1lni. Manaps\u00e1g gyakorta haszn\u00e1lt funkci\u00f3ja a Hot Module Replacement (HMR) , amely b\u00e1rmif\u00e9le \u00fajraind\u00edt\u00e1s n\u00e9lk\u00fcl, amikor a forr\u00e1sf\u00e1jlunk m\u00f3dosul, \u00e9rtes\u00edti a b\u00f6ng\u00e9sz\u0151t a v\u00e1ltoz\u00e1sr\u00f3l \u00e9s azonnal az \u00faj k\u00f3d t\u00f6lt\u0151dik be (friss\u00edteni sem sz\u00fcks\u00e9ges a b\u00f6ng\u00e9sz\u0151t). Gyakran a Webpacket valamilyen magasabb szint\u0171 keretrendszer r\u00e9szek\u00e9nt (pl. Angular) haszn\u00e1ljuk, el\u0151l\u00fcnk el van fedve, de haszn\u00e1lhatjuk k\u00e9zzel is. H\u00e1tr\u00e1nya, hogy a konfigur\u00e1ci\u00f3 gyakran nagyon bonyolult, a dokument\u00e1ci\u00f3ja pedig nem a legjobb min\u0151s\u00e9g\u0171. El\u0151k\u00e9sz\u00edt\u00e9s \u00b6 A laboron k\u00e9sz\u00edtend\u0151 alkalmaz\u00e1s egy kisebb/nagyobb bark\u00f3ba lesz. A \"g\u00e9p\" gondol egy sz\u00e1mra, majd a felhaszn\u00e1l\u00f3 dolga kital\u00e1lni a sz\u00e1mot. A tippre a v\u00e1lasz mindig \"kisebb\", \"nagyobb\" vagy \"tal\u00e1lt\". Kl\u00f3nozzuk le a kiindul\u00f3 projektet ( https://github.com/VIAUAC00/labor13-start.git ) egy git klienssel vagy parancssorb\u00f3l! Egy \u00fcres munkamapp\u00e1ban ind\u00edtsuk el a VS Code-ot! A be\u00e9p\u00edtett termin\u00e1lb\u00f3l (Ctrl+\u00f6) adjuk ki az al\u00e1bbi parancsokat: Fontos! A laborg\u00e9peken nem vagy nem mindig \u00e9rhet\u0151 el megfelel\u0151en az NPM lok\u00e1lis cache p\u00e9ld\u00e1nya, ez\u00e9rt haszn\u00e1ljuk helyette itt az npm install --cache .cache parancsot, ami az aktu\u00e1lis mapp\u00e1ban egy .cache nev\u0171 mapp\u00e1t haszn\u00e1l a k\u00f6zponti gyors\u00edt\u00f3t\u00e1r helyett. Lok\u00e1lis g\u00e9pen is haszn\u00e1lhatjuk ezt a parancsot, de ott elegend\u0151 (kell, hogy legyen) az npm install is. Ez a .cache mappa NE KER\u00dcLJ\u00d6N a tanulm\u00e1nyi rendszerbe felt\u00f6ltend\u0151 ZIP f\u00e1jlba! git clone https://github.com/VIAUAC00/labor13-start.git cd labor13-start npm install --cache .cache dotnet restore dotnet watch run Az npm install parancs a kliens- \u00e9s szerver oldai JavaScript f\u00fcgg\u0151s\u00e9geket t\u00f6lti le. Kliens oldalon haszn\u00e1ljuk a Bootstrapet, szerver oldalon pedig a Webpacket \u00e9s Babelt. A dotnet restore parancs a szerveroldali .NET f\u00fcgg\u0151s\u00e9geket t\u00f6lti le. A dotnet watch run parancs elind\u00edtja a szerveralkalmaz\u00e1st, majd \u00fajraford\u00edtja \u00e9s \u00fajraind\u00edtja, amikor v\u00e1ltoz\u00e1st detekt\u00e1l \u00e9s \u00e9rtes\u00edti a kapcsol\u00f3dott b\u00f6ng\u00e9sz\u0151p\u00e9ld\u00e1nyt, hogy v\u00e1ltoz\u00e1s volt, ami friss\u00edti mag\u00e1t. Ut\u00f3bbi funkci\u00f3 (hot reload) nem mindig m\u0171k\u00f6dik hib\u00e1tlanul, ez\u00e9rt \u00e9rdemes tov\u00e1bbra is figyelni, hogy a v\u00e1ltoz\u00e1saink \u00e9rv\u00e9nyre jutottak-e, esetleg k\u00e9zzel friss\u00edteni az oldalt. Fontos, hogy a webpack a .NET ford\u00edt\u00e1s el\u0151tt fut, ez\u00e9rt ha ford\u00edt\u00e1si hib\u00e1nk van, akkor azt a .\\node_modules\\.bin\\webpack parancs kiad\u00e1s\u00e1val tudjuk ellen\u0151rizni. Megj.: Mivel ez egy .NET-es projekt, ak\u00e1r a Visual Studio 2019-cel is megnyithattuk volna a solution-t, s\u0151t, ez lehet a prefer\u00e1lt, ha a szerver oldali k\u00f3dot szeretn\u00e9nk majd m\u00f3dos\u00edtani. Ha valaki k\u00e9nyelmesen mozog a Visual Studio-ban, haszn\u00e1lja a labor sor\u00e1n azt nyugodtan VS Code helyett. A VS Code gyakrabban haszn\u00e1lt kliens oldali fejleszt\u00e9shez, m\u00edg a \"nagy\" Visual Studio k\u00e9nyelmesebb a szerver oldalra. Ha nem \u00e9rhet\u0151 el az oldal a HTTPS v\u00e9gponton, pr\u00f3b\u00e1ljuk meg az al\u00e1bbiakat: - tan\u00fas\u00edtv\u00e1ny probl\u00e9ma eset\u00e9n adjuk ki az al\u00e1bbi parancsokat PowerShellben (pl. a VS Code be\u00e9p\u00edtett Terminalb\u00f3l) a projekt gy\u00f6k\u00e9rmapp\u00e1j\u00e1b\u00f3l, ahol a .csproj f\u00e1jl is tal\u00e1lhat\u00f3: Get-ChildItem Cert :\\ CurrentUser \\ My | Where-Object { $_ . Subject -match 'localhost' } | Remove-Item dotnet dev-certs https -t - VAGY a launchSettings.json f\u00e1jlban \u00edrjuk \u00e1t a 'launchUrl' \u00e9s 'applicationUrl' \u00e9rt\u00e9keket https -r\u0151l http -re, \u00e9s sz\u00fcks\u00e9g eset\u00e9n enged\u00e9lyezz\u00fck a b\u00f6ng\u00e9sz\u0151 be\u00e1ll\u00edt\u00e1sai k\u00f6z\u00f6tt, hogy http-n is enged\u00e9lyezze a kommunik\u00e1ci\u00f3t, - VAGY (ha a laborg\u00e9peken minden k\u00f6t\u00e9l szakad, de figyelem , \u00edgy az utols\u00f3, iMSc feladat nem v\u00e9gezhet\u0151 el, ahhoz a szerverre mindenk\u00e9pp sz\u00fcks\u00e9g van!), haszn\u00e1ljuk a Live Servert: 1. k\u00f6zvetlen\u00fcl a wwwroot mapp\u00e1t nyissuk meg VS Code-ban, 2. m\u00e1soljuk \u00e1t ide a node_modules-b\u00f3l a bootstrap\\dist\\css\\bootstrap.css f\u00e1jlt, 3. hozzunk l\u00e9tre egy-egy \u00fcres f\u00e1jlt a wwwroot mapp\u00e1ban client-start.js \u00e9s styles.css n\u00e9ven, 4. hivatkozzuk ezeket az index.html <head> elem\u00e9ben a guessgame.js hivatkoz\u00e1sa helyett : ``` HTML 5. ind\u00edtsuk el a Live Servert a VS Code-b\u00f3l (a bal als\u00f3 sarokban lev\u0151 \"Go Live\" vagy az F1 -> 'Open Live Server' lehet\u0151s\u00e9ggel), 6. a labor h\u00e1tralev\u0151 r\u00e9sz\u00e9ben \u00fcgyelj\u00fcnk r\u00e1, hogy a ClientApp mappa helyett a wwwroot-ba dolgozzunk. Az alkalmaz\u00e1s indul\u00e1s\u00e1t k\u00f6vet\u0151en, ha \u00faj JS f\u00e1jlokat hozunk l\u00e9tre \u00e9s hivatkozzuk \u0151ket, a Webpack HMR ezeket a f\u00e1jlokat automatikusan friss\u00edti a b\u00f6ng\u00e9sz\u0151ben. Ett\u0151l f\u00fcggetlen\u00fcl el\u0151fordulhat, hogy a kliens oldalt \u00fajra kell ind\u00edtanunk, ekkor tov\u00e1bbra is sz\u00fcks\u00e9ges a b\u00f6ng\u00e9sz\u0151ben friss\u00edten\u00fcnk F5-tel. Elegend\u0151 egyetlen f\u00e1jlt refer\u00e1lnunk a HTML-ben, ez a guessgame.js n\u00e9vre hallgat. Ez az \u00f6sszecsomagolt, kliens oldali JavaScript alkalmaz\u00e1sunk. A kliens oldali k\u00f3d a ClientApp mapp\u00e1ban lesz tal\u00e1lhat\u00f3. Az alkalmaz\u00e1s bel\u00e9p\u00e9si pontja a ClientApp/client-start.js f\u00e1jl. A megold\u00e1s sor\u00e1n haszn\u00e1ljuk az objektumorient\u00e1lt megk\u00f6zel\u00edt\u00e9st \u00e9s a modern JS funkci\u00f3kat! Igyekezz\u00fcnk komponens-orient\u00e1ltan gondolkodni: egy objektum komponens, ha megjelenik a fel\u00fcleten a reprezent\u00e1ci\u00f3ja , k\u00e9pes kommunik\u00e1lni m\u00e1s objektumokkal \u00e9s komponensekkel, ezen fel\u00fcl lehet \u00e1llapota (mez\u0151i, tulajdons\u00e1gai, amiket karban tart). A 2021. novemberben megjelent .NET 6-tal az itt alkalmazott megk\u00f6zel\u00edt\u00e9s szerveroldali r\u00e9sze jelent\u0151sen egyszer\u0171s\u00f6d\u00f6tt . Feladat 1 (1 pont) \u00b6 M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet az alkalmaz\u00e1s kezd\u0151k\u00e9perny\u0151j\u00e9r\u0151l! Modern JavaScript funkci\u00f3k \u00b6 Az alkalmaz\u00e1sunknak sz\u00fcks\u00e9ge lesz egy \"g\u00e9pre\", aki majd kigondolja a sz\u00e1mot. Az egyszer\u0171s\u00e9g kedv\u00e9\u00e9rt most ez egy 1 \u00e9s 100 k\u00f6z\u00f6tti sz\u00e1m lesz, az \u00e9rt\u00e9k nem konfigur\u00e1lhat\u00f3. Szimul\u00e1ljuk, hogy a \"sz\u00e1m\u00edt\u00e1s\" komplex, \u00fagyhogy kis k\u00e9sleltet\u00e9st visz\u00fcnk majd abba, am\u00edg a v\u00e1laszt visszakapjuk a tipp\u00fcnkre. Az objektumaink, melyek a fel\u00fcleten is megjelennek, rendelkezni fognak egy render() f\u00fcggv\u00e9nnyel, \u00e9s lesz egy (az alkalmaz\u00e1s szempontj\u00e1b\u00f3l) glob\u00e1lis render() f\u00fcggv\u00e9ny\u00fcnk is, ami minden komponenst kirajzol azok render() f\u00fcggv\u00e9ny\u00e9nek megh\u00edv\u00e1s\u00e1val. El\u0151sz\u00f6r k\u00e9sz\u00edts\u00fck el az id\u0151z\u00edt\u0151t! Az id\u0151z\u00edt\u0151 a j\u00e1t\u00e9k indul\u00e1sakor elkezdi sz\u00e1molni a kliensen az eltelt id\u0151t. M\u00e1s elemekr\u0151l nem tud, \u00f6n\u00e1ll\u00f3an m\u0171k\u00f6dni k\u00e9pes, elindulni \u00e9s meg\u00e1llni tud, el lehet t\u0151le k\u00e9rni form\u00e1zottan az eltelt id\u0151t, \u00e9s ki tudja rajzolni az eltelt id\u0151t a fel\u00fcletre. A komponens k\u00f3dja \u00edgy az al\u00e1bbi: ClientApp \\ timer . js : ------------------- export class Timer { start () { this . started = Date . now (); this . interval = setInterval (() => this . render (), 150 ); } stop () { this . stopped = Date . now (); clearInterval ( this . interval ); } clear () { this . started = this . stopped = undefined ; } getElapsedTime () { return this . started ? Math . floor ((( this . stopped ? this . stopped : Date . now ()) - this . started ) / 1000 ) : \"-\" ; } render () { document . getElementById ( \"timer\" ). innerText = this . getElapsedTime (); } } Az id\u0151z\u00edt\u0151t \u00f6nmag\u00e1ban tesztelhetj\u00fck, ehhez p\u00e9ld\u00e1nyos\u00edtjuk, elind\u00edtjuk, majd le\u00e1ll\u00edtjuk: ClientApp \\ client - start . js : -------------------------- import { Timer } from './timer' ; window . addEventListener ( 'DOMContentLoaded' , () => { const timer = new Timer (); timer . start (); setTimeout (() => timer . stop (), 3000 ); }); Az id\u0151z\u00edt\u0151 persze \u00f6nmag\u00e1ban nem egy hasznos funkci\u00f3 a j\u00e1t\u00e9kban, viszont maga a j\u00e1t\u00e9k, mint komponens egy eleme. A j\u00e1t\u00e9kos is ilyen elem, r\u00f3la csak a nev\u00e9t kell tudnunk, viszont ez id\u0151vel fog csak ismertt\u00e9 v\u00e1lni sz\u00e1munkra, teh\u00e1t egy Promise objektummal tudjuk reprezent\u00e1lni. ClientApp \\ player . js : -------------------- export class Player { constructor () { this . onNameSet = new Promise (( resolve , reject ) => { document . getElementById ( 'start-form' ). addEventListener ( 'submit' , e => { e . preventDefault (); const name = document . getElementById ( 'name-input' ). value ; if ( name && name . length ) { resolve ( name ); } }); }); this . onNameSet . then ( name => { this . name = name ; this . render (); }); } render () { for ( let element of [ document . getElementById ( 'name-input' ), document . getElementById ( 'start-button' )]) element . disabled = !! ( this . name && this . name . length ); } } A Promise beteljesedik, amikor a #start-form \u0171rlapot elk\u00fcldik, \u00e9s a #name-input \u00e9rt\u00e9ke nem \u00fcres. Erre a Promise-re a j\u00e1t\u00e9kos maga is feliratkozik, \u00e9s sikeres beteljesed\u00e9s eset\u00e9n a name property-t be\u00e1ll\u00edtja mag\u00e1nak. A render() -ben megvizsg\u00e1lja, hogy van-e n\u00e9v, \u00e9s ha van, a disabled attrib\u00fatumokat megfelel\u0151en be\u00e1ll\u00edtja. Haszn\u00e1lhatn\u00e1nk a Promise bev\u00e1r\u00e1s\u00e1ra az await kulcssz\u00f3t is; ez viszont konstruktorban nem haszn\u00e1lhat\u00f3. L\u00e1thatjuk, hogy mindenki saj\u00e1t mag\u00e1t rendereli ki, amikor \u00e1llapotv\u00e1ltoz\u00e1st \u00e9szlel. Az eg\u00e9sz \u00f6sszek\u00f6t\u00e9s\u00e9re hozzuk l\u00e9tre a Game-et, ami mag\u00e1t a j\u00e1t\u00e9kot reprezent\u00e1lja. A Game m\u00e1r biztonsan ismer egy id\u0151z\u00edt\u0151t \u00e9s egy j\u00e1t\u00e9kost. A j\u00e1t\u00e9kos nev\u00e9nek v\u00e1ltoz\u00e1s\u00e1ra iratkozzunk fel, ez fogja elind\u00edtani a j\u00e1t\u00e9kot mag\u00e1t. A kezdeti \u00e1llapotot is ki tudja renderelni. Egy components property-ben fogjuk gy\u0171jteni az egyes komponenseinket, \u00e9s azoknak meg tudjuk h\u00edvni mindnek a render f\u00fcggv\u00e9ny\u00e9t (amennyiben a komponensnek van render f\u00fcggv\u00e9nye): ClientApp \\ game . js : ------------------ import { Player } from './player' ; import { Timer } from './timer' ; export class Game { constructor () { this . timer = new Timer (); this . player = new Player (); this . player . onNameSet . then (() => this . start ()); this . components = [ this . timer , this . player ]; this . render (); } render () { this . components . map ( c => c && typeof ( c . render ) === 'function' && c . render ()); } start () { this . timer . start (); } onGuessed ( num , guess ) { } onGuessing ( num ) { } } A j\u00e1t\u00e9kot a dokumentum bet\u00f6lt\u00e9sekor p\u00e9ld\u00e1nyos\u00edtjuk. Az onGuessed f\u00fcggv\u00e9nyt k\u00edv\u00fclr\u0151l tudj\u00e1k majd megh\u00edvni, jelezv\u00e9n, hogy egy tipp kisebb vagy nagyobb volt a \"gondolt\" sz\u00e1mn\u00e1l, esetleg tal\u00e1lt. Az onGuessing f\u00fcggv\u00e9nnyel egy tippet tudnak majd a j\u00e1t\u00e9knak k\u00fcldeni. A client-start.js tartalm\u00e1t cser\u00e9lj\u00fck le az al\u00e1bbira: ClientApp \\ client - start . js : -------------------------- import { Game } from './game' ; window . addEventListener ( 'DOMContentLoaded' , () => { const game = new Game (); }); Feladat 2 (1 pont) \u00b6 M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet, ahol megadja a nev\u00e9t, \u00e9s ennek hat\u00e1s\u00e1ra az id\u0151z\u00edt\u0151 elindult, a n\u00e9v bek\u00e9r\u00e9s\u00e9re szolg\u00e1l\u00f3 input, valamint az ind\u00edt\u00e1sra szolg\u00e1l\u00f3 gomb pedig le vannak tiltva. J\u00e1t\u00e9klogika \u00b6 A j\u00e1t\u00e9klogik\u00e1t egy random gener\u00e1tor \u00e1ltal adott 1 \u00e9s 100 k\u00f6z\u00f6tti eg\u00e9sz sz\u00e1m, \u00e9s a tippel\u00e9sre adott kisebb/nagyobb v\u00e1lasz interf\u00e9sze adja. \u00cdrjuk meg a j\u00e1t\u00e9klogik\u00e1t a kliens oldalon! ClientApp \\ logic . js : ------------------- export class Logic { constructor ( game ) { this . game = game ; } startGame () { const secretNumber = Math . floor ((( Math . random () * 100 ) + 1 )); this . secretGuess = ( num ) => secretNumber < num ? 'less' : secretNumber > num ? 'greater' : 'correct' ; } guess ( num ) { if ( this . secretGuess && typeof ( this . secretGuess ) === 'function' ) { setTimeout (() => this . game . onGuessed ( num , this . secretGuess ( num )), 400 ); } } } A titkos sz\u00e1mot a lok\u00e1lisan, a startGame f\u00fcggv\u00e9nyben t\u00e1rolt secretNumber v\u00e1ltoz\u00f3ban t\u00e1roljuk. Ez a v\u00e1ltoz\u00f3 k\u00edv\u00fclr\u0151l nem l\u00e1that\u00f3, az egyetlen f\u00fcggv\u00e9ny, aki ismeri ezt az \u00e9rt\u00e9ket, a secretGuess . A guess \"publikus\" f\u00fcggv\u00e9nyt megh\u00edvva a logika \u00e9rtes\u00edti a j\u00e1t\u00e9kot a tipp helyess\u00e9g\u00e9r\u0151l az onGuessed f\u00fcggv\u00e9nyen kereszt\u00fcl. A v\u00e1lasz k\u00e9sleltetve \u00e9rkezik, a k\u00e9sleltet\u00e9s 400ms. A j\u00e1t\u00e9knak sz\u00fcks\u00e9ge lesz valamilyen mechanizmusra, hogy meg tudja jelen\u00edteni a helyes/helytelen tippeket. Ezt egy Guesses oszt\u00e1ly p\u00e9ld\u00e1ny\u00e1ban fogjuk t\u00e1rolni, ami a fel\u00fcleten megjelen\u0151, tippeket tartalmaz\u00f3 t\u00e1bl\u00e1zatot fogja friss\u00edteni sz\u00fcks\u00e9g eset\u00e9n. ClientApp \\ guesses . js : --------------------- export class Guesses { constructor () { this . clear (); } addGuess ( num , value ) { if ( num && value ) { this . guesses . push ({ num , value }); this . render (); } } clear () { this . guesses = []; this . render (); } render () { for ( let tr of Array . from ( document . querySelectorAll ( '#guesses tbody tr' ))) tr . remove (); for ( let tr of ( this . guesses . map (( g , i ) => `<tr> <td> ${ i + 1 } </td> <td class='text-right'> ${ g . num } </td> <td class='bg- ${ g . value === 'correct' ? 'success' : 'danger' } '> ${ g . value === 'correct' ? '!!!' : g . value === 'less' ? '&gt;' : '&lt;' } </td> </tr>` ). reverse ())) document . querySelector ( '#guesses tbody' ). innerHTML += tr ; } } M\u00e1r csak a fel\u00fcletr\u0151l \u00e9rkez\u0151 tippet kell kezeln\u00fcnk, ehhez egy Guess oszt\u00e1lyt hozunk l\u00e9tre: ClientApp \\ guess . js export class Guess { constructor ( game ) { document . getElementById ( 'guess-form' ). addEventListener ( 'submit' , e => { e . preventDefault (); const value = parseInt ( document . getElementById ( 'guess-input' ). value ); if ( ! isNaN ( value ) && value > 0 && value <= 100 ) game . onGuessing ( value ); document . getElementById ( 'guess-form' ). reset (); }); document . getElementById ( 'guess-form' ). reset (); this . setEnabled ( false ); } setEnabled ( value ) { this . enabled = !! value ; this . render (); } render () { for ( let element of [ document . getElementById ( 'guess-input' ), document . getElementById ( 'guess-button' )]) { element . disabled = ! this . enabled ; } if ( ! this . enabled ) { document . getElementById ( 'guess-input' ). focus (); } } } \u00d6ssze kell k\u00f6tn\u00fcnk a j\u00e1t\u00e9kot a logik\u00e1val, ill. a kor\u00e1bbi tippek t\u00e1rol\u00e1s\u00e1\u00e9rt felel\u0151s objektummal, valamint kezeln\u00fcnk kell a fel\u00fcletr\u0151l, a felhaszn\u00e1l\u00f3 r\u00e9sz\u00e9r\u0151l \u00e9rkez\u0151 tippet. Friss\u00edts\u00fck a game.js tartalm\u00e1t az al\u00e1bbira: ClientApp \\ game . js : ------------------ import { Player } from './player' ; import { Timer } from './timer' ; import { Logic } from './logic' ; import { Guesses } from './guesses' ; import { Guess } from './guess' ; export class Game { constructor () { this . timer = new Timer (); this . player = new Player (); this . logic = new Logic ( this ); this . guesses = new Guesses (); this . guess = new Guess ( this ); this . player . onNameSet . then (() => this . start ()); this . components = [ this . timer , this . player , this . logic , this . guesses , this . guess ]; this . render (); } render () { this . components . map ( c => c && typeof ( c . render ) === 'function' && c . render ()); } start () { this . timer . start (); this . guess . setEnabled ( true ); this . logic . startGame (); } onGuessed ( num , guess ) { this . guesses . addGuess ( num , guess ); if ( guess === 'correct' ) { this . guess . setEnabled ( false ); this . timer . stop (); } } onGuessing ( num ) { this . logic . guess ( num ); } } Feladat 3 (1 pont) \u00b6 M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet egy j\u00e1t\u00e9k v\u00e9geredm\u00e9ny\u00e9r\u0151l, ahol l\u00e1that\u00f3k a leadott tippek \u00e9s az eltelt id\u0151! \u00d6n\u00e1ll\u00f3 feladatok \u00b6 Toplista \u00b6 A toplist\u00e1n kiz\u00e1r\u00f3lag a legjobb 10 eredm\u00e9nnyel rendelkez\u0151 egy\u00e9n jelenik meg. A toplista el\u0151sz\u00f6r a tippek sz\u00e1ma, majd a megtett id\u0151 alapj\u00e1n cs\u00f6kken\u0151 sorrend szerint rendezett. A toplista perzisztens, teh\u00e1t a j\u00e1t\u00e9k indul\u00e1sakor a toplista localStorage -b\u0151l bet\u00f6lt\u0151dik, az \u00faj bejegyz\u00e9sek pedig ide perziszt\u00e1l\u00f3dnak. Ehhez a localStorage glob\u00e1lis objektum getItem(key) \u00e9s setItem(key, value) met\u00f3dusai haszn\u00e1lhat\u00f3k, a rendez\u00e9shez a t\u00f6mb sort(callback) f\u00fcggv\u00e9nye haszn\u00e1lhat\u00f3, a callback k\u00e9t elemet kap, amelyekhez egy \u00f6sszehasonl\u00edt\u00e1st kell megadnunk, ami egy sz\u00e1m\u00e9rt\u00e9kkel t\u00e9r vissza (a kisebb sz\u00e1m\u00e9rt\u00e9k\u0171 elem el\u0151r\u00e9bb lesz a list\u00e1ban). ClientApp \\ toplist . js : --------------------- export class Toplist { constructor () { this . items = JSON . parse ( localStorage . getItem ( 'toplist' ) || '[]' ); this . render (); } setItem ( name , guesses , time ) { this . items . push ({ name , guesses , time }); this . items = this . items . sort (( a , b ) => a . guesses + a . time / 1000 - ( b . guesses + b . time / 1000 )). slice ( 0 , 9 ); localStorage . setItem ( 'toplist' , JSON . stringify ( this . items )); this . render (); } render () { document . querySelector ( '#toplist tbody' ). innerHTML = this . items . map (( e , i ) => ( `<tr> <th> ${ i + 1 } </th> <td> ${ e . name } </td> <td> ${ e . guesses } </td> <td> ${ e . time } </td> </tr>` )). join ( '' ); } } A toplist\u00e1t a j\u00e1t\u00e9khoz kell k\u00f6tn\u00fcnk, \u00e9s a setItem met\u00f3dust megh\u00edvni, amikor a j\u00e1t\u00e9knak v\u00e9ge. ClientApp \\ game . js : ------------------ /* ... */ import { Toplist } from './toplist' ; export class Game { constructor () { /* ... */ this . toplist = new Toplist (); /* ... */ this . components = [ this . timer , this . player , this . logic , this . guesses , this . guess , this . toplist ]; /* ... */ } /* ... */ onGuessed ( num , guess ) { /* ... */ if ( guess === 'correct' ) { /* ... */ this . toplist . setItem ( this . player . name , this . guesses . guesses . length , this . timer . getElapsedTime ()); } } /* ... */ } Feladat 4 (1 pont) \u00b6 M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet, amelyen legal\u00e1bb 3 k\u00fcl\u00f6nb\u00f6z\u0151 eredm\u00e9ny l\u00e1that\u00f3! \u00dajrakezd\u00e9s \u00b6 A fenti gondolatmenetekhez hasonl\u00f3an k\u00e9sz\u00edtse el a j\u00e1t\u00e9k \u00fajrakezd\u00e9s\u00e9t implement\u00e1l\u00f3 logik\u00e1t! Az \u00fajrakezd\u00e9s az al\u00e1bbiakat jelenti: - a j\u00e1t\u00e9k befejez\u00e9s\u00e9t k\u00f6vet\u0151en megjelenik a fel\u00fcleten egy Restart c\u00edmk\u00e9j\u0171 gomb, melyet megnyomva \u00faj j\u00e1t\u00e9k indul (ezt k\u00f6vet\u0151en ism\u00e9t elt\u0171nik), - a felhaszn\u00e1l\u00f3 nev\u00e9t bek\u00e9r\u0151 \u0171rlap \u00fajb\u00f3l enged\u00e9lyezve lesz, a f\u00f3kusz ide helyez\u0151dik, a felhaszn\u00e1l\u00f3nak lehet\u0151s\u00e9ge van \u00e1t\u00edrni a nev\u00e9t \u00e9s \u00faj j\u00e1t\u00e9kot ind\u00edtani, - a jobb oldali t\u00e1bl\u00e1zatban l\u00e1that\u00f3 kor\u00e1bbi tippek \u00fcr\u00fclnek. Feladat 5 (1 pont) \u00b6 - Illessze be a forr\u00e1sk\u00f3dot az \u00fajrakezd\u00e9st megval\u00f3s\u00edt\u00f3 komponenshez, illetve az \u00f6sszes \u00e9rintett komponenshez! - Illesszen be k\u00e9perny\u0151k\u00e9pet a fel\u00fcleten dinamikusan elhelyezett gombr\u00f3l! iMSc feladat (2 pont) \u00b6 A kliens oldalon t\u00e1rolt logik\u00e1t helyezze \u00e1t a szerver oldalra! A szerveren fut egy WebSocket kiszolg\u00e1l\u00f3, mely b\u00e1rmilyen wss://localhost:port -on fut\u00f3 k\u00e9r\u00e9sre v\u00e1laszol (HTTP eset\u00e9n ( ws://localhost:port )). A szerverkapcsolatot az al\u00e1bbi oszt\u00e1ly reprezent\u00e1lja (a portsz\u00e1mot sz\u00fcks\u00e9ges lehet \u00e1t\u00edrnia a saj\u00e1t szerver portsz\u00e1m\u00e1ra): ClientApp \\ socketserver . js : -------------------------- export class SocketServer { constructor () { this . socket = new WebSocket ( 'wss://localhost:7579/ws' ); this . open = false ; this . socket . onopen = () => { this . open = true ; this . socket . onmessage = e => { this . onRecieve ( JSON . parse ( e . data )); } }; } send ( action , name , guess ) { if ( this . open ) { const json = JSON . stringify ({ action , name , guess }); console . log ( `Sending message: ${ json } ` ) this . socket . send ( json ); } } onRecieve ( data ) { console . log ( data ); } } A socket szerver URL-t sz\u00fcks\u00e9ges lehet \u00e1t\u00edrni: a portsz\u00e1mnak a szerver portsz\u00e1m\u00e1nak kell lennie (a dotnet watch run parancs ki\u00edrja, hol indul a szerver), \u00e9s http eset\u00e9n ws , https eset\u00e9n pedig wss protokollt kell (/\u00e9rdemes) haszn\u00e1lni. A szervert az al\u00e1bbi k\u00f3d mint\u00e1j\u00e1ra tudja haszn\u00e1lni: const server = new SocketServer (); setTimeout (() => { server . send ( \"setName\" , \"John Doe\" ); server . send ( \"startGame\" , \"John Doe\" ); let guess = 0 ; setInterval (() => server . send ( \"guess\" , \"John Doe\" , ++ guess ), 500 ); }, 2000 ); A szerver az al\u00e1bbi k\u00e9r\u00e9sekre figyel: - startGame : j\u00e1t\u00e9k ind\u00edt\u00e1sa. - setName : n\u00e9v be\u00e1ll\u00edt\u00e1sa az aktu\u00e1lis j\u00e1t\u00e9koshoz. Sz\u00fcks\u00e9ges a \"name\" param\u00e9ter megad\u00e1sa is. - guess : tipp k\u00fcld\u00e9se. Sz\u00fcks\u00e9ges a guess param\u00e9ter megad\u00e1sa is. - toplist : toplista lek\u00e9r\u00e9se. A szerver az al\u00e1bbiakat k\u00fcldi: - a toplist\u00e1t az al\u00e1bbi JSON-form\u00e1tumban k\u00fcldi a szerver: { name, guesses, timeInSeconds } , - egy tippre a szerver az \u00f6sszes klienst \u00e9rtes\u00edti, az al\u00e1bbi objektumot k\u00fcldve: { name, guess, value, timeInSeconds } . Val\u00f3s\u00edtsa meg az al\u00e1bbiakat: - a szerver t\u00e1rolja a j\u00e1t\u00e9k \u00e1llapotot, nem a kliens, - a szerver \u00e9rtes\u00fcl\u00e9s\u00e9re a kliensek fel vannak iratkozva, \u00e9s megosztj\u00e1k az \u00e1llapotot (t\u00f6bb b\u00f6ng\u00e9sz\u0151 ablakkal tudja demonstr\u00e1lni), - a szerver t\u00e1rolja a toplist\u00e1t, - a szerver k\u00fcld v\u00e1laszesem\u00e9nyeket a tippel\u00e9sre, minden feliratkoz\u00f3t \u00e9rtes\u00edt. iMSc feladat (2 pont) \u00b6 M\u00e1solja be a relev\u00e1ns k\u00f3dr\u00e9szleteket \u00e9s r\u00f6vid magyar\u00e1zattal t\u00e1massza al\u00e1 megold\u00e1s\u00e1t!","title":"Labor 13 - Halad\u00f3 JavaScript"},{"location":"laborok/13-js-advanced/#labor-13-halado-javascript","text":"","title":"Labor 13 - Halad\u00f3 JavaScript"},{"location":"laborok/13-js-advanced/#fontos-infok-2021-22-oszre","text":"A laborg\u00e9peken a .NET 5 SDK v\u00e9gs\u0151 verzi\u00f3ja van telep\u00edtve; mert csak a f\u00e9l\u00e9v k\u00f6zben (2021. novemberben) jelent meg a .NET 6. A .NET 6-ban m\u00e1sk\u00e9ppen kezelend\u0151k az SPA alkalmaz\u00e1sok, amilyen technikailag jelen labor kliensalkalmaz\u00e1sa is, de az \u00faj m\u00f3dszer .NET 5 alatt nem t\u00e1mogatott. A kor\u00e1bbi megold\u00e1s integr\u00e1lhat\u00f3 volt a webpack egy kor\u00e1bbi verzi\u00f3j\u00e1val, \u00edgy ez a labor jelenleg ezt a verzi\u00f3t (\u00e9s a babel-b\u0151l is kor\u00e1bbi verzi\u00f3t) haszn\u00e1lja. Ez v\u00e9geredm\u00e9ny\u00e9ben azt jelenti, hogy n\u00e9h\u00e1ny \u00fajabb JavaScript funkci\u00f3, p\u00e9ld\u00e1ul a null-propag\u00e1tor oper\u00e1tor ( ?. ) nem fog m\u0171k\u00f6dni a webpack \u00e1ltal ford\u00edtott JavaScriptben. Az itt bemutatott JavaScript funkci\u00f3k mindegyike el\u00e9rhet\u0151 m\u00e1r a b\u00f6ng\u00e9sz\u0151ben, \u00edgy haszn\u00e1lhatjuk \u0151ket a webpack n\u00e9lk\u00fcl is, de erre az \u00fatmutat\u00f3 r\u00e9szletes utas\u00edt\u00e1st nem ad. Ha valaki webpack n\u00e9lk\u00fcl szeretn\u00e9 elk\u00e9sz\u00edteni a labort, \u00fagy: - a ClientApp helyett k\u00f6zvetlen\u00fcl a wwwroot -ba dolgozzon, - az import { X } from 'x' helyett minden\u00fctt import { X } from 'x.js' szintaxist haszn\u00e1ljon, - a Bootstrap belinkel\u00e9se t\u00f6rt\u00e9nhet k\u00f6zvetlen\u00fcl CDN-r\u0151l: <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"> , - a kiindul\u00f3 JavaScript f\u00e1jl a belinkelt guessgame.js lesz a client-start.js helyett (az ut\u00f3bbi f\u00e1jlra nem lesz sz\u00fcks\u00e9g), - a guessgame.js hivatkoz\u00e1sakor arra module -k\u00e9nt kell hivatkozni (k\u00fcl\u00f6nben az import utas\u00edt\u00e1sok nem fognak m\u0171k\u00f6dni), teh\u00e1t a kiindul\u00f3 <script> elem lecser\u00e9lend\u0151: <script src=\"guessgame.js\" type=\"module\"> . A m\u0171k\u00f6d\u00e9s ebben az esetben alapvet\u0151en m\u00e1s: a webpack seg\u00edts\u00e9g\u00e9vel az \u00f6sszes .js f\u00e1jlunkb\u00f3l egyetlen, \u00f6sszecsomagolt f\u00e1jl k\u00e9sz\u00fclne, a k\u00f6zvetlen modulbet\u00f6lt\u00e9ssel viszont minden hivatkozott .js f\u00e1jl k\u00fcl\u00f6n-k\u00fcl\u00f6n HTTP k\u00e9r\u00e9sekkel jut el a b\u00f6ng\u00e9sz\u0151be. Ez fejleszt\u00e9si id\u0151ben nem gond, de \u00e9les alkalmaz\u00e1sn\u00e1l mindenk\u00e9ppen valamif\u00e9le build folyamat, SPA CLI eszk\u00f6z vagy modulcsomagol\u00f3 haszn\u00e1lata javasolt.","title":"FONTOS INF\u00d3K 2021-22 \u0150SZRE!"},{"location":"laborok/13-js-advanced/#fontos","text":"A labor v\u00e9g\u00e9n beadand\u00f3 a jegyz\u0151k\u00f6nyv PDF form\u00e1tumban! \u00dcgyeljen r\u00e1, hogy a ZIP f\u00e1jlba artifakt \u00e9s k\u00fcls\u0151 f\u00fcgg\u0151s\u00e9g ne ker\u00fclj\u00f6n (ford\u00edt\u00e1s eredm\u00e9nyek\u00e9ppen el\u0151\u00e1ll\u00f3 f\u00e1jlok, pl. a bin/obj \u00e9s node_modules mapp\u00e1k). A v\u00e9gs\u0151 ZIP f\u00e1jl v\u00e1rhat\u00f3 m\u00e9rete kb. 1-2 MB, az 5 MB-ot semmik\u00e9pp nem haladhatja meg!","title":"FONTOS!"},{"location":"laborok/13-js-advanced/#bevezetes","text":"A jelenlegi laborhoz telep\u00edtve kell lennie a .NET SDK legal\u00e1bb 5.0-s verzi\u00f3j\u00e1nak is a g\u00e9pre (ez Visual Studio 2019 16.8-as verzi\u00f3val is telep\u00fcl). Az aktu\u00e1lis laborhoz tartoz\u00f3 jegyz\u0151k\u00f6nyv sablonja DOCX form\u00e1tumban innen let\u00f6lthet\u0151.","title":"Bevezet\u00e9s"},{"location":"laborok/13-js-advanced/#modern-javascript-funkciok","text":"A JavaScript nyelv napjainkban rohamosan (tal\u00e1n lassan cs\u00f6kken\u0151 \u00fctemben) fejl\u0151dik, de a b\u00f6ng\u00e9sz\u0151gy\u00e1rt\u00f3k lassan felvett\u00e9k az iramot ECMAScript szabv\u00e1nyos\u00edt\u00e1si folyamattal. A manaps\u00e1g t\u00e1mogatand\u00f3 b\u00f6ng\u00e9sz\u0151k legt\u00f6bbje szinte az \u00f6sszes ECMAScript 5 \u00e9s 6 funkci\u00f3t t\u00e1mogatja. Az Internet Explorer egy elavult, manaps\u00e1g ker\u00fclend\u0151 b\u00f6ng\u00e9sz\u0151, ami t\u00e1mogat bizonyos ES5 funkci\u00f3kat, de \u00faj funkci\u00f3friss\u00edt\u00e9seket nem kap. Kev\u00e9s \u00e9rv maradt a haszn\u00e1lata mellett, ugyanis a Microsoft az UWP alap\u00fa Edge b\u00f6ng\u00e9sz\u0151r\u0151l \u00e1tt\u00e9rt a Chromium motorra \u00e9p\u00fcl\u0151 Edge-re, ami m\u00e9g Windows 7 OS-en is el\u00e9rhet\u0151. Kir\u00edv\u00f3 eset gyakran n\u00e9h\u00e1ny kev\u00e9sb\u00e9 elterjedt mobil b\u00f6ng\u00e9sz\u0151 (pl. Opera Mini), valamint a Safari iOS \u00e9s Mac verzi\u00f3i is hagynak n\u00e9mi k\u00edv\u00e1nni val\u00f3t maguk ut\u00e1n (a k\u00fcl\u00f6nf\u00e9le JavaScript funkci\u00f3k t\u00e1mogat\u00e1sa ter\u00e9n). Ezzel azt mondhatjuk, hogy modern JavaScript alap\u00fa alkalmaz\u00e1sok fejleszt\u00e9sekor elegend\u0151 az \u00fan. \"\u00f6r\u00f6kz\u00f6ld\" b\u00f6ng\u00e9sz\u0151ket t\u00e1mogatnunk, amik naprak\u00e9szen tartj\u00e1k magukat folyamatos friss\u00edt\u00e9sekkel. Az \u00faj nyelvi funkci\u00f3k jelent\u0151s r\u00e9sze megfeleltethet\u0151 kor\u00e1bban alkalmazott programoz\u00e1si mint\u00e1knak, ez\u00e1ltal az \u00fajabb funkci\u00f3kat (\u00faj ECMAScript verzi\u00f3kban megjelen\u0151 szabv\u00e1nyos elemeket) leford\u00edthatjuk szabv\u00e1nyos kor\u00e1bbi ES verzi\u00f3ra (jellemz\u0151en ES5-re). A babel ford\u00edt\u00f3 a \"modern\" forr\u00e1sunkat k\u00e9pes \u00e1tford\u00edtani er\u0151sen kompatibilis JavaScriptt\u00e9. Eml\u00edt\u00e9sre m\u00e9lt\u00f3 m\u00e9g a TypeScript , ami a JavaScript nyelvre \u00e9p\u00fcl, kib\u0151v\u00edtve azt k\u00fcl\u00f6nf\u00e9le funkci\u00f3kkal, els\u0151sorban a t\u00edpusinform\u00e1ci\u00f3k rendszer\u00e9vel. Fontosabb modern JS k\u00e9pess\u00e9gek: - arrow function : function (param) { return param + 1; } helyett \u00edrhatjuk a r\u00f6videbb param => param + 1; k\u00f3dot. Ezen fel\u00fcl az arrow function nem rendel k\u00fcl\u00f6n \u00e9rt\u00e9ket a this v\u00e1ltoz\u00f3nak, \u00edgy a this ilyen esetekben a k\u00fcls\u0151 f\u00fcggv\u00e9nyre mutat (a f\u00fcggv\u00e9nyen bel\u00fcl ugyanaz a this , mint a h\u00edv\u00f3 f\u00e9l sz\u00e1m\u00e1ra). - string interpolation : a string interpol\u00e1ci\u00f3 sablonoz\u00e1st, \"template-ez\u00e9st\" jelent, a string-ben k\u00fcl\u00f6nb\u00f6z\u0151 hely\u0151rz\u0151ket helyezhet\u00fcnk el, amelyek ki\u00e9rt\u00e9kel\u0151dnek: `Hello, I'm ${ this . getName () } !` - const \u00e9s let : a var \"univerz\u00e1lis\" v\u00e1ltoz\u00f3deklar\u00e1ci\u00f3 helyett \u00e9rdemesebb haszn\u00e1lni a let \u00e9s const kulcsszavakat: el\u0151bbi v\u00e1ltoztathat \u00e9rt\u00e9ket, ut\u00f3bbi pedig nem. El\u0151ny\u00fck, hogy val\u00f3ban blokkszint\u0171ek, a var k\u00e9pes blokkok k\u00f6z\u00f6tt is \u00e9rv\u00e9nyes\u00fclni (sajnos). - class : haszn\u00e1lhatjuk az objektum-orient\u00e1lt class kulcssz\u00f3t, amelyet kor\u00e1bban c\u00edmk\u00e9zetlen, k\u00f6z\u00f6ns\u00e9ges konstruktorf\u00fcggv\u00e9nyekkel pr\u00f3b\u00e1ltunk k\u00f6r\u00fcl\u00edrni: class Dog { constructor ( name ) { this . getName = () => name ; } bark () { alert ( `Hello, I'm ${ this . getName () } !` ); } } const spot = new Dog ( \"Spot\" ); spot . bark (); import / export : f\u00e1jljainkban v\u00e1ltoz\u00f3kat, oszt\u00e1lyokat deklar\u00e1lhatunk, melyeket k\u00edv\u00fclr\u0151l haszn\u00e1lhatnak (kv\u00e1zi, mint a publikus l\u00e1that\u00f3s\u00e1g), ezeket az export kulcssz\u00f3val l\u00e1tjuk el. A m\u00e1sik oldalon, ahol haszn\u00e1lni szeretn\u00e9nk a f\u00e1jlb\u00f3l egy publik\u00e1lt szimb\u00f3lumot, az import kulcssz\u00f3val tehetj\u00fck ezt meg, a f\u00e1jl el\u00e9r\u00e9si \u00fatj\u00e1t megadva: dog . js : ------- export class Dog { bark () => console . log ( `Woof! I'm ${ this . name } !` ) } barks . js : --------- import { Dog } from './dog' ; export function makeNewDogAndBark ( name ) { const dog = new Dog ( name ); dog . bark (); return dog ; } A TypeScript nyelv a fenti ford\u00edt\u00e1si folyamatot annyival eg\u00e9sz\u00edti ki, hogy ford\u00edt\u00e1si id\u0151ben k\u00fcl\u00f6nf\u00e9le vizsg\u00e1latokat v\u00e9gez a k\u00f3don, \u00edgy a hib\u00e1ink ak\u00e1r m\u00e1r ford\u00edt\u00e1si id\u0151ben is kider\u00fclhetnek. Els\u0151sorban ehhez t\u00edpusvizsg\u00e1latokat \u00e9s statikus k\u00f3danal\u00edzist hajt v\u00e9gre. A VS Code az anal\u00edzist TypeScript seg\u00edts\u00e9g\u00e9vel a norm\u00e1l JavaScript f\u00e1jlokon is elv\u00e9gzi, ez\u00e9rt kapunk IntelliSense-t, s\u0151t, ez\u00e9rt jelennek meg esetenk\u00e9nt v\u00e1ltoz\u00f3k, param\u00e9terek t\u00edpusai is a seg\u00edts\u00e9gben. A Webpack egy \"modulcsomagol\u00f3\". A JavaScript f\u00e1jljainkat \u00e9rdemes k\u00fcl\u00f6n tartani, hogy ne t\u00f6bbt\u00edzezer soros k\u00f3df\u00e1jljaink legyenek, hanem minden a saj\u00e1t hely\u00e9n legyen - mivel a b\u00f6ng\u00e9sz\u0151ben sok f\u00e1jlt let\u00f6lteni pedig m\u00e9g HTTP/2-vel sem optim\u00e1lisabb, mintha egy nagy f\u00e1jlt t\u00f6lten\u00e9nk le. Webpack seg\u00edts\u00e9g\u00e9vel t\u00f6bbek k\u00f6z\u00f6tt a JS f\u00e1jljainkat minifik\u00e1lni tudjuk, \u00f6ssze tudjuk \u0151ket csomagolni kevesebb f\u00e1jll\u00e1, valamint k\u00fcl\u00f6nf\u00e9le plusz funkci\u00f3kat tudunk pluginekkel \u00e9s bet\u00f6lt\u0151kkel az alkalmaz\u00e1sunk terjeszt\u00e9si folyamat\u00e1ba \u00e9kelni, pl. source map f\u00e1jlokat, transpilereket vagy k\u00e9p-optimaliz\u00e1l\u00f3kat haszn\u00e1lni. Manaps\u00e1g gyakorta haszn\u00e1lt funkci\u00f3ja a Hot Module Replacement (HMR) , amely b\u00e1rmif\u00e9le \u00fajraind\u00edt\u00e1s n\u00e9lk\u00fcl, amikor a forr\u00e1sf\u00e1jlunk m\u00f3dosul, \u00e9rtes\u00edti a b\u00f6ng\u00e9sz\u0151t a v\u00e1ltoz\u00e1sr\u00f3l \u00e9s azonnal az \u00faj k\u00f3d t\u00f6lt\u0151dik be (friss\u00edteni sem sz\u00fcks\u00e9ges a b\u00f6ng\u00e9sz\u0151t). Gyakran a Webpacket valamilyen magasabb szint\u0171 keretrendszer r\u00e9szek\u00e9nt (pl. Angular) haszn\u00e1ljuk, el\u0151l\u00fcnk el van fedve, de haszn\u00e1lhatjuk k\u00e9zzel is. H\u00e1tr\u00e1nya, hogy a konfigur\u00e1ci\u00f3 gyakran nagyon bonyolult, a dokument\u00e1ci\u00f3ja pedig nem a legjobb min\u0151s\u00e9g\u0171.","title":"Modern JavaScript funkci\u00f3k"},{"location":"laborok/13-js-advanced/#elokeszites","text":"A laboron k\u00e9sz\u00edtend\u0151 alkalmaz\u00e1s egy kisebb/nagyobb bark\u00f3ba lesz. A \"g\u00e9p\" gondol egy sz\u00e1mra, majd a felhaszn\u00e1l\u00f3 dolga kital\u00e1lni a sz\u00e1mot. A tippre a v\u00e1lasz mindig \"kisebb\", \"nagyobb\" vagy \"tal\u00e1lt\". Kl\u00f3nozzuk le a kiindul\u00f3 projektet ( https://github.com/VIAUAC00/labor13-start.git ) egy git klienssel vagy parancssorb\u00f3l! Egy \u00fcres munkamapp\u00e1ban ind\u00edtsuk el a VS Code-ot! A be\u00e9p\u00edtett termin\u00e1lb\u00f3l (Ctrl+\u00f6) adjuk ki az al\u00e1bbi parancsokat: Fontos! A laborg\u00e9peken nem vagy nem mindig \u00e9rhet\u0151 el megfelel\u0151en az NPM lok\u00e1lis cache p\u00e9ld\u00e1nya, ez\u00e9rt haszn\u00e1ljuk helyette itt az npm install --cache .cache parancsot, ami az aktu\u00e1lis mapp\u00e1ban egy .cache nev\u0171 mapp\u00e1t haszn\u00e1l a k\u00f6zponti gyors\u00edt\u00f3t\u00e1r helyett. Lok\u00e1lis g\u00e9pen is haszn\u00e1lhatjuk ezt a parancsot, de ott elegend\u0151 (kell, hogy legyen) az npm install is. Ez a .cache mappa NE KER\u00dcLJ\u00d6N a tanulm\u00e1nyi rendszerbe felt\u00f6ltend\u0151 ZIP f\u00e1jlba! git clone https://github.com/VIAUAC00/labor13-start.git cd labor13-start npm install --cache .cache dotnet restore dotnet watch run Az npm install parancs a kliens- \u00e9s szerver oldai JavaScript f\u00fcgg\u0151s\u00e9geket t\u00f6lti le. Kliens oldalon haszn\u00e1ljuk a Bootstrapet, szerver oldalon pedig a Webpacket \u00e9s Babelt. A dotnet restore parancs a szerveroldali .NET f\u00fcgg\u0151s\u00e9geket t\u00f6lti le. A dotnet watch run parancs elind\u00edtja a szerveralkalmaz\u00e1st, majd \u00fajraford\u00edtja \u00e9s \u00fajraind\u00edtja, amikor v\u00e1ltoz\u00e1st detekt\u00e1l \u00e9s \u00e9rtes\u00edti a kapcsol\u00f3dott b\u00f6ng\u00e9sz\u0151p\u00e9ld\u00e1nyt, hogy v\u00e1ltoz\u00e1s volt, ami friss\u00edti mag\u00e1t. Ut\u00f3bbi funkci\u00f3 (hot reload) nem mindig m\u0171k\u00f6dik hib\u00e1tlanul, ez\u00e9rt \u00e9rdemes tov\u00e1bbra is figyelni, hogy a v\u00e1ltoz\u00e1saink \u00e9rv\u00e9nyre jutottak-e, esetleg k\u00e9zzel friss\u00edteni az oldalt. Fontos, hogy a webpack a .NET ford\u00edt\u00e1s el\u0151tt fut, ez\u00e9rt ha ford\u00edt\u00e1si hib\u00e1nk van, akkor azt a .\\node_modules\\.bin\\webpack parancs kiad\u00e1s\u00e1val tudjuk ellen\u0151rizni. Megj.: Mivel ez egy .NET-es projekt, ak\u00e1r a Visual Studio 2019-cel is megnyithattuk volna a solution-t, s\u0151t, ez lehet a prefer\u00e1lt, ha a szerver oldali k\u00f3dot szeretn\u00e9nk majd m\u00f3dos\u00edtani. Ha valaki k\u00e9nyelmesen mozog a Visual Studio-ban, haszn\u00e1lja a labor sor\u00e1n azt nyugodtan VS Code helyett. A VS Code gyakrabban haszn\u00e1lt kliens oldali fejleszt\u00e9shez, m\u00edg a \"nagy\" Visual Studio k\u00e9nyelmesebb a szerver oldalra. Ha nem \u00e9rhet\u0151 el az oldal a HTTPS v\u00e9gponton, pr\u00f3b\u00e1ljuk meg az al\u00e1bbiakat: - tan\u00fas\u00edtv\u00e1ny probl\u00e9ma eset\u00e9n adjuk ki az al\u00e1bbi parancsokat PowerShellben (pl. a VS Code be\u00e9p\u00edtett Terminalb\u00f3l) a projekt gy\u00f6k\u00e9rmapp\u00e1j\u00e1b\u00f3l, ahol a .csproj f\u00e1jl is tal\u00e1lhat\u00f3: Get-ChildItem Cert :\\ CurrentUser \\ My | Where-Object { $_ . Subject -match 'localhost' } | Remove-Item dotnet dev-certs https -t - VAGY a launchSettings.json f\u00e1jlban \u00edrjuk \u00e1t a 'launchUrl' \u00e9s 'applicationUrl' \u00e9rt\u00e9keket https -r\u0151l http -re, \u00e9s sz\u00fcks\u00e9g eset\u00e9n enged\u00e9lyezz\u00fck a b\u00f6ng\u00e9sz\u0151 be\u00e1ll\u00edt\u00e1sai k\u00f6z\u00f6tt, hogy http-n is enged\u00e9lyezze a kommunik\u00e1ci\u00f3t, - VAGY (ha a laborg\u00e9peken minden k\u00f6t\u00e9l szakad, de figyelem , \u00edgy az utols\u00f3, iMSc feladat nem v\u00e9gezhet\u0151 el, ahhoz a szerverre mindenk\u00e9pp sz\u00fcks\u00e9g van!), haszn\u00e1ljuk a Live Servert: 1. k\u00f6zvetlen\u00fcl a wwwroot mapp\u00e1t nyissuk meg VS Code-ban, 2. m\u00e1soljuk \u00e1t ide a node_modules-b\u00f3l a bootstrap\\dist\\css\\bootstrap.css f\u00e1jlt, 3. hozzunk l\u00e9tre egy-egy \u00fcres f\u00e1jlt a wwwroot mapp\u00e1ban client-start.js \u00e9s styles.css n\u00e9ven, 4. hivatkozzuk ezeket az index.html <head> elem\u00e9ben a guessgame.js hivatkoz\u00e1sa helyett : ``` HTML 5. ind\u00edtsuk el a Live Servert a VS Code-b\u00f3l (a bal als\u00f3 sarokban lev\u0151 \"Go Live\" vagy az F1 -> 'Open Live Server' lehet\u0151s\u00e9ggel), 6. a labor h\u00e1tralev\u0151 r\u00e9sz\u00e9ben \u00fcgyelj\u00fcnk r\u00e1, hogy a ClientApp mappa helyett a wwwroot-ba dolgozzunk. Az alkalmaz\u00e1s indul\u00e1s\u00e1t k\u00f6vet\u0151en, ha \u00faj JS f\u00e1jlokat hozunk l\u00e9tre \u00e9s hivatkozzuk \u0151ket, a Webpack HMR ezeket a f\u00e1jlokat automatikusan friss\u00edti a b\u00f6ng\u00e9sz\u0151ben. Ett\u0151l f\u00fcggetlen\u00fcl el\u0151fordulhat, hogy a kliens oldalt \u00fajra kell ind\u00edtanunk, ekkor tov\u00e1bbra is sz\u00fcks\u00e9ges a b\u00f6ng\u00e9sz\u0151ben friss\u00edten\u00fcnk F5-tel. Elegend\u0151 egyetlen f\u00e1jlt refer\u00e1lnunk a HTML-ben, ez a guessgame.js n\u00e9vre hallgat. Ez az \u00f6sszecsomagolt, kliens oldali JavaScript alkalmaz\u00e1sunk. A kliens oldali k\u00f3d a ClientApp mapp\u00e1ban lesz tal\u00e1lhat\u00f3. Az alkalmaz\u00e1s bel\u00e9p\u00e9si pontja a ClientApp/client-start.js f\u00e1jl. A megold\u00e1s sor\u00e1n haszn\u00e1ljuk az objektumorient\u00e1lt megk\u00f6zel\u00edt\u00e9st \u00e9s a modern JS funkci\u00f3kat! Igyekezz\u00fcnk komponens-orient\u00e1ltan gondolkodni: egy objektum komponens, ha megjelenik a fel\u00fcleten a reprezent\u00e1ci\u00f3ja , k\u00e9pes kommunik\u00e1lni m\u00e1s objektumokkal \u00e9s komponensekkel, ezen fel\u00fcl lehet \u00e1llapota (mez\u0151i, tulajdons\u00e1gai, amiket karban tart). A 2021. novemberben megjelent .NET 6-tal az itt alkalmazott megk\u00f6zel\u00edt\u00e9s szerveroldali r\u00e9sze jelent\u0151sen egyszer\u0171s\u00f6d\u00f6tt .","title":"El\u0151k\u00e9sz\u00edt\u00e9s"},{"location":"laborok/13-js-advanced/#feladat-1-1-pont","text":"M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet az alkalmaz\u00e1s kezd\u0151k\u00e9perny\u0151j\u00e9r\u0151l!","title":"Feladat 1 (1 pont)"},{"location":"laborok/13-js-advanced/#modern-javascript-funkciok_1","text":"Az alkalmaz\u00e1sunknak sz\u00fcks\u00e9ge lesz egy \"g\u00e9pre\", aki majd kigondolja a sz\u00e1mot. Az egyszer\u0171s\u00e9g kedv\u00e9\u00e9rt most ez egy 1 \u00e9s 100 k\u00f6z\u00f6tti sz\u00e1m lesz, az \u00e9rt\u00e9k nem konfigur\u00e1lhat\u00f3. Szimul\u00e1ljuk, hogy a \"sz\u00e1m\u00edt\u00e1s\" komplex, \u00fagyhogy kis k\u00e9sleltet\u00e9st visz\u00fcnk majd abba, am\u00edg a v\u00e1laszt visszakapjuk a tipp\u00fcnkre. Az objektumaink, melyek a fel\u00fcleten is megjelennek, rendelkezni fognak egy render() f\u00fcggv\u00e9nnyel, \u00e9s lesz egy (az alkalmaz\u00e1s szempontj\u00e1b\u00f3l) glob\u00e1lis render() f\u00fcggv\u00e9ny\u00fcnk is, ami minden komponenst kirajzol azok render() f\u00fcggv\u00e9ny\u00e9nek megh\u00edv\u00e1s\u00e1val. El\u0151sz\u00f6r k\u00e9sz\u00edts\u00fck el az id\u0151z\u00edt\u0151t! Az id\u0151z\u00edt\u0151 a j\u00e1t\u00e9k indul\u00e1sakor elkezdi sz\u00e1molni a kliensen az eltelt id\u0151t. M\u00e1s elemekr\u0151l nem tud, \u00f6n\u00e1ll\u00f3an m\u0171k\u00f6dni k\u00e9pes, elindulni \u00e9s meg\u00e1llni tud, el lehet t\u0151le k\u00e9rni form\u00e1zottan az eltelt id\u0151t, \u00e9s ki tudja rajzolni az eltelt id\u0151t a fel\u00fcletre. A komponens k\u00f3dja \u00edgy az al\u00e1bbi: ClientApp \\ timer . js : ------------------- export class Timer { start () { this . started = Date . now (); this . interval = setInterval (() => this . render (), 150 ); } stop () { this . stopped = Date . now (); clearInterval ( this . interval ); } clear () { this . started = this . stopped = undefined ; } getElapsedTime () { return this . started ? Math . floor ((( this . stopped ? this . stopped : Date . now ()) - this . started ) / 1000 ) : \"-\" ; } render () { document . getElementById ( \"timer\" ). innerText = this . getElapsedTime (); } } Az id\u0151z\u00edt\u0151t \u00f6nmag\u00e1ban tesztelhetj\u00fck, ehhez p\u00e9ld\u00e1nyos\u00edtjuk, elind\u00edtjuk, majd le\u00e1ll\u00edtjuk: ClientApp \\ client - start . js : -------------------------- import { Timer } from './timer' ; window . addEventListener ( 'DOMContentLoaded' , () => { const timer = new Timer (); timer . start (); setTimeout (() => timer . stop (), 3000 ); }); Az id\u0151z\u00edt\u0151 persze \u00f6nmag\u00e1ban nem egy hasznos funkci\u00f3 a j\u00e1t\u00e9kban, viszont maga a j\u00e1t\u00e9k, mint komponens egy eleme. A j\u00e1t\u00e9kos is ilyen elem, r\u00f3la csak a nev\u00e9t kell tudnunk, viszont ez id\u0151vel fog csak ismertt\u00e9 v\u00e1lni sz\u00e1munkra, teh\u00e1t egy Promise objektummal tudjuk reprezent\u00e1lni. ClientApp \\ player . js : -------------------- export class Player { constructor () { this . onNameSet = new Promise (( resolve , reject ) => { document . getElementById ( 'start-form' ). addEventListener ( 'submit' , e => { e . preventDefault (); const name = document . getElementById ( 'name-input' ). value ; if ( name && name . length ) { resolve ( name ); } }); }); this . onNameSet . then ( name => { this . name = name ; this . render (); }); } render () { for ( let element of [ document . getElementById ( 'name-input' ), document . getElementById ( 'start-button' )]) element . disabled = !! ( this . name && this . name . length ); } } A Promise beteljesedik, amikor a #start-form \u0171rlapot elk\u00fcldik, \u00e9s a #name-input \u00e9rt\u00e9ke nem \u00fcres. Erre a Promise-re a j\u00e1t\u00e9kos maga is feliratkozik, \u00e9s sikeres beteljesed\u00e9s eset\u00e9n a name property-t be\u00e1ll\u00edtja mag\u00e1nak. A render() -ben megvizsg\u00e1lja, hogy van-e n\u00e9v, \u00e9s ha van, a disabled attrib\u00fatumokat megfelel\u0151en be\u00e1ll\u00edtja. Haszn\u00e1lhatn\u00e1nk a Promise bev\u00e1r\u00e1s\u00e1ra az await kulcssz\u00f3t is; ez viszont konstruktorban nem haszn\u00e1lhat\u00f3. L\u00e1thatjuk, hogy mindenki saj\u00e1t mag\u00e1t rendereli ki, amikor \u00e1llapotv\u00e1ltoz\u00e1st \u00e9szlel. Az eg\u00e9sz \u00f6sszek\u00f6t\u00e9s\u00e9re hozzuk l\u00e9tre a Game-et, ami mag\u00e1t a j\u00e1t\u00e9kot reprezent\u00e1lja. A Game m\u00e1r biztonsan ismer egy id\u0151z\u00edt\u0151t \u00e9s egy j\u00e1t\u00e9kost. A j\u00e1t\u00e9kos nev\u00e9nek v\u00e1ltoz\u00e1s\u00e1ra iratkozzunk fel, ez fogja elind\u00edtani a j\u00e1t\u00e9kot mag\u00e1t. A kezdeti \u00e1llapotot is ki tudja renderelni. Egy components property-ben fogjuk gy\u0171jteni az egyes komponenseinket, \u00e9s azoknak meg tudjuk h\u00edvni mindnek a render f\u00fcggv\u00e9ny\u00e9t (amennyiben a komponensnek van render f\u00fcggv\u00e9nye): ClientApp \\ game . js : ------------------ import { Player } from './player' ; import { Timer } from './timer' ; export class Game { constructor () { this . timer = new Timer (); this . player = new Player (); this . player . onNameSet . then (() => this . start ()); this . components = [ this . timer , this . player ]; this . render (); } render () { this . components . map ( c => c && typeof ( c . render ) === 'function' && c . render ()); } start () { this . timer . start (); } onGuessed ( num , guess ) { } onGuessing ( num ) { } } A j\u00e1t\u00e9kot a dokumentum bet\u00f6lt\u00e9sekor p\u00e9ld\u00e1nyos\u00edtjuk. Az onGuessed f\u00fcggv\u00e9nyt k\u00edv\u00fclr\u0151l tudj\u00e1k majd megh\u00edvni, jelezv\u00e9n, hogy egy tipp kisebb vagy nagyobb volt a \"gondolt\" sz\u00e1mn\u00e1l, esetleg tal\u00e1lt. Az onGuessing f\u00fcggv\u00e9nnyel egy tippet tudnak majd a j\u00e1t\u00e9knak k\u00fcldeni. A client-start.js tartalm\u00e1t cser\u00e9lj\u00fck le az al\u00e1bbira: ClientApp \\ client - start . js : -------------------------- import { Game } from './game' ; window . addEventListener ( 'DOMContentLoaded' , () => { const game = new Game (); });","title":"Modern JavaScript funkci\u00f3k"},{"location":"laborok/13-js-advanced/#feladat-2-1-pont","text":"M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet, ahol megadja a nev\u00e9t, \u00e9s ennek hat\u00e1s\u00e1ra az id\u0151z\u00edt\u0151 elindult, a n\u00e9v bek\u00e9r\u00e9s\u00e9re szolg\u00e1l\u00f3 input, valamint az ind\u00edt\u00e1sra szolg\u00e1l\u00f3 gomb pedig le vannak tiltva.","title":"Feladat 2 (1 pont)"},{"location":"laborok/13-js-advanced/#jateklogika","text":"A j\u00e1t\u00e9klogik\u00e1t egy random gener\u00e1tor \u00e1ltal adott 1 \u00e9s 100 k\u00f6z\u00f6tti eg\u00e9sz sz\u00e1m, \u00e9s a tippel\u00e9sre adott kisebb/nagyobb v\u00e1lasz interf\u00e9sze adja. \u00cdrjuk meg a j\u00e1t\u00e9klogik\u00e1t a kliens oldalon! ClientApp \\ logic . js : ------------------- export class Logic { constructor ( game ) { this . game = game ; } startGame () { const secretNumber = Math . floor ((( Math . random () * 100 ) + 1 )); this . secretGuess = ( num ) => secretNumber < num ? 'less' : secretNumber > num ? 'greater' : 'correct' ; } guess ( num ) { if ( this . secretGuess && typeof ( this . secretGuess ) === 'function' ) { setTimeout (() => this . game . onGuessed ( num , this . secretGuess ( num )), 400 ); } } } A titkos sz\u00e1mot a lok\u00e1lisan, a startGame f\u00fcggv\u00e9nyben t\u00e1rolt secretNumber v\u00e1ltoz\u00f3ban t\u00e1roljuk. Ez a v\u00e1ltoz\u00f3 k\u00edv\u00fclr\u0151l nem l\u00e1that\u00f3, az egyetlen f\u00fcggv\u00e9ny, aki ismeri ezt az \u00e9rt\u00e9ket, a secretGuess . A guess \"publikus\" f\u00fcggv\u00e9nyt megh\u00edvva a logika \u00e9rtes\u00edti a j\u00e1t\u00e9kot a tipp helyess\u00e9g\u00e9r\u0151l az onGuessed f\u00fcggv\u00e9nyen kereszt\u00fcl. A v\u00e1lasz k\u00e9sleltetve \u00e9rkezik, a k\u00e9sleltet\u00e9s 400ms. A j\u00e1t\u00e9knak sz\u00fcks\u00e9ge lesz valamilyen mechanizmusra, hogy meg tudja jelen\u00edteni a helyes/helytelen tippeket. Ezt egy Guesses oszt\u00e1ly p\u00e9ld\u00e1ny\u00e1ban fogjuk t\u00e1rolni, ami a fel\u00fcleten megjelen\u0151, tippeket tartalmaz\u00f3 t\u00e1bl\u00e1zatot fogja friss\u00edteni sz\u00fcks\u00e9g eset\u00e9n. ClientApp \\ guesses . js : --------------------- export class Guesses { constructor () { this . clear (); } addGuess ( num , value ) { if ( num && value ) { this . guesses . push ({ num , value }); this . render (); } } clear () { this . guesses = []; this . render (); } render () { for ( let tr of Array . from ( document . querySelectorAll ( '#guesses tbody tr' ))) tr . remove (); for ( let tr of ( this . guesses . map (( g , i ) => `<tr> <td> ${ i + 1 } </td> <td class='text-right'> ${ g . num } </td> <td class='bg- ${ g . value === 'correct' ? 'success' : 'danger' } '> ${ g . value === 'correct' ? '!!!' : g . value === 'less' ? '&gt;' : '&lt;' } </td> </tr>` ). reverse ())) document . querySelector ( '#guesses tbody' ). innerHTML += tr ; } } M\u00e1r csak a fel\u00fcletr\u0151l \u00e9rkez\u0151 tippet kell kezeln\u00fcnk, ehhez egy Guess oszt\u00e1lyt hozunk l\u00e9tre: ClientApp \\ guess . js export class Guess { constructor ( game ) { document . getElementById ( 'guess-form' ). addEventListener ( 'submit' , e => { e . preventDefault (); const value = parseInt ( document . getElementById ( 'guess-input' ). value ); if ( ! isNaN ( value ) && value > 0 && value <= 100 ) game . onGuessing ( value ); document . getElementById ( 'guess-form' ). reset (); }); document . getElementById ( 'guess-form' ). reset (); this . setEnabled ( false ); } setEnabled ( value ) { this . enabled = !! value ; this . render (); } render () { for ( let element of [ document . getElementById ( 'guess-input' ), document . getElementById ( 'guess-button' )]) { element . disabled = ! this . enabled ; } if ( ! this . enabled ) { document . getElementById ( 'guess-input' ). focus (); } } } \u00d6ssze kell k\u00f6tn\u00fcnk a j\u00e1t\u00e9kot a logik\u00e1val, ill. a kor\u00e1bbi tippek t\u00e1rol\u00e1s\u00e1\u00e9rt felel\u0151s objektummal, valamint kezeln\u00fcnk kell a fel\u00fcletr\u0151l, a felhaszn\u00e1l\u00f3 r\u00e9sz\u00e9r\u0151l \u00e9rkez\u0151 tippet. Friss\u00edts\u00fck a game.js tartalm\u00e1t az al\u00e1bbira: ClientApp \\ game . js : ------------------ import { Player } from './player' ; import { Timer } from './timer' ; import { Logic } from './logic' ; import { Guesses } from './guesses' ; import { Guess } from './guess' ; export class Game { constructor () { this . timer = new Timer (); this . player = new Player (); this . logic = new Logic ( this ); this . guesses = new Guesses (); this . guess = new Guess ( this ); this . player . onNameSet . then (() => this . start ()); this . components = [ this . timer , this . player , this . logic , this . guesses , this . guess ]; this . render (); } render () { this . components . map ( c => c && typeof ( c . render ) === 'function' && c . render ()); } start () { this . timer . start (); this . guess . setEnabled ( true ); this . logic . startGame (); } onGuessed ( num , guess ) { this . guesses . addGuess ( num , guess ); if ( guess === 'correct' ) { this . guess . setEnabled ( false ); this . timer . stop (); } } onGuessing ( num ) { this . logic . guess ( num ); } }","title":"J\u00e1t\u00e9klogika"},{"location":"laborok/13-js-advanced/#feladat-3-1-pont","text":"M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet egy j\u00e1t\u00e9k v\u00e9geredm\u00e9ny\u00e9r\u0151l, ahol l\u00e1that\u00f3k a leadott tippek \u00e9s az eltelt id\u0151!","title":"Feladat 3 (1 pont)"},{"location":"laborok/13-js-advanced/#onallo-feladatok","text":"","title":"\u00d6n\u00e1ll\u00f3 feladatok"},{"location":"laborok/13-js-advanced/#toplista","text":"A toplist\u00e1n kiz\u00e1r\u00f3lag a legjobb 10 eredm\u00e9nnyel rendelkez\u0151 egy\u00e9n jelenik meg. A toplista el\u0151sz\u00f6r a tippek sz\u00e1ma, majd a megtett id\u0151 alapj\u00e1n cs\u00f6kken\u0151 sorrend szerint rendezett. A toplista perzisztens, teh\u00e1t a j\u00e1t\u00e9k indul\u00e1sakor a toplista localStorage -b\u0151l bet\u00f6lt\u0151dik, az \u00faj bejegyz\u00e9sek pedig ide perziszt\u00e1l\u00f3dnak. Ehhez a localStorage glob\u00e1lis objektum getItem(key) \u00e9s setItem(key, value) met\u00f3dusai haszn\u00e1lhat\u00f3k, a rendez\u00e9shez a t\u00f6mb sort(callback) f\u00fcggv\u00e9nye haszn\u00e1lhat\u00f3, a callback k\u00e9t elemet kap, amelyekhez egy \u00f6sszehasonl\u00edt\u00e1st kell megadnunk, ami egy sz\u00e1m\u00e9rt\u00e9kkel t\u00e9r vissza (a kisebb sz\u00e1m\u00e9rt\u00e9k\u0171 elem el\u0151r\u00e9bb lesz a list\u00e1ban). ClientApp \\ toplist . js : --------------------- export class Toplist { constructor () { this . items = JSON . parse ( localStorage . getItem ( 'toplist' ) || '[]' ); this . render (); } setItem ( name , guesses , time ) { this . items . push ({ name , guesses , time }); this . items = this . items . sort (( a , b ) => a . guesses + a . time / 1000 - ( b . guesses + b . time / 1000 )). slice ( 0 , 9 ); localStorage . setItem ( 'toplist' , JSON . stringify ( this . items )); this . render (); } render () { document . querySelector ( '#toplist tbody' ). innerHTML = this . items . map (( e , i ) => ( `<tr> <th> ${ i + 1 } </th> <td> ${ e . name } </td> <td> ${ e . guesses } </td> <td> ${ e . time } </td> </tr>` )). join ( '' ); } } A toplist\u00e1t a j\u00e1t\u00e9khoz kell k\u00f6tn\u00fcnk, \u00e9s a setItem met\u00f3dust megh\u00edvni, amikor a j\u00e1t\u00e9knak v\u00e9ge. ClientApp \\ game . js : ------------------ /* ... */ import { Toplist } from './toplist' ; export class Game { constructor () { /* ... */ this . toplist = new Toplist (); /* ... */ this . components = [ this . timer , this . player , this . logic , this . guesses , this . guess , this . toplist ]; /* ... */ } /* ... */ onGuessed ( num , guess ) { /* ... */ if ( guess === 'correct' ) { /* ... */ this . toplist . setItem ( this . player . name , this . guesses . guesses . length , this . timer . getElapsedTime ()); } } /* ... */ }","title":"Toplista"},{"location":"laborok/13-js-advanced/#feladat-4-1-pont","text":"M\u00e1soljon be egy k\u00e9perny\u0151k\u00e9pet, amelyen legal\u00e1bb 3 k\u00fcl\u00f6nb\u00f6z\u0151 eredm\u00e9ny l\u00e1that\u00f3!","title":"Feladat 4 (1 pont)"},{"location":"laborok/13-js-advanced/#ujrakezdes","text":"A fenti gondolatmenetekhez hasonl\u00f3an k\u00e9sz\u00edtse el a j\u00e1t\u00e9k \u00fajrakezd\u00e9s\u00e9t implement\u00e1l\u00f3 logik\u00e1t! Az \u00fajrakezd\u00e9s az al\u00e1bbiakat jelenti: - a j\u00e1t\u00e9k befejez\u00e9s\u00e9t k\u00f6vet\u0151en megjelenik a fel\u00fcleten egy Restart c\u00edmk\u00e9j\u0171 gomb, melyet megnyomva \u00faj j\u00e1t\u00e9k indul (ezt k\u00f6vet\u0151en ism\u00e9t elt\u0171nik), - a felhaszn\u00e1l\u00f3 nev\u00e9t bek\u00e9r\u0151 \u0171rlap \u00fajb\u00f3l enged\u00e9lyezve lesz, a f\u00f3kusz ide helyez\u0151dik, a felhaszn\u00e1l\u00f3nak lehet\u0151s\u00e9ge van \u00e1t\u00edrni a nev\u00e9t \u00e9s \u00faj j\u00e1t\u00e9kot ind\u00edtani, - a jobb oldali t\u00e1bl\u00e1zatban l\u00e1that\u00f3 kor\u00e1bbi tippek \u00fcr\u00fclnek.","title":"\u00dajrakezd\u00e9s"},{"location":"laborok/13-js-advanced/#feladat-5-1-pont","text":"- Illessze be a forr\u00e1sk\u00f3dot az \u00fajrakezd\u00e9st megval\u00f3s\u00edt\u00f3 komponenshez, illetve az \u00f6sszes \u00e9rintett komponenshez! - Illesszen be k\u00e9perny\u0151k\u00e9pet a fel\u00fcleten dinamikusan elhelyezett gombr\u00f3l!","title":"Feladat 5 (1 pont)"},{"location":"laborok/13-js-advanced/#imsc-feladat-2-pont","text":"A kliens oldalon t\u00e1rolt logik\u00e1t helyezze \u00e1t a szerver oldalra! A szerveren fut egy WebSocket kiszolg\u00e1l\u00f3, mely b\u00e1rmilyen wss://localhost:port -on fut\u00f3 k\u00e9r\u00e9sre v\u00e1laszol (HTTP eset\u00e9n ( ws://localhost:port )). A szerverkapcsolatot az al\u00e1bbi oszt\u00e1ly reprezent\u00e1lja (a portsz\u00e1mot sz\u00fcks\u00e9ges lehet \u00e1t\u00edrnia a saj\u00e1t szerver portsz\u00e1m\u00e1ra): ClientApp \\ socketserver . js : -------------------------- export class SocketServer { constructor () { this . socket = new WebSocket ( 'wss://localhost:7579/ws' ); this . open = false ; this . socket . onopen = () => { this . open = true ; this . socket . onmessage = e => { this . onRecieve ( JSON . parse ( e . data )); } }; } send ( action , name , guess ) { if ( this . open ) { const json = JSON . stringify ({ action , name , guess }); console . log ( `Sending message: ${ json } ` ) this . socket . send ( json ); } } onRecieve ( data ) { console . log ( data ); } } A socket szerver URL-t sz\u00fcks\u00e9ges lehet \u00e1t\u00edrni: a portsz\u00e1mnak a szerver portsz\u00e1m\u00e1nak kell lennie (a dotnet watch run parancs ki\u00edrja, hol indul a szerver), \u00e9s http eset\u00e9n ws , https eset\u00e9n pedig wss protokollt kell (/\u00e9rdemes) haszn\u00e1lni. A szervert az al\u00e1bbi k\u00f3d mint\u00e1j\u00e1ra tudja haszn\u00e1lni: const server = new SocketServer (); setTimeout (() => { server . send ( \"setName\" , \"John Doe\" ); server . send ( \"startGame\" , \"John Doe\" ); let guess = 0 ; setInterval (() => server . send ( \"guess\" , \"John Doe\" , ++ guess ), 500 ); }, 2000 ); A szerver az al\u00e1bbi k\u00e9r\u00e9sekre figyel: - startGame : j\u00e1t\u00e9k ind\u00edt\u00e1sa. - setName : n\u00e9v be\u00e1ll\u00edt\u00e1sa az aktu\u00e1lis j\u00e1t\u00e9koshoz. Sz\u00fcks\u00e9ges a \"name\" param\u00e9ter megad\u00e1sa is. - guess : tipp k\u00fcld\u00e9se. Sz\u00fcks\u00e9ges a guess param\u00e9ter megad\u00e1sa is. - toplist : toplista lek\u00e9r\u00e9se. A szerver az al\u00e1bbiakat k\u00fcldi: - a toplist\u00e1t az al\u00e1bbi JSON-form\u00e1tumban k\u00fcldi a szerver: { name, guesses, timeInSeconds } , - egy tippre a szerver az \u00f6sszes klienst \u00e9rtes\u00edti, az al\u00e1bbi objektumot k\u00fcldve: { name, guess, value, timeInSeconds } . Val\u00f3s\u00edtsa meg az al\u00e1bbiakat: - a szerver t\u00e1rolja a j\u00e1t\u00e9k \u00e1llapotot, nem a kliens, - a szerver \u00e9rtes\u00fcl\u00e9s\u00e9re a kliensek fel vannak iratkozva, \u00e9s megosztj\u00e1k az \u00e1llapotot (t\u00f6bb b\u00f6ng\u00e9sz\u0151 ablakkal tudja demonstr\u00e1lni), - a szerver t\u00e1rolja a toplist\u00e1t, - a szerver k\u00fcld v\u00e1laszesem\u00e9nyeket a tippel\u00e9sre, minden feliratkoz\u00f3t \u00e9rtes\u00edt.","title":"iMSc feladat (2 pont)"},{"location":"laborok/13-js-advanced/#imsc-feladat-2-pont_1","text":"M\u00e1solja be a relev\u00e1ns k\u00f3dr\u00e9szleteket \u00e9s r\u00f6vid magyar\u00e1zattal t\u00e1massza al\u00e1 megold\u00e1s\u00e1t!","title":"iMSc feladat (2 pont)"}]}